"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@inngest";
exports.ids = ["vendor-chunks/@inngest"];
exports.modules = {

/***/ "(rsc)/./node_modules/@inngest/agent-kit/dist/chunk-J76M4KLW.js":
/*!****************************************************************!*\
  !*** ./node_modules/@inngest/agent-kit/dist/chunk-J76M4KLW.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Agent: () => (/* binding */ Agent),\n/* harmony export */   AgentResult: () => (/* binding */ AgentResult),\n/* harmony export */   AgenticModel: () => (/* binding */ AgenticModel),\n/* harmony export */   Network: () => (/* binding */ Network),\n/* harmony export */   NetworkRun: () => (/* binding */ NetworkRun),\n/* harmony export */   RoutingAgent: () => (/* binding */ RoutingAgent),\n/* harmony export */   State: () => (/* binding */ State),\n/* harmony export */   __spreadProps: () => (/* binding */ __spreadProps),\n/* harmony export */   __spreadValues: () => (/* binding */ __spreadValues),\n/* harmony export */   createAgent: () => (/* binding */ createAgent),\n/* harmony export */   createAgenticModelFromAiAdapter: () => (/* binding */ createAgenticModelFromAiAdapter),\n/* harmony export */   createNetwork: () => (/* binding */ createNetwork),\n/* harmony export */   createRoutingAgent: () => (/* binding */ createRoutingAgent),\n/* harmony export */   createState: () => (/* binding */ createState),\n/* harmony export */   createTool: () => (/* binding */ createTool),\n/* harmony export */   getDefaultRoutingAgent: () => (/* binding */ getDefaultRoutingAgent),\n/* harmony export */   getInngestFnInput: () => (/* binding */ getInngestFnInput),\n/* harmony export */   getStepTools: () => (/* binding */ getStepTools),\n/* harmony export */   initializeThread: () => (/* binding */ initializeThread),\n/* harmony export */   isInngestFn: () => (/* binding */ isInngestFn),\n/* harmony export */   loadThreadFromStorage: () => (/* binding */ loadThreadFromStorage),\n/* harmony export */   saveThreadToStorage: () => (/* binding */ saveThreadToStorage),\n/* harmony export */   stringifyError: () => (/* binding */ stringifyError)\n/* harmony export */ });\n/* harmony import */ var xxhashjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! xxhashjs */ \"(rsc)/./node_modules/xxhashjs/lib/index.js\");\n/* harmony import */ var inngest__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! inngest */ \"(rsc)/./node_modules/inngest/index.js\");\n/* harmony import */ var inngest_components_InngestFunction__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! inngest/components/InngestFunction */ \"(rsc)/./node_modules/inngest/components/InngestFunction.js\");\n/* harmony import */ var inngest_experimental__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! inngest/experimental */ \"(rsc)/./node_modules/inngest/experimental.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v3/types.js\");\n/* harmony import */ var _inngest_ai__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @inngest/ai */ \"(rsc)/./node_modules/@inngest/ai/dist/index.js\");\n/* harmony import */ var _dmitryrechkin_json_schema_to_zod__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @dmitryrechkin/json-schema-to-zod */ \"(rsc)/./node_modules/@dmitryrechkin/json-schema-to-zod/dist/index.js\");\n/* harmony import */ var _modelcontextprotocol_sdk_client_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @modelcontextprotocol/sdk/client/index.js */ \"(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/client/index.js\");\n/* harmony import */ var _modelcontextprotocol_sdk_client_streamableHttp_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @modelcontextprotocol/sdk/client/streamableHttp.js */ \"(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/client/streamableHttp.js\");\n/* harmony import */ var _modelcontextprotocol_sdk_client_sse_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @modelcontextprotocol/sdk/client/sse.js */ \"(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/client/sse.js\");\n/* harmony import */ var _modelcontextprotocol_sdk_client_websocket_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @modelcontextprotocol/sdk/client/websocket.js */ \"(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/client/websocket.js\");\n/* harmony import */ var _modelcontextprotocol_sdk_client_stdio_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @modelcontextprotocol/sdk/client/stdio.js */ \"(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/client/stdio.js\");\n/* harmony import */ var _modelcontextprotocol_sdk_shared_transport_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @modelcontextprotocol/sdk/shared/transport.js */ \"(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/shared/transport.js\");\n/* harmony import */ var _modelcontextprotocol_sdk_types_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @modelcontextprotocol/sdk/types.js */ \"(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/types.js\");\n/* harmony import */ var eventsource__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! eventsource */ \"(rsc)/./node_modules/eventsource/dist/index.js\");\n/* harmony import */ var inngest_helpers_errors__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! inngest/helpers/errors */ \"(rsc)/./node_modules/inngest/helpers/errors.js\");\n/* harmony import */ var inngest_types__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! inngest/types */ \"(rsc)/./node_modules/inngest/types.js\");\n/* harmony import */ var zod_to_json_schema__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! zod-to-json-schema */ \"(rsc)/./node_modules/zod-to-json-schema/dist/esm/index.js\");\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __typeError = (msg) => {\n  throw TypeError(msg);\n};\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __accessCheck = (obj, member, msg) => member.has(obj) || __typeError(\"Cannot \" + msg);\nvar __privateGet = (obj, member, getter) => (__accessCheck(obj, member, \"read from private field\"), getter ? getter.call(obj) : member.get(obj));\nvar __privateAdd = (obj, member, value) => member.has(obj) ? __typeError(\"Cannot add the same private member more than once\") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\nvar __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, \"write to private field\"), setter ? setter.call(obj, value) : member.set(obj, value), value);\n\n// src/types.ts\n\nvar _checksum;\nvar AgentResult = class {\n  constructor(agentName, output, toolCalls, createdAt, prompt, history, raw) {\n    this.agentName = agentName;\n    this.output = output;\n    this.toolCalls = toolCalls;\n    this.createdAt = createdAt;\n    this.prompt = prompt;\n    this.history = history;\n    this.raw = raw;\n    // checksum memoizes a checksum so that it doe snot have to be calculated many times.\n    __privateAdd(this, _checksum);\n  }\n  /**\n   * export returns all fields necessary to store the AgentResult for future use.\n   */\n  export() {\n    return {\n      agentName: this.agentName,\n      output: this.output,\n      toolCalls: this.toolCalls,\n      createdAt: this.createdAt,\n      checksum: this.checksum\n    };\n  }\n  /**\n   * checksum is a unique ID for this result.\n   *\n   * It is generated by taking a checksum of the message output and the created at date.\n   * This allows you to dedupe items when saving conversation history.\n   */\n  get checksum() {\n    if (__privateGet(this, _checksum) === void 0) {\n      const input = JSON.stringify(this.output.concat(this.toolCalls)) + this.createdAt.toString();\n      __privateSet(this, _checksum, xxhashjs__WEBPACK_IMPORTED_MODULE_0__.h64(input, 0).toString());\n    }\n    return __privateGet(this, _checksum);\n  }\n};\n_checksum = new WeakMap();\n\n// src/state.ts\nvar createState = (initialState, opts) => {\n  return new State(__spreadProps(__spreadValues({}, opts), { data: initialState }));\n};\nvar __kv;\nvar _State = class _State {\n  constructor({ data, messages, threadId, results } = {}) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    __privateAdd(this, __kv);\n    this._results = results || [];\n    this._messages = messages || [];\n    this._data = data ? __spreadValues({}, data) : {};\n    this.threadId = threadId;\n    this.data = new Proxy(this._data, {\n      set: (target, prop, value) => {\n        if (typeof prop === \"string\" && prop in target) {\n          Reflect.set(target, prop, value);\n          return true;\n        }\n        return Reflect.set(target, prop, value);\n      }\n    });\n    __privateSet(this, __kv, new Map(Object.entries(this._data)));\n    this.kv = {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      set: (key, value) => {\n        __privateGet(this, __kv).set(key, value);\n      },\n      get: (key) => {\n        return __privateGet(this, __kv).get(key);\n      },\n      delete: (key) => {\n        return __privateGet(this, __kv).delete(key);\n      },\n      has: (key) => {\n        return __privateGet(this, __kv).has(key);\n      },\n      all: () => {\n        return Object.fromEntries(__privateGet(this, __kv));\n      }\n    };\n  }\n  /**\n   * Results returns a new array containing all past inference results in the\n   * network. This array is safe to modify.\n   */\n  get results() {\n    return this._results.slice();\n  }\n  /**\n   * Replaces all results with the provided array\n   * used when loading initial results from history.get()\n   */\n  setResults(results) {\n    this._results = results;\n  }\n  /**\n   * Returns a slice of results from the given start index\n   * used when saving results to a database via history.appendResults()\n   */\n  getResultsFrom(startIndex) {\n    return this._results.slice(startIndex);\n  }\n  /**\n   * Messages returns a new array containing all initial messages that were\n   * provided to the constructor. This array is safe to modify.\n   */\n  get messages() {\n    return this._messages.slice();\n  }\n  /**\n   * formatHistory returns the memory used for agentic calls based off of prior\n   * agentic calls.\n   *\n   * This is used to format the current State as a conversation log when\n   * calling an individual agent.\n   *\n   */\n  formatHistory(formatter) {\n    if (!formatter) {\n      formatter = defaultResultFormatter;\n    }\n    return this._messages.concat(\n      this._results.map((result) => formatter(result)).flat()\n    );\n  }\n  /**\n   * appendResult appends a given result to the current state.  This\n   * is called by the network after each iteration.\n   */\n  appendResult(call) {\n    this._results.push(call);\n  }\n  /**\n   * clone allows you to safely clone the state.\n   */\n  clone() {\n    const state = new _State({\n      data: this.data,\n      threadId: this.threadId,\n      messages: this._messages.slice(),\n      results: this._results.slice()\n    });\n    return state;\n  }\n};\n__kv = new WeakMap();\nvar State = _State;\nvar defaultResultFormatter = (r) => {\n  return [].concat(r.output).concat(r.toolCalls);\n};\n\n// src/util.ts\n\n\n\n\nvar stringifyError = (e) => {\n  if (e instanceof Error) {\n    return e.message;\n  }\n  return String(e);\n};\nvar getStepTools = async () => {\n  const asyncCtx = await (0,inngest_experimental__WEBPACK_IMPORTED_MODULE_3__.getAsyncCtx)();\n  return asyncCtx == null ? void 0 : asyncCtx.ctx.step;\n};\nvar isInngestFn = (fn) => {\n  if (fn instanceof inngest_components_InngestFunction__WEBPACK_IMPORTED_MODULE_2__.InngestFunction) {\n    return true;\n  }\n  if (typeof fn === \"object\" && fn !== null && \"createExecution\" in fn && typeof fn.createExecution === \"function\") {\n    return true;\n  }\n  return false;\n};\nvar getInngestFnInput = (fn) => {\n  var _a, _b, _c;\n  const runtimeSchemas = (_a = fn[\"client\"][\"schemas\"]) == null ? void 0 : _a[\"runtimeSchemas\"];\n  if (!runtimeSchemas) {\n    return;\n  }\n  const schemasToAttempt = new Set(\n    (_c = (_b = fn[\"opts\"].triggers) == null ? void 0 : _b.reduce((acc, trigger) => {\n      if (trigger.event) {\n        return [...acc, trigger.event];\n      }\n      return acc;\n    }, [])) != null ? _c : []\n  );\n  if (!schemasToAttempt.size) {\n    return;\n  }\n  let schema;\n  for (const eventSchema of schemasToAttempt) {\n    const runtimeSchema = runtimeSchemas[eventSchema];\n    if (typeof runtimeSchema === \"object\" && runtimeSchema !== null && \"data\" in runtimeSchema && helpers.isZodObject(runtimeSchema.data)) {\n      if (schema) {\n        schema = schema.or(runtimeSchema.data);\n      } else {\n        schema = runtimeSchema.data;\n      }\n      continue;\n    }\n  }\n  return schema;\n};\nvar helpers = {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  isZodObject: (value) => {\n    return value instanceof zod__WEBPACK_IMPORTED_MODULE_4__.ZodType && value._def.typeName === \"ZodObject\";\n  },\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  isObject: (value) => {\n    return typeof value === \"object\" && value !== null && !Array.isArray(value);\n  }\n};\n\n// src/network.ts\n\n\n\n// src/agent.ts\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// src/model.ts\n\n\n// src/adapters/index.ts\n\n\n// src/adapters/anthropic.ts\n\n\n\n\n// src/tool.ts\n\n\nfunction createTool({\n  name,\n  description,\n  parameters,\n  handler\n}) {\n  return {\n    name,\n    description,\n    parameters,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    handler\n    // eslint-disable-line @typescript-eslint/no-explicit-any\n  };\n}\n\n// src/adapters/anthropic.ts\nvar requestParser = (model, messages, tools, tool_choice = \"auto\") => {\n  const systemMessage = messages.find(\n    (m) => m.role === \"system\" && m.type === \"text\"\n  );\n  const system = typeof (systemMessage == null ? void 0 : systemMessage.content) === \"string\" ? systemMessage.content : \"\";\n  const anthropicMessages = messages.filter((m) => m.role !== \"system\").reduce(\n    (acc, m) => {\n      switch (m.type) {\n        case \"text\":\n          return [\n            ...acc,\n            {\n              role: m.role,\n              content: Array.isArray(m.content) ? m.content.map((text) => ({ type: \"text\", text })) : m.content\n            }\n          ];\n        case \"tool_call\":\n          return [\n            ...acc,\n            {\n              role: m.role,\n              content: m.tools.map((tool) => ({\n                type: \"tool_use\",\n                id: tool.id,\n                input: tool.input,\n                name: tool.name\n              }))\n            }\n          ];\n        case \"tool_result\":\n          return [\n            ...acc,\n            {\n              role: \"user\",\n              content: [\n                {\n                  type: \"tool_result\",\n                  tool_use_id: m.tool.id,\n                  content: typeof m.content === \"string\" ? m.content : JSON.stringify(m.content)\n                }\n              ]\n            }\n          ];\n      }\n    },\n    []\n  );\n  const lastMessage = anthropicMessages[anthropicMessages.length - 1];\n  if ((lastMessage == null ? void 0 : lastMessage.role) === \"assistant\") {\n    lastMessage.role = \"user\";\n  }\n  const request = {\n    system,\n    model: model.options.model,\n    max_tokens: model.options.defaultParameters.max_tokens,\n    messages: anthropicMessages\n  };\n  if (tools == null ? void 0 : tools.length) {\n    request.tools = tools.map((t) => {\n      return {\n        name: t.name,\n        description: t.description,\n        input_schema: t.parameters ? (0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_16__.zodToJsonSchema)(t.parameters) : (0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_16__.zodToJsonSchema)(\n          zod__WEBPACK_IMPORTED_MODULE_4__.object({})\n        )\n      };\n    });\n    request.tool_choice = toolChoice(tool_choice);\n  }\n  return request;\n};\nvar responseParser = (input) => {\n  var _a, _b;\n  if (input.type === \"error\") {\n    throw new Error(\n      ((_a = input.error) == null ? void 0 : _a.message) || `Anthropic request failed: ${JSON.stringify(input.error)}`\n    );\n  }\n  return ((_b = input == null ? void 0 : input.content) != null ? _b : []).reduce((acc, item) => {\n    if (!item.type) {\n      return acc;\n    }\n    switch (item.type) {\n      case \"text\":\n        return [\n          ...acc,\n          {\n            type: \"text\",\n            role: input.role,\n            content: item.text,\n            // XXX: Better stop reason parsing\n            stop_reason: \"stop\"\n          }\n        ];\n      case \"tool_use\": {\n        let args;\n        try {\n          args = typeof item.input === \"string\" ? JSON.parse(item.input) : item.input;\n        } catch (e) {\n          args = item.input;\n        }\n        return [\n          ...acc,\n          {\n            type: \"tool_call\",\n            role: input.role,\n            stop_reason: \"tool\",\n            tools: [\n              {\n                type: \"tool\",\n                id: item.id,\n                name: item.name,\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                input: args\n              }\n            ]\n          }\n        ];\n      }\n    }\n  }, []);\n};\nvar toolChoice = (choice) => {\n  switch (choice) {\n    case \"auto\":\n      return { type: \"auto\" };\n    case \"any\":\n      return { type: \"any\" };\n    default:\n      if (typeof choice === \"string\") {\n        return {\n          type: \"tool\",\n          name: choice\n        };\n      }\n  }\n};\n\n// src/adapters/openai.ts\n\n\nvar requestParser2 = (model, messages, tools, tool_choice = \"auto\") => {\n  var _a, _b;\n  const request = {\n    messages: messages.map((m) => {\n      var _a2;\n      switch (m.type) {\n        case \"text\":\n          return {\n            role: m.role,\n            content: m.content\n          };\n        case \"tool_call\":\n          return {\n            role: \"assistant\",\n            content: null,\n            tool_calls: m.tools ? (_a2 = m.tools) == null ? void 0 : _a2.map((tool) => ({\n              id: tool.id,\n              type: \"function\",\n              function: {\n                name: tool.name,\n                arguments: JSON.stringify(tool.input)\n              }\n            })) : void 0\n          };\n        case \"tool_result\":\n          return {\n            role: \"tool\",\n            tool_call_id: m.tool.id,\n            content: typeof m.content === \"string\" ? m.content : JSON.stringify(m.content)\n          };\n      }\n    })\n  };\n  if (tools == null ? void 0 : tools.length) {\n    request.tool_choice = toolChoice2(tool_choice);\n    if (!((_a = model.options.model) == null ? void 0 : _a.includes(\"o3\")) && !((_b = model.options.model) == null ? void 0 : _b.includes(\"o1\"))) {\n      request.parallel_tool_calls = false;\n    }\n    request.tools = tools.map((t) => {\n      return {\n        type: \"function\",\n        function: {\n          name: t.name,\n          description: t.description,\n          parameters: t.parameters && (0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_16__.zodToJsonSchema)(t.parameters, { target: \"openAi\" }),\n          strict: typeof t.strict !== \"undefined\" ? t.strict : Boolean(t.parameters)\n          // strict mode is only supported with parameters\n        }\n      };\n    });\n  }\n  return request;\n};\nvar responseParser2 = (input) => {\n  var _a;\n  if (input.error) {\n    throw new Error(\n      input.error.message || `OpenAI request failed: ${JSON.stringify(input.error)}`\n    );\n  }\n  return ((_a = input == null ? void 0 : input.choices) != null ? _a : []).reduce((acc, choice) => {\n    var _a2, _b;\n    const { message, finish_reason } = choice;\n    if (!message) {\n      return acc;\n    }\n    const base = {\n      role: choice.message.role,\n      stop_reason: openAiStopReasonToStateStopReason[finish_reason != null ? finish_reason : \"\"] || \"stop\"\n    };\n    if (message.content && message.content.trim() !== \"\") {\n      acc.push(__spreadProps(__spreadValues({}, base), {\n        type: \"text\",\n        content: message.content\n      }));\n    }\n    if (((_b = (_a2 = message.tool_calls) == null ? void 0 : _a2.length) != null ? _b : 0) > 0) {\n      acc.push(__spreadProps(__spreadValues({}, base), {\n        type: \"tool_call\",\n        tools: message.tool_calls.map((tool) => {\n          return {\n            type: \"tool\",\n            id: tool.id,\n            name: tool.function.name,\n            function: tool.function.name,\n            // Duplicate for backward compatibility\n            // Use safe parser to handle OpenAI's JSON quirks (like backticks in strings)\n            input: safeParseOpenAIJson(tool.function.arguments || \"{}\")\n          };\n        })\n      }));\n    }\n    return acc;\n  }, []);\n};\nvar safeParseOpenAIJson = (str) => {\n  const trimmed = str.replace(/^[\"']|[\"']$/g, \"\");\n  try {\n    return JSON.parse(trimmed);\n  } catch (e) {\n    try {\n      const withQuotes = trimmed.replace(\n        /`([\\s\\S]*?)`/g,\n        (_, content) => JSON.stringify(content)\n      );\n      return JSON.parse(withQuotes);\n    } catch (e2) {\n      throw new Error(\n        `Failed to parse JSON with backticks: ${stringifyError(e2)}`\n      );\n    }\n  }\n};\nvar openAiStopReasonToStateStopReason = {\n  tool_calls: \"tool\",\n  stop: \"stop\",\n  length: \"stop\",\n  content_filter: \"stop\",\n  function_call: \"tool\"\n};\nvar toolChoice2 = (choice) => {\n  switch (choice) {\n    case \"auto\":\n      return \"auto\";\n    case \"any\":\n      return \"required\";\n    default:\n      return {\n        type: \"function\",\n        function: { name: choice }\n      };\n  }\n};\n\n// src/adapters/gemini.ts\n\n\n\nvar requestParser3 = (_model2, messages, tools, tool_choice = \"auto\") => {\n  const contents = messages.map((m) => messageToContent(m));\n  const functionDeclarations = tools.map((t) => ({\n    name: t.name,\n    description: t.description,\n    parameters: t.parameters ? geminiZodToJsonSchema(t.parameters) : (\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      geminiZodToJsonSchema(zod__WEBPACK_IMPORTED_MODULE_4__.object({}))\n    )\n  }));\n  return __spreadValues({\n    contents\n  }, tools.length > 0 ? {\n    tools: [\n      {\n        functionDeclarations\n      }\n    ],\n    tool_config: toolChoice3(tool_choice)\n  } : {});\n};\nvar messageContentToString = (content) => {\n  if (typeof content === \"string\") {\n    return content;\n  }\n  return content.map((c) => c.text).join(\"\");\n};\nvar responseParser3 = (input) => {\n  var _a, _b, _c;\n  if (input.error) {\n    throw new Error(\n      ((_a = input.error) == null ? void 0 : _a.message) || `Gemini request failed: ${JSON.stringify(input.error)}`\n    );\n  }\n  const messages = [];\n  for (const candidate of (_b = input.candidates) != null ? _b : []) {\n    if (candidate.finishReason === \"MALFORMED_FUNCTION_CALL\") {\n      console.warn(\n        \"Gemini returned MALFORMED_FUNCTION_CALL, skipping this candidate. This typically indicates an issue with tool/function call formatting. Check your tool definitions and parameters.\"\n      );\n      continue;\n    }\n    if (!((_c = candidate.content) == null ? void 0 : _c.parts)) {\n      continue;\n    }\n    for (const content of candidate.content.parts) {\n      if (candidate.content.role === \"user\" && \"text\" in content) {\n        messages.push({\n          role: \"user\",\n          type: \"text\",\n          content: content.text\n        });\n      } else if (candidate.content.role === \"model\" && \"text\" in content) {\n        messages.push({\n          role: \"assistant\",\n          type: \"text\",\n          content: content.text\n        });\n      } else if (candidate.content.role === \"model\" && \"functionCall\" in content) {\n        messages.push({\n          role: \"assistant\",\n          type: \"tool_call\",\n          stop_reason: \"tool\",\n          tools: [\n            {\n              name: content.functionCall.name,\n              input: content.functionCall.args,\n              type: \"tool\",\n              id: content.functionCall.name\n            }\n          ]\n        });\n      } else if (candidate.content.role === \"user\" && \"functionResponse\" in content) {\n        messages.push({\n          role: \"tool_result\",\n          type: \"tool_result\",\n          stop_reason: \"tool\",\n          tool: {\n            name: content.functionResponse.name,\n            input: content.functionResponse.response,\n            type: \"tool\",\n            id: content.functionResponse.name\n          },\n          content: JSON.stringify(content.functionResponse.response)\n        });\n      } else {\n        throw new Error(\"Unknown content type\");\n      }\n    }\n  }\n  return messages;\n};\nvar messageToContent = (m) => {\n  switch (m.role) {\n    case \"system\":\n      return {\n        role: \"user\",\n        parts: [{ text: messageContentToString(m.content) }]\n      };\n    case \"user\":\n      switch (m.type) {\n        case \"tool_call\":\n          if (m.tools.length === 0) {\n            throw new Error(\"Tool call message must have at least one tool\");\n          }\n          return {\n            role: \"model\",\n            parts: [\n              {\n                functionCall: {\n                  name: m.tools[0].name,\n                  args: m.tools[0].input\n                }\n              }\n            ]\n          };\n        case \"text\":\n        default:\n          return {\n            role: \"user\",\n            parts: [{ text: messageContentToString(m.content) }]\n          };\n      }\n    case \"assistant\":\n      switch (m.type) {\n        case \"tool_call\":\n          if (m.tools.length === 0) {\n            throw new Error(\"Tool call message must have at least one tool\");\n          }\n          return {\n            role: \"model\",\n            parts: [\n              {\n                functionCall: {\n                  name: m.tools[0].name,\n                  args: m.tools[0].input\n                }\n              }\n            ]\n          };\n        case \"text\":\n        default:\n          return {\n            role: \"model\",\n            parts: [{ text: messageContentToString(m.content) }]\n          };\n      }\n    case \"tool_result\":\n      return {\n        role: \"user\",\n        parts: [\n          {\n            functionResponse: {\n              name: m.tool.name,\n              response: {\n                name: m.tool.name,\n                content: typeof m.content === \"string\" ? m.content : JSON.stringify(m.content)\n              }\n            }\n          }\n        ]\n      };\n    default:\n      throw new Error(`Unknown message role: ${m.role}`);\n  }\n};\nvar toolChoice3 = (choice) => {\n  switch (choice) {\n    case \"auto\":\n      return {\n        functionCallingConfig: {\n          mode: \"AUTO\"\n        }\n      };\n    case \"any\":\n      return {\n        functionCallingConfig: {\n          mode: \"ANY\"\n        }\n      };\n    default:\n      if (typeof choice === \"string\") {\n        return {\n          functionCallingConfig: {\n            mode: \"ANY\",\n            allowedFunctionNames: [choice]\n          }\n        };\n      }\n  }\n};\nvar recursiveGeminiZodToJsonSchema = (obj) => {\n  if (obj === null || obj === void 0 || typeof obj !== \"object\") {\n    return obj;\n  }\n  if (Array.isArray(obj)) {\n    return obj.map(recursiveGeminiZodToJsonSchema);\n  }\n  const newObj = __spreadValues({}, obj);\n  for (const key in newObj) {\n    if (newObj[key] != null) {\n      newObj[key] = recursiveGeminiZodToJsonSchema(\n        newObj[key]\n      );\n    }\n  }\n  if ((newObj == null ? void 0 : newObj[\"additionalProperties\"]) != null) {\n    delete newObj[\"additionalProperties\"];\n  }\n  return newObj;\n};\nvar geminiZodToJsonSchema = (zod) => {\n  let schema = (0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_16__.zodToJsonSchema)(zod, { target: \"openApi3\" });\n  schema = recursiveGeminiZodToJsonSchema(schema);\n  return schema;\n};\n\n// src/adapters/grok.ts\nvar requestParser4 = (model, messages, tools, tool_choice = \"auto\") => {\n  const request = requestParser2(\n    model,\n    messages,\n    tools,\n    tool_choice\n  );\n  request.tools = (request.tools || []).map((tool) => __spreadProps(__spreadValues({}, tool), {\n    function: __spreadProps(__spreadValues({}, tool.function), {\n      strict: false\n    })\n  }));\n  return request;\n};\nvar responseParser4 = responseParser2;\n\n// src/adapters/index.ts\nvar adapters = {\n  \"openai-chat\": {\n    request: requestParser2,\n    response: responseParser2\n  },\n  anthropic: {\n    request: requestParser,\n    response: responseParser\n  },\n  gemini: {\n    request: requestParser3,\n    response: responseParser3\n  },\n  grok: {\n    request: requestParser4,\n    response: responseParser4\n  }\n};\n\n// src/model.ts\nvar createAgenticModelFromAiAdapter = (adapter) => {\n  const opts = adapters[adapter.format];\n  return new AgenticModel({\n    model: adapter,\n    requestParser: opts.request,\n    responseParser: opts.response\n  });\n};\nvar _model;\nvar AgenticModel = class {\n  constructor({\n    model,\n    requestParser: requestParser5,\n    responseParser: responseParser5\n  }) {\n    __privateAdd(this, _model);\n    __privateSet(this, _model, model);\n    this.requestParser = requestParser5;\n    this.responseParser = responseParser5;\n  }\n  async infer(stepID, input, tools, tool_choice) {\n    var _a, _b;\n    const body = this.requestParser(__privateGet(this, _model), input, tools, tool_choice);\n    let result;\n    const step = await getStepTools();\n    if (step) {\n      result = await step.ai.infer(stepID, {\n        model: __privateGet(this, _model),\n        body\n      });\n    } else {\n      const modelCopy = __spreadValues({}, __privateGet(this, _model));\n      (_b = (_a = __privateGet(this, _model)).onCall) == null ? void 0 : _b.call(_a, modelCopy, body);\n      const url = new URL(modelCopy.url || \"\");\n      const headers = {\n        \"Content-Type\": \"application/json\"\n      };\n      const formatHandlers = {\n        \"openai-chat\": () => {\n          headers[\"Authorization\"] = `Bearer ${modelCopy.authKey}`;\n        },\n        anthropic: () => {\n          headers[\"x-api-key\"] = modelCopy.authKey;\n          headers[\"anthropic-version\"] = \"2023-06-01\";\n        },\n        gemini: () => {\n        },\n        grok: () => {\n        }\n      };\n      formatHandlers[modelCopy.format]();\n      result = await (await fetch(url, {\n        method: \"POST\",\n        headers,\n        body: JSON.stringify(body)\n      })).json();\n    }\n    return { output: this.responseParser(result), raw: result };\n  }\n};\n_model = new WeakMap();\n\n// src/agent.ts\nvar createAgent = (opts) => new Agent(opts);\nvar createRoutingAgent = (opts) => new RoutingAgent(opts);\nvar Agent = class _Agent {\n  constructor(opts) {\n    this.name = opts.name;\n    this.description = opts.description || \"\";\n    this.system = opts.system;\n    this.assistant = opts.assistant || \"\";\n    this.tools = /* @__PURE__ */ new Map();\n    this.tool_choice = opts.tool_choice;\n    this.lifecycles = opts.lifecycle;\n    this.model = opts.model;\n    this.history = opts.history;\n    this.setTools(opts.tools);\n    this.mcpServers = opts.mcpServers;\n    this._mcpClients = [];\n  }\n  setTools(tools) {\n    for (const tool of tools || []) {\n      if (isInngestFn(tool)) {\n        this.tools.set(tool[\"absoluteId\"], {\n          name: tool[\"absoluteId\"],\n          description: tool.description,\n          // TODO Should we error here if we can't find an input schema?\n          parameters: getInngestFnInput(tool),\n          handler: async (input, opts) => {\n            const step = await getStepTools();\n            if (!step) {\n              throw new Error(\"Inngest tool called outside of Inngest context\");\n            }\n            const stepId = `${opts.agent.name}/tools/${tool[\"absoluteId\"]}`;\n            return step.invoke(stepId, {\n              function: (0,inngest__WEBPACK_IMPORTED_MODULE_1__.referenceFunction)({\n                appId: tool[\"client\"][\"id\"],\n                functionId: tool.id()\n              }),\n              data: input\n            });\n          }\n        });\n      } else {\n        this.tools.set(tool.name, tool);\n      }\n    }\n  }\n  withModel(model) {\n    return new _Agent({\n      name: this.name,\n      description: this.description,\n      system: this.system,\n      assistant: this.assistant,\n      tools: Array.from(this.tools.values()),\n      lifecycle: this.lifecycles,\n      model\n    });\n  }\n  /**\n   * Run runs an agent with the given user input, treated as a user message.  If\n   * the input is an empty string, only the system prompt will execute.\n   */\n  async run(input, { model, network, state, maxIter = 0 } = {}) {\n    var _a, _b;\n    await this.initMCP();\n    const rawModel = model || this.model || (network == null ? void 0 : network.defaultModel);\n    if (!rawModel) {\n      throw new Error(\"No model provided to agent\");\n    }\n    const p = createAgenticModelFromAiAdapter(rawModel);\n    const s = state || (network == null ? void 0 : network.state) || new State();\n    const run = new NetworkRun(\n      network || createNetwork({ name: \"default\", agents: [] }),\n      s\n    );\n    await initializeThread({\n      state: s,\n      history: this.history,\n      input,\n      network: run\n    });\n    await loadThreadFromStorage({\n      state: s,\n      history: this.history,\n      input,\n      network: run\n    });\n    let history = s ? s.formatHistory() : [];\n    let prompt = await this.agentPrompt(input, run);\n    let result = new AgentResult(\n      this.name,\n      [],\n      [],\n      /* @__PURE__ */ new Date(),\n      prompt,\n      history,\n      \"\"\n    );\n    let hasMoreActions = true;\n    let iter = 0;\n    const initialResultCount = s.results.length;\n    do {\n      if ((_a = this.lifecycles) == null ? void 0 : _a.onStart) {\n        const modified = await this.lifecycles.onStart({\n          agent: this,\n          network: run,\n          input,\n          prompt,\n          history\n        });\n        if (modified.stop) {\n          return result;\n        }\n        prompt = modified.prompt;\n        history = modified.history;\n      }\n      const inference = await this.performInference(p, prompt, history, run);\n      hasMoreActions = Boolean(\n        this.tools.size > 0 && inference.output.length && inference.output[inference.output.length - 1].stop_reason !== \"stop\"\n      );\n      result = inference;\n      history = [...inference.output];\n      iter++;\n    } while (hasMoreActions && iter < maxIter);\n    if ((_b = this.lifecycles) == null ? void 0 : _b.onFinish) {\n      result = await this.lifecycles.onFinish({\n        agent: this,\n        network: run,\n        result\n      });\n    }\n    await saveThreadToStorage({\n      state: s,\n      history: this.history,\n      input,\n      initialResultCount,\n      network: run\n    });\n    return result;\n  }\n  async performInference(p, prompt, history, network) {\n    var _a;\n    const { output, raw } = await p.infer(\n      this.name,\n      prompt.concat(history),\n      Array.from(this.tools.values()),\n      this.tool_choice || \"auto\"\n    );\n    let result = new AgentResult(\n      this.name,\n      output,\n      [],\n      /* @__PURE__ */ new Date(),\n      prompt,\n      history,\n      typeof raw === \"string\" ? raw : JSON.stringify(raw)\n    );\n    if ((_a = this.lifecycles) == null ? void 0 : _a.onResponse) {\n      result = await this.lifecycles.onResponse({\n        agent: this,\n        network,\n        result\n      });\n    }\n    const toolCallOutput = await this.invokeTools(result.output, network);\n    if (toolCallOutput.length > 0) {\n      result.toolCalls = result.toolCalls.concat(toolCallOutput);\n    }\n    return result;\n  }\n  /**\n   * invokeTools takes output messages from an inference call then invokes any tools\n   * in the message responses.\n   */\n  async invokeTools(msgs, network) {\n    const output = [];\n    for (const msg of msgs) {\n      if (msg.type !== \"tool_call\") {\n        continue;\n      }\n      if (!Array.isArray(msg.tools)) {\n        continue;\n      }\n      for (const tool of msg.tools) {\n        const found = this.tools.get(tool.name);\n        if (!found) {\n          throw new Error(\n            `Inference requested a non-existent tool: ${tool.name}`\n          );\n        }\n        const result = await Promise.resolve(\n          found.handler(tool.input, {\n            agent: this,\n            network,\n            step: await getStepTools()\n          })\n        ).then((r) => {\n          return {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            data: typeof r === \"undefined\" ? `${tool.name} successfully executed` : r\n          };\n        }).catch((err) => {\n          return { error: (0,inngest_helpers_errors__WEBPACK_IMPORTED_MODULE_14__.serializeError)(err) };\n        });\n        output.push({\n          role: \"tool_result\",\n          type: \"tool_result\",\n          tool: {\n            type: \"tool\",\n            id: tool.id,\n            name: tool.name,\n            input: tool.input.arguments\n          },\n          content: result,\n          stop_reason: \"tool\"\n        });\n      }\n    }\n    return output;\n  }\n  async agentPrompt(input, network) {\n    const messages = [\n      {\n        type: \"text\",\n        role: \"system\",\n        content: typeof this.system === \"string\" ? this.system : await this.system({ network })\n      }\n    ];\n    if (input.length > 0) {\n      messages.push({ type: \"text\", role: \"user\", content: input });\n    }\n    if (this.assistant.length > 0) {\n      messages.push({\n        type: \"text\",\n        role: \"assistant\",\n        content: this.assistant\n      });\n    }\n    return messages;\n  }\n  // initMCP fetches all tools from the agent's MCP servers, adding them to the tool list.\n  // This is all that's necessary in order to enable MCP tool use within agents\n  async initMCP() {\n    if (!this.mcpServers || this._mcpClients.length >= this.mcpServers.length) {\n      return;\n    }\n    const promises = [];\n    for (const server of this.mcpServers) {\n      promises.push(this.listMCPTools(server));\n    }\n    await Promise.all(promises);\n  }\n  /**\n   * listMCPTools lists all available tools for a given MCP server\n   */\n  async listMCPTools(server) {\n    const client = await this.mcpClient(server);\n    this._mcpClients.push(client);\n    try {\n      const results = await client.request(\n        { method: \"tools/list\" },\n        _modelcontextprotocol_sdk_types_js__WEBPACK_IMPORTED_MODULE_13__.ListToolsResultSchema\n      );\n      results.tools.forEach((t) => {\n        const name = `${server.name}-${t.name}`;\n        let zschema;\n        try {\n          zschema = _dmitryrechkin_json_schema_to_zod__WEBPACK_IMPORTED_MODULE_6__.JSONSchemaToZod.convert(t.inputSchema);\n        } catch (e) {\n          zschema = void 0;\n        }\n        this.tools.set(name, {\n          name,\n          description: t.description,\n          parameters: zschema,\n          mcp: {\n            server,\n            tool: t\n          },\n          handler: async (input) => {\n            var _a;\n            const fn = () => client.callTool({\n              name: t.name,\n              arguments: input\n            });\n            const step = await getStepTools();\n            const result = await ((_a = step == null ? void 0 : step.run(name, fn)) != null ? _a : fn());\n            return result.content;\n          }\n        });\n      });\n    } catch (e) {\n      console.warn(\"error listing mcp tools\", e);\n    }\n  }\n  /**\n   * mcpClient creates a new MCP client for the given server.\n   */\n  async mcpClient(server) {\n    const transport = (() => {\n      switch (server.transport.type) {\n        case \"streamable-http\":\n          return new _modelcontextprotocol_sdk_client_streamableHttp_js__WEBPACK_IMPORTED_MODULE_8__.StreamableHTTPClientTransport(\n            new URL(server.transport.url),\n            {\n              requestInit: server.transport.requestInit,\n              authProvider: server.transport.authProvider,\n              reconnectionOptions: server.transport.reconnectionOptions,\n              sessionId: server.transport.sessionId\n            }\n          );\n        case \"sse\":\n          if (global.EventSource === void 0) {\n            global.EventSource = eventsource__WEBPACK_IMPORTED_MODULE_17__.EventSource;\n          }\n          return new _modelcontextprotocol_sdk_client_sse_js__WEBPACK_IMPORTED_MODULE_9__.SSEClientTransport(new URL(server.transport.url), {\n            eventSourceInit: server.transport.eventSourceInit,\n            requestInit: server.transport.requestInit\n          });\n        case \"ws\":\n          return new _modelcontextprotocol_sdk_client_websocket_js__WEBPACK_IMPORTED_MODULE_10__.WebSocketClientTransport(new URL(server.transport.url));\n        case \"stdio\": {\n          const { command, args, env } = server.transport;\n          const safeProcessEnv = Object.fromEntries(\n            Object.entries(process.env).filter(([, v]) => v !== void 0)\n          );\n          const finalEnv = __spreadValues(__spreadValues({}, safeProcessEnv), env);\n          return new _modelcontextprotocol_sdk_client_stdio_js__WEBPACK_IMPORTED_MODULE_11__.StdioClientTransport({\n            command,\n            args,\n            env: finalEnv\n          });\n        }\n      }\n    })();\n    const client = new _modelcontextprotocol_sdk_client_index_js__WEBPACK_IMPORTED_MODULE_7__.Client(\n      {\n        name: this.name,\n        // XXX: This version should change.\n        version: \"1.0.0\"\n      },\n      {\n        capabilities: {}\n      }\n    );\n    try {\n      await client.connect(transport);\n    } catch (e) {\n      console.warn(\"mcp server disconnected\", server, e);\n    }\n    return client;\n  }\n};\nvar RoutingAgent = class _RoutingAgent extends Agent {\n  constructor(opts) {\n    super(opts);\n    this.type = \"routing\";\n    this.lifecycles = opts.lifecycle;\n  }\n  withModel(model) {\n    return new _RoutingAgent({\n      name: this.name,\n      description: this.description,\n      system: this.system,\n      assistant: this.assistant,\n      tools: Array.from(this.tools.values()),\n      lifecycle: this.lifecycles,\n      model\n    });\n  }\n};\n\n// src/network.ts\nvar createNetwork = (opts) => new Network(opts);\nvar Network = class {\n  constructor({\n    name,\n    description,\n    agents,\n    defaultModel,\n    maxIter,\n    defaultState,\n    router,\n    defaultRouter,\n    history\n  }) {\n    this._counter = 0;\n    this.name = name;\n    this.description = description;\n    this.agents = /* @__PURE__ */ new Map();\n    this._agents = /* @__PURE__ */ new Map();\n    this.defaultModel = defaultModel;\n    this.router = defaultRouter != null ? defaultRouter : router;\n    this.maxIter = maxIter || 0;\n    this._stack = [];\n    this.history = history;\n    if (defaultState) {\n      this.state = defaultState;\n    } else {\n      this.state = createState();\n    }\n    for (const agent of agents) {\n      this.agents.set(agent.name, agent);\n      this._agents.set(agent.name, agent);\n    }\n  }\n  async availableAgents(networkRun = new NetworkRun(this, new State())) {\n    var _a;\n    const available = [];\n    const all = Array.from(this.agents.values());\n    for (const a of all) {\n      const enabled = (_a = a == null ? void 0 : a.lifecycles) == null ? void 0 : _a.enabled;\n      if (!enabled || await enabled({ agent: a, network: networkRun })) {\n        available.push(a);\n      }\n    }\n    return available;\n  }\n  /**\n   * addAgent adds a new agent to the network.\n   */\n  addAgent(agent) {\n    this.agents.set(agent.name, agent);\n  }\n  /**\n   * run handles a given request using the network of agents.  It is not\n   * concurrency-safe; you can only call run on a network once, as networks are\n   * stateful.\n   *\n   */\n  run(...[input, overrides]) {\n    var _a;\n    let state;\n    if (overrides == null ? void 0 : overrides.state) {\n      if (overrides.state instanceof State) {\n        state = overrides.state;\n      } else {\n        const stateObj = overrides.state;\n        state = new State({\n          data: stateObj.data || {},\n          messages: stateObj._messages || [],\n          results: stateObj._results || []\n        });\n      }\n    } else {\n      state = ((_a = this.state) == null ? void 0 : _a.clone()) || new State();\n    }\n    return new NetworkRun(this, state)[\"execute\"](input, overrides);\n  }\n};\nvar defaultRoutingAgent;\nvar getDefaultRoutingAgent = () => {\n  defaultRoutingAgent != null ? defaultRoutingAgent : defaultRoutingAgent = createRoutingAgent({\n    name: \"Default routing agent\",\n    description: \"Selects which agents to work on based off of the current prompt and input.\",\n    lifecycle: {\n      onRoute: ({ result }) => {\n        const tool = result.toolCalls[0];\n        if (!tool) {\n          return;\n        }\n        if (typeof tool.content === \"object\" && tool.content !== null && \"data\" in tool.content && typeof tool.content.data === \"string\") {\n          return [tool.content.data];\n        }\n        return;\n      }\n    },\n    tools: [\n      // This tool does nothing but ensure that the model responds with the\n      // agent name as valid JSON.\n      createTool({\n        name: \"select_agent\",\n        description: \"select an agent to handle the input, based off of the current conversation\",\n        parameters: zod__WEBPACK_IMPORTED_MODULE_4__.object({\n          name: zod__WEBPACK_IMPORTED_MODULE_4__.string().describe(\"The name of the agent that should handle the request\")\n        }).strict(),\n        handler: ({ name }, { network }) => {\n          if (typeof name !== \"string\") {\n            throw new Error(\"The routing agent requested an invalid agent\");\n          }\n          const agent = network.agents.get(name);\n          if (agent === void 0) {\n            throw new Error(\n              `The routing agent requested an agent that doesn't exist: ${name}`\n            );\n          }\n          return agent.name;\n        }\n      })\n    ],\n    tool_choice: \"select_agent\",\n    system: async ({ network }) => {\n      if (!network) {\n        throw new Error(\n          \"The routing agent can only be used within a network of agents\"\n        );\n      }\n      const agents = await (network == null ? void 0 : network.availableAgents());\n      return `You are the orchestrator between a group of agents.  Each agent is suited for a set of specific tasks, and has a name, instructions, and a set of tools.\n\nThe following agents are available:\n<agents>\n  ${agents.map((a) => {\n        return `\n    <agent>\n      <name>${a.name}</name>\n      <description>${a.description}</description>\n      <tools>${JSON.stringify(Array.from(a.tools.values()))}</tools>\n    </agent>`;\n      }).join(\"\\n\")}\n</agents>\n\nFollow the set of instructions:\n\n<instructions>\n  Think about the current history and status.  Determine which agent to use to handle the user's request, based off of the current agents and their tools.\n\n  Your aim is to thoroughly complete the request, thinking step by step, choosing the right agent based off of the context.\n</instructions>\n    `;\n    }\n  });\n  return defaultRoutingAgent;\n};\nvar NetworkRun = class extends Network {\n  constructor(network, state) {\n    super({\n      name: network.name,\n      description: network.description,\n      agents: Array.from(network.agents.values()),\n      defaultModel: network.defaultModel,\n      defaultState: network.state,\n      router: network.router,\n      maxIter: network.maxIter,\n      history: network.history\n    });\n    this.state = state;\n  }\n  run() {\n    throw new Error(\"NetworkRun does not support run\");\n  }\n  async availableAgents() {\n    return super.availableAgents(this);\n  }\n  /**\n   * Schedule is used to push an agent's run function onto the stack.\n   */\n  schedule(agentName) {\n    this[\"_stack\"].push(agentName);\n  }\n  async execute(...[input, overrides]) {\n    await initializeThread({\n      state: this.state,\n      history: this.history,\n      input,\n      network: this\n    });\n    await loadThreadFromStorage({\n      state: this.state,\n      history: this.history,\n      input,\n      network: this\n    });\n    const available = await this.availableAgents();\n    if (available.length === 0) {\n      throw new Error(\"no agents enabled in network\");\n    }\n    const initialResultCount = this.state.results.length;\n    const next = await this.getNextAgents(\n      input,\n      (overrides == null ? void 0 : overrides.router) || (overrides == null ? void 0 : overrides.defaultRouter) || this.router\n    );\n    if (!(next == null ? void 0 : next.length)) {\n      return this;\n    }\n    for (const agent of next) {\n      this.schedule(agent.name);\n    }\n    while (this._stack.length > 0 && (this.maxIter === 0 || this._counter < this.maxIter)) {\n      const agentName = this._stack.shift();\n      const agent = agentName && this._agents.get(agentName);\n      if (!agent) {\n        return this;\n      }\n      const call = await agent.run(input, { network: this, maxIter: 0 });\n      this._counter += 1;\n      this.state.appendResult(call);\n      const next2 = await this.getNextAgents(\n        input,\n        (overrides == null ? void 0 : overrides.router) || (overrides == null ? void 0 : overrides.defaultRouter) || this.router\n      );\n      for (const a of next2 || []) {\n        this.schedule(a.name);\n      }\n    }\n    await saveThreadToStorage({\n      state: this.state,\n      history: this.history,\n      input,\n      initialResultCount,\n      network: this\n    });\n    return this;\n  }\n  async getNextAgents(input, router) {\n    if (!router && !this.defaultModel) {\n      throw new Error(\n        \"No router or model defined in network.  You must pass a router or a default model to use the built-in agentic router.\"\n      );\n    }\n    if (!router) {\n      router = getDefaultRoutingAgent();\n    }\n    if (router instanceof RoutingAgent) {\n      return await this.getNextAgentsViaRoutingAgent(router, input);\n    }\n    const stack = this._stack.map((name) => {\n      const agent2 = this._agents.get(name);\n      if (!agent2) {\n        throw new Error(`unknown agent in the network stack: ${name}`);\n      }\n      return agent2;\n    });\n    const agent = await router({\n      input,\n      network: this,\n      stack,\n      lastResult: this.state.results.pop(),\n      callCount: this._counter\n    });\n    if (!agent) {\n      return;\n    }\n    if (agent instanceof RoutingAgent) {\n      return await this.getNextAgentsViaRoutingAgent(agent, input);\n    }\n    for (const a of Array.isArray(agent) ? agent : [agent]) {\n      if (!this._agents.has(a.name)) {\n        this._agents.set(a.name, a);\n      }\n    }\n    return Array.isArray(agent) ? agent : [agent];\n  }\n  async getNextAgentsViaRoutingAgent(routingAgent, input) {\n    const result = await routingAgent.run(input, {\n      network: this,\n      model: routingAgent.model || this.defaultModel\n    });\n    const agentNames = routingAgent.lifecycles.onRoute({\n      result,\n      agent: routingAgent,\n      network: this\n    });\n    return (agentNames || []).map((name) => this.agents.get(name)).filter(Boolean);\n  }\n};\n\n// src/history.ts\n\nasync function initializeThread(config) {\n  const { state, history, input, network } = config;\n  if (!history) return;\n  const step = await getStepTools();\n  if (!state.threadId && history.createThread) {\n    const { threadId } = await history.createThread({\n      state,\n      network,\n      input,\n      step\n    });\n    state.threadId = threadId;\n  } else if (!state.threadId && history.get) {\n    state.threadId = crypto.randomUUID();\n    if (history.createThread) {\n      await history.createThread({\n        state,\n        network,\n        input,\n        step\n      });\n    }\n  }\n}\nasync function loadThreadFromStorage(config) {\n  const { state, history, input, network } = config;\n  if (!(history == null ? void 0 : history.get) || !state.threadId || state.results.length > 0 || state.messages.length > 0) {\n    return;\n  }\n  const step = await getStepTools();\n  const historyResults = await history.get({\n    state,\n    network,\n    input,\n    step,\n    threadId: state.threadId\n  });\n  state.setResults(historyResults);\n}\nasync function saveThreadToStorage(config) {\n  const { state, history, input, initialResultCount, network } = config;\n  if (!(history == null ? void 0 : history.appendResults)) return;\n  const step = await getStepTools();\n  const newResults = state.getResultsFrom(initialResultCount);\n  const userMessage = input.trim() ? {\n    content: input,\n    role: \"user\",\n    timestamp: /* @__PURE__ */ new Date()\n  } : void 0;\n  await history.appendResults({\n    state,\n    network,\n    step,\n    newResults,\n    input,\n    threadId: state.threadId,\n    userMessage\n  });\n}\n\n\n//# sourceMappingURL=chunk-J76M4KLW.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@inngest/agent-kit/dist/chunk-J76M4KLW.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@inngest/agent-kit/dist/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@inngest/agent-kit/dist/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Agent: () => (/* reexport safe */ _chunk_J76M4KLW_js__WEBPACK_IMPORTED_MODULE_0__.Agent),\n/* harmony export */   AgentResult: () => (/* reexport safe */ _chunk_J76M4KLW_js__WEBPACK_IMPORTED_MODULE_0__.AgentResult),\n/* harmony export */   AgenticModel: () => (/* reexport safe */ _chunk_J76M4KLW_js__WEBPACK_IMPORTED_MODULE_0__.AgenticModel),\n/* harmony export */   Network: () => (/* reexport safe */ _chunk_J76M4KLW_js__WEBPACK_IMPORTED_MODULE_0__.Network),\n/* harmony export */   NetworkRun: () => (/* reexport safe */ _chunk_J76M4KLW_js__WEBPACK_IMPORTED_MODULE_0__.NetworkRun),\n/* harmony export */   RoutingAgent: () => (/* reexport safe */ _chunk_J76M4KLW_js__WEBPACK_IMPORTED_MODULE_0__.RoutingAgent),\n/* harmony export */   State: () => (/* reexport safe */ _chunk_J76M4KLW_js__WEBPACK_IMPORTED_MODULE_0__.State),\n/* harmony export */   anthropic: () => (/* reexport safe */ _inngest_ai__WEBPACK_IMPORTED_MODULE_1__.anthropic),\n/* harmony export */   createAgent: () => (/* reexport safe */ _chunk_J76M4KLW_js__WEBPACK_IMPORTED_MODULE_0__.createAgent),\n/* harmony export */   createAgenticModelFromAiAdapter: () => (/* reexport safe */ _chunk_J76M4KLW_js__WEBPACK_IMPORTED_MODULE_0__.createAgenticModelFromAiAdapter),\n/* harmony export */   createNetwork: () => (/* reexport safe */ _chunk_J76M4KLW_js__WEBPACK_IMPORTED_MODULE_0__.createNetwork),\n/* harmony export */   createRoutingAgent: () => (/* reexport safe */ _chunk_J76M4KLW_js__WEBPACK_IMPORTED_MODULE_0__.createRoutingAgent),\n/* harmony export */   createState: () => (/* reexport safe */ _chunk_J76M4KLW_js__WEBPACK_IMPORTED_MODULE_0__.createState),\n/* harmony export */   createTool: () => (/* reexport safe */ _chunk_J76M4KLW_js__WEBPACK_IMPORTED_MODULE_0__.createTool),\n/* harmony export */   gemini: () => (/* reexport safe */ _inngest_ai__WEBPACK_IMPORTED_MODULE_1__.gemini),\n/* harmony export */   getDefaultRoutingAgent: () => (/* reexport safe */ _chunk_J76M4KLW_js__WEBPACK_IMPORTED_MODULE_0__.getDefaultRoutingAgent),\n/* harmony export */   getInngestFnInput: () => (/* reexport safe */ _chunk_J76M4KLW_js__WEBPACK_IMPORTED_MODULE_0__.getInngestFnInput),\n/* harmony export */   getStepTools: () => (/* reexport safe */ _chunk_J76M4KLW_js__WEBPACK_IMPORTED_MODULE_0__.getStepTools),\n/* harmony export */   grok: () => (/* reexport safe */ _inngest_ai__WEBPACK_IMPORTED_MODULE_1__.grok),\n/* harmony export */   initializeThread: () => (/* reexport safe */ _chunk_J76M4KLW_js__WEBPACK_IMPORTED_MODULE_0__.initializeThread),\n/* harmony export */   isInngestFn: () => (/* reexport safe */ _chunk_J76M4KLW_js__WEBPACK_IMPORTED_MODULE_0__.isInngestFn),\n/* harmony export */   loadThreadFromStorage: () => (/* reexport safe */ _chunk_J76M4KLW_js__WEBPACK_IMPORTED_MODULE_0__.loadThreadFromStorage),\n/* harmony export */   openai: () => (/* reexport safe */ _inngest_ai__WEBPACK_IMPORTED_MODULE_1__.openai),\n/* harmony export */   saveThreadToStorage: () => (/* reexport safe */ _chunk_J76M4KLW_js__WEBPACK_IMPORTED_MODULE_0__.saveThreadToStorage),\n/* harmony export */   stringifyError: () => (/* reexport safe */ _chunk_J76M4KLW_js__WEBPACK_IMPORTED_MODULE_0__.stringifyError)\n/* harmony export */ });\n/* harmony import */ var _chunk_J76M4KLW_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-J76M4KLW.js */ \"(rsc)/./node_modules/@inngest/agent-kit/dist/chunk-J76M4KLW.js\");\n/* harmony import */ var _inngest_ai__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @inngest/ai */ \"(rsc)/./node_modules/@inngest/ai/dist/index.js\");\n\n\n// src/models.ts\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGlubmdlc3QvYWdlbnQta2l0L2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBc0I2Qjs7QUFFN0I7QUFDOEQ7QUEyQjVEO0FBQ0YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9oYXJzaHNocml2YXN0YXYvRGVza3RvcC9Db2RpbmcgUHJvamVjdHMvSm9iLUFzc2lzdGFudC1BZ2VudC9ub2RlX21vZHVsZXMvQGlubmdlc3QvYWdlbnQta2l0L2Rpc3QvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQWdlbnQsXG4gIEFnZW50UmVzdWx0LFxuICBBZ2VudGljTW9kZWwsXG4gIE5ldHdvcmssXG4gIE5ldHdvcmtSdW4sXG4gIFJvdXRpbmdBZ2VudCxcbiAgU3RhdGUsXG4gIGNyZWF0ZUFnZW50LFxuICBjcmVhdGVBZ2VudGljTW9kZWxGcm9tQWlBZGFwdGVyLFxuICBjcmVhdGVOZXR3b3JrLFxuICBjcmVhdGVSb3V0aW5nQWdlbnQsXG4gIGNyZWF0ZVN0YXRlLFxuICBjcmVhdGVUb29sLFxuICBnZXREZWZhdWx0Um91dGluZ0FnZW50LFxuICBnZXRJbm5nZXN0Rm5JbnB1dCxcbiAgZ2V0U3RlcFRvb2xzLFxuICBpbml0aWFsaXplVGhyZWFkLFxuICBpc0lubmdlc3RGbixcbiAgbG9hZFRocmVhZEZyb21TdG9yYWdlLFxuICBzYXZlVGhyZWFkVG9TdG9yYWdlLFxuICBzdHJpbmdpZnlFcnJvclxufSBmcm9tIFwiLi9jaHVuay1KNzZNNEtMVy5qc1wiO1xuXG4vLyBzcmMvbW9kZWxzLnRzXG5pbXBvcnQgeyBhbnRocm9waWMsIGdlbWluaSwgb3BlbmFpLCBncm9rIH0gZnJvbSBcIkBpbm5nZXN0L2FpXCI7XG5leHBvcnQge1xuICBBZ2VudCxcbiAgQWdlbnRSZXN1bHQsXG4gIEFnZW50aWNNb2RlbCxcbiAgTmV0d29yayxcbiAgTmV0d29ya1J1bixcbiAgUm91dGluZ0FnZW50LFxuICBTdGF0ZSxcbiAgYW50aHJvcGljLFxuICBjcmVhdGVBZ2VudCxcbiAgY3JlYXRlQWdlbnRpY01vZGVsRnJvbUFpQWRhcHRlcixcbiAgY3JlYXRlTmV0d29yayxcbiAgY3JlYXRlUm91dGluZ0FnZW50LFxuICBjcmVhdGVTdGF0ZSxcbiAgY3JlYXRlVG9vbCxcbiAgZ2VtaW5pLFxuICBnZXREZWZhdWx0Um91dGluZ0FnZW50LFxuICBnZXRJbm5nZXN0Rm5JbnB1dCxcbiAgZ2V0U3RlcFRvb2xzLFxuICBncm9rLFxuICBpbml0aWFsaXplVGhyZWFkLFxuICBpc0lubmdlc3RGbixcbiAgbG9hZFRocmVhZEZyb21TdG9yYWdlLFxuICBvcGVuYWksXG4gIHNhdmVUaHJlYWRUb1N0b3JhZ2UsXG4gIHN0cmluZ2lmeUVycm9yXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@inngest/agent-kit/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@inngest/ai/dist/adapters/anthropic.js":
/*!*************************************************************!*\
  !*** ./node_modules/@inngest/ai/dist/adapters/anthropic.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=anthropic.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGlubmdlc3QvYWkvZGlzdC9hZGFwdGVycy9hbnRocm9waWMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QiLCJzb3VyY2VzIjpbIi9Vc2Vycy9oYXJzaHNocml2YXN0YXYvRGVza3RvcC9Db2RpbmcgUHJvamVjdHMvSm9iLUFzc2lzdGFudC1BZ2VudC9ub2RlX21vZHVsZXMvQGlubmdlc3QvYWkvZGlzdC9hZGFwdGVycy9hbnRocm9waWMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hbnRocm9waWMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@inngest/ai/dist/adapters/anthropic.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@inngest/ai/dist/adapters/gemini.js":
/*!**********************************************************!*\
  !*** ./node_modules/@inngest/ai/dist/adapters/gemini.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GeminiAiAdapter = void 0;\nvar GeminiAiAdapter;\n(function (GeminiAiAdapter) {\n    let HarmCategory;\n    (function (HarmCategory) {\n        HarmCategory[\"HARM_CATEGORY_UNSPECIFIED\"] = \"HARM_CATEGORY_UNSPECIFIED\";\n        HarmCategory[\"HARM_CATEGORY_HATE_SPEECH\"] = \"HARM_CATEGORY_HATE_SPEECH\";\n        HarmCategory[\"HARM_CATEGORY_SEXUALLY_EXPLICIT\"] = \"HARM_CATEGORY_SEXUALLY_EXPLICIT\";\n        HarmCategory[\"HARM_CATEGORY_DANGEROUS_CONTENT\"] = \"HARM_CATEGORY_DANGEROUS_CONTENT\";\n        HarmCategory[\"HARM_CATEGORY_HARASSMENT\"] = \"HARM_CATEGORY_HARASSMENT\";\n        HarmCategory[\"HARM_CATEGORY_CIVIC_INTEGRITY\"] = \"HARM_CATEGORY_CIVIC_INTEGRITY\";\n    })(HarmCategory = GeminiAiAdapter.HarmCategory || (GeminiAiAdapter.HarmCategory = {}));\n    let HarmBlockThreshold;\n    (function (HarmBlockThreshold) {\n        HarmBlockThreshold[\"HARM_BLOCK_THRESHOLD_UNSPECIFIED\"] = \"HARM_BLOCK_THRESHOLD_UNSPECIFIED\";\n        HarmBlockThreshold[\"BLOCK_LOW_AND_ABOVE\"] = \"BLOCK_LOW_AND_ABOVE\";\n        HarmBlockThreshold[\"BLOCK_MEDIUM_AND_ABOVE\"] = \"BLOCK_MEDIUM_AND_ABOVE\";\n        HarmBlockThreshold[\"BLOCK_ONLY_HIGH\"] = \"BLOCK_ONLY_HIGH\";\n        HarmBlockThreshold[\"BLOCK_NONE\"] = \"BLOCK_NONE\";\n        HarmBlockThreshold[\"OFF\"] = \"OFF\";\n    })(HarmBlockThreshold = GeminiAiAdapter.HarmBlockThreshold || (GeminiAiAdapter.HarmBlockThreshold = {}));\n})(GeminiAiAdapter || (exports.GeminiAiAdapter = GeminiAiAdapter = {}));\n//# sourceMappingURL=gemini.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGlubmdlc3QvYWkvZGlzdC9hZGFwdGVycy9nZW1pbmkuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSyxtRkFBbUY7QUFDeEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUsscUdBQXFHO0FBQzFHLENBQUMsc0JBQXNCLHVCQUF1Qix1QkFBdUI7QUFDckUiLCJzb3VyY2VzIjpbIi9Vc2Vycy9oYXJzaHNocml2YXN0YXYvRGVza3RvcC9Db2RpbmcgUHJvamVjdHMvSm9iLUFzc2lzdGFudC1BZ2VudC9ub2RlX21vZHVsZXMvQGlubmdlc3QvYWkvZGlzdC9hZGFwdGVycy9nZW1pbmkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkdlbWluaUFpQWRhcHRlciA9IHZvaWQgMDtcbnZhciBHZW1pbmlBaUFkYXB0ZXI7XG4oZnVuY3Rpb24gKEdlbWluaUFpQWRhcHRlcikge1xuICAgIGxldCBIYXJtQ2F0ZWdvcnk7XG4gICAgKGZ1bmN0aW9uIChIYXJtQ2F0ZWdvcnkpIHtcbiAgICAgICAgSGFybUNhdGVnb3J5W1wiSEFSTV9DQVRFR09SWV9VTlNQRUNJRklFRFwiXSA9IFwiSEFSTV9DQVRFR09SWV9VTlNQRUNJRklFRFwiO1xuICAgICAgICBIYXJtQ2F0ZWdvcnlbXCJIQVJNX0NBVEVHT1JZX0hBVEVfU1BFRUNIXCJdID0gXCJIQVJNX0NBVEVHT1JZX0hBVEVfU1BFRUNIXCI7XG4gICAgICAgIEhhcm1DYXRlZ29yeVtcIkhBUk1fQ0FURUdPUllfU0VYVUFMTFlfRVhQTElDSVRcIl0gPSBcIkhBUk1fQ0FURUdPUllfU0VYVUFMTFlfRVhQTElDSVRcIjtcbiAgICAgICAgSGFybUNhdGVnb3J5W1wiSEFSTV9DQVRFR09SWV9EQU5HRVJPVVNfQ09OVEVOVFwiXSA9IFwiSEFSTV9DQVRFR09SWV9EQU5HRVJPVVNfQ09OVEVOVFwiO1xuICAgICAgICBIYXJtQ2F0ZWdvcnlbXCJIQVJNX0NBVEVHT1JZX0hBUkFTU01FTlRcIl0gPSBcIkhBUk1fQ0FURUdPUllfSEFSQVNTTUVOVFwiO1xuICAgICAgICBIYXJtQ2F0ZWdvcnlbXCJIQVJNX0NBVEVHT1JZX0NJVklDX0lOVEVHUklUWVwiXSA9IFwiSEFSTV9DQVRFR09SWV9DSVZJQ19JTlRFR1JJVFlcIjtcbiAgICB9KShIYXJtQ2F0ZWdvcnkgPSBHZW1pbmlBaUFkYXB0ZXIuSGFybUNhdGVnb3J5IHx8IChHZW1pbmlBaUFkYXB0ZXIuSGFybUNhdGVnb3J5ID0ge30pKTtcbiAgICBsZXQgSGFybUJsb2NrVGhyZXNob2xkO1xuICAgIChmdW5jdGlvbiAoSGFybUJsb2NrVGhyZXNob2xkKSB7XG4gICAgICAgIEhhcm1CbG9ja1RocmVzaG9sZFtcIkhBUk1fQkxPQ0tfVEhSRVNIT0xEX1VOU1BFQ0lGSUVEXCJdID0gXCJIQVJNX0JMT0NLX1RIUkVTSE9MRF9VTlNQRUNJRklFRFwiO1xuICAgICAgICBIYXJtQmxvY2tUaHJlc2hvbGRbXCJCTE9DS19MT1dfQU5EX0FCT1ZFXCJdID0gXCJCTE9DS19MT1dfQU5EX0FCT1ZFXCI7XG4gICAgICAgIEhhcm1CbG9ja1RocmVzaG9sZFtcIkJMT0NLX01FRElVTV9BTkRfQUJPVkVcIl0gPSBcIkJMT0NLX01FRElVTV9BTkRfQUJPVkVcIjtcbiAgICAgICAgSGFybUJsb2NrVGhyZXNob2xkW1wiQkxPQ0tfT05MWV9ISUdIXCJdID0gXCJCTE9DS19PTkxZX0hJR0hcIjtcbiAgICAgICAgSGFybUJsb2NrVGhyZXNob2xkW1wiQkxPQ0tfTk9ORVwiXSA9IFwiQkxPQ0tfTk9ORVwiO1xuICAgICAgICBIYXJtQmxvY2tUaHJlc2hvbGRbXCJPRkZcIl0gPSBcIk9GRlwiO1xuICAgIH0pKEhhcm1CbG9ja1RocmVzaG9sZCA9IEdlbWluaUFpQWRhcHRlci5IYXJtQmxvY2tUaHJlc2hvbGQgfHwgKEdlbWluaUFpQWRhcHRlci5IYXJtQmxvY2tUaHJlc2hvbGQgPSB7fSkpO1xufSkoR2VtaW5pQWlBZGFwdGVyIHx8IChleHBvcnRzLkdlbWluaUFpQWRhcHRlciA9IEdlbWluaUFpQWRhcHRlciA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZW1pbmkuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@inngest/ai/dist/adapters/gemini.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@inngest/ai/dist/adapters/grok.js":
/*!********************************************************!*\
  !*** ./node_modules/@inngest/ai/dist/adapters/grok.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=grok.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGlubmdlc3QvYWkvZGlzdC9hZGFwdGVycy9ncm9rLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEIiwic291cmNlcyI6WyIvVXNlcnMvaGFyc2hzaHJpdmFzdGF2L0Rlc2t0b3AvQ29kaW5nIFByb2plY3RzL0pvYi1Bc3Npc3RhbnQtQWdlbnQvbm9kZV9tb2R1bGVzL0Bpbm5nZXN0L2FpL2Rpc3QvYWRhcHRlcnMvZ3Jvay5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdyb2suanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@inngest/ai/dist/adapters/grok.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@inngest/ai/dist/adapters/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@inngest/ai/dist/adapters/index.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./anthropic.js */ \"(rsc)/./node_modules/@inngest/ai/dist/adapters/anthropic.js\"), exports);\n__exportStar(__webpack_require__(/*! ./gemini.js */ \"(rsc)/./node_modules/@inngest/ai/dist/adapters/gemini.js\"), exports);\n__exportStar(__webpack_require__(/*! ./openai.js */ \"(rsc)/./node_modules/@inngest/ai/dist/adapters/openai.js\"), exports);\n__exportStar(__webpack_require__(/*! ./grok.js */ \"(rsc)/./node_modules/@inngest/ai/dist/adapters/grok.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGlubmdlc3QvYWkvZGlzdC9hZGFwdGVycy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhLG1CQUFPLENBQUMsbUZBQWdCO0FBQ3JDLGFBQWEsbUJBQU8sQ0FBQyw2RUFBYTtBQUNsQyxhQUFhLG1CQUFPLENBQUMsNkVBQWE7QUFDbEMsYUFBYSxtQkFBTyxDQUFDLHlFQUFXO0FBQ2hDIiwic291cmNlcyI6WyIvVXNlcnMvaGFyc2hzaHJpdmFzdGF2L0Rlc2t0b3AvQ29kaW5nIFByb2plY3RzL0pvYi1Bc3Npc3RhbnQtQWdlbnQvbm9kZV9tb2R1bGVzL0Bpbm5nZXN0L2FpL2Rpc3QvYWRhcHRlcnMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9hbnRocm9waWMuanNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2dlbWluaS5qc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vb3BlbmFpLmpzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9ncm9rLmpzXCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@inngest/ai/dist/adapters/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@inngest/ai/dist/adapters/openai.js":
/*!**********************************************************!*\
  !*** ./node_modules/@inngest/ai/dist/adapters/openai.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=openai.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGlubmdlc3QvYWkvZGlzdC9hZGFwdGVycy9vcGVuYWkuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QiLCJzb3VyY2VzIjpbIi9Vc2Vycy9oYXJzaHNocml2YXN0YXYvRGVza3RvcC9Db2RpbmcgUHJvamVjdHMvSm9iLUFzc2lzdGFudC1BZ2VudC9ub2RlX21vZHVsZXMvQGlubmdlc3QvYWkvZGlzdC9hZGFwdGVycy9vcGVuYWkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vcGVuYWkuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@inngest/ai/dist/adapters/openai.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@inngest/ai/dist/env.js":
/*!**********************************************!*\
  !*** ./node_modules/@inngest/ai/dist/env.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.envKeys = exports.processEnv = exports.allProcessEnv = void 0;\n/**\n * allProcessEnv returns the current process environment variables, or an empty\n * object if they cannot be read, making sure we support environments other than\n * Node such as Deno, too.\n *\n * Using this ensures we don't dangerously access `process.env` in environments\n * where it may not be defined, such as Deno or the browser.\n */\nconst allProcessEnv = () => {\n    // Node, or Node-like environments\n    try {\n        if (process.env) {\n            return process.env;\n        }\n    }\n    catch (_err) {\n        // noop\n    }\n    // Deno\n    try {\n        const env = Deno.env.toObject();\n        if (env) {\n            return env;\n        }\n    }\n    catch (_err) {\n        // noop\n    }\n    // Netlify\n    try {\n        const env = Netlify.env.toObject();\n        if (env) {\n            return env;\n        }\n    }\n    catch (_err) {\n        // noop\n    }\n    return {};\n};\nexports.allProcessEnv = allProcessEnv;\nconst processEnv = (key) => {\n    return (0, exports.allProcessEnv)()[key];\n};\nexports.processEnv = processEnv;\nvar envKeys;\n(function (envKeys) {\n    envKeys[\"OpenAiApiKey\"] = \"OPENAI_API_KEY\";\n    envKeys[\"GeminiApiKey\"] = \"GEMINI_API_KEY\";\n    envKeys[\"AnthropicApiKey\"] = \"ANTHROPIC_API_KEY\";\n    envKeys[\"DeepSeekApiKey\"] = \"DEEPSEEK_API_KEY\";\n    envKeys[\"GrokApiKey\"] = \"XAI_API_KEY\";\n})(envKeys || (exports.envKeys = envKeys = {}));\n//# sourceMappingURL=env.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGlubmdlc3QvYWkvZGlzdC9lbnYuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZUFBZSxHQUFHLGtCQUFrQixHQUFHLHFCQUFxQjtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGNBQWMsZUFBZSxlQUFlO0FBQzdDIiwic291cmNlcyI6WyIvVXNlcnMvaGFyc2hzaHJpdmFzdGF2L0Rlc2t0b3AvQ29kaW5nIFByb2plY3RzL0pvYi1Bc3Npc3RhbnQtQWdlbnQvbm9kZV9tb2R1bGVzL0Bpbm5nZXN0L2FpL2Rpc3QvZW52LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5lbnZLZXlzID0gZXhwb3J0cy5wcm9jZXNzRW52ID0gZXhwb3J0cy5hbGxQcm9jZXNzRW52ID0gdm9pZCAwO1xuLyoqXG4gKiBhbGxQcm9jZXNzRW52IHJldHVybnMgdGhlIGN1cnJlbnQgcHJvY2VzcyBlbnZpcm9ubWVudCB2YXJpYWJsZXMsIG9yIGFuIGVtcHR5XG4gKiBvYmplY3QgaWYgdGhleSBjYW5ub3QgYmUgcmVhZCwgbWFraW5nIHN1cmUgd2Ugc3VwcG9ydCBlbnZpcm9ubWVudHMgb3RoZXIgdGhhblxuICogTm9kZSBzdWNoIGFzIERlbm8sIHRvby5cbiAqXG4gKiBVc2luZyB0aGlzIGVuc3VyZXMgd2UgZG9uJ3QgZGFuZ2Vyb3VzbHkgYWNjZXNzIGBwcm9jZXNzLmVudmAgaW4gZW52aXJvbm1lbnRzXG4gKiB3aGVyZSBpdCBtYXkgbm90IGJlIGRlZmluZWQsIHN1Y2ggYXMgRGVubyBvciB0aGUgYnJvd3Nlci5cbiAqL1xuY29uc3QgYWxsUHJvY2Vzc0VudiA9ICgpID0+IHtcbiAgICAvLyBOb2RlLCBvciBOb2RlLWxpa2UgZW52aXJvbm1lbnRzXG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52KSB7XG4gICAgICAgICAgICByZXR1cm4gcHJvY2Vzcy5lbnY7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2F0Y2ggKF9lcnIpIHtcbiAgICAgICAgLy8gbm9vcFxuICAgIH1cbiAgICAvLyBEZW5vXG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZW52ID0gRGVuby5lbnYudG9PYmplY3QoKTtcbiAgICAgICAgaWYgKGVudikge1xuICAgICAgICAgICAgcmV0dXJuIGVudjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCAoX2Vycikge1xuICAgICAgICAvLyBub29wXG4gICAgfVxuICAgIC8vIE5ldGxpZnlcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBlbnYgPSBOZXRsaWZ5LmVudi50b09iamVjdCgpO1xuICAgICAgICBpZiAoZW52KSB7XG4gICAgICAgICAgICByZXR1cm4gZW52O1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChfZXJyKSB7XG4gICAgICAgIC8vIG5vb3BcbiAgICB9XG4gICAgcmV0dXJuIHt9O1xufTtcbmV4cG9ydHMuYWxsUHJvY2Vzc0VudiA9IGFsbFByb2Nlc3NFbnY7XG5jb25zdCBwcm9jZXNzRW52ID0gKGtleSkgPT4ge1xuICAgIHJldHVybiAoMCwgZXhwb3J0cy5hbGxQcm9jZXNzRW52KSgpW2tleV07XG59O1xuZXhwb3J0cy5wcm9jZXNzRW52ID0gcHJvY2Vzc0VudjtcbnZhciBlbnZLZXlzO1xuKGZ1bmN0aW9uIChlbnZLZXlzKSB7XG4gICAgZW52S2V5c1tcIk9wZW5BaUFwaUtleVwiXSA9IFwiT1BFTkFJX0FQSV9LRVlcIjtcbiAgICBlbnZLZXlzW1wiR2VtaW5pQXBpS2V5XCJdID0gXCJHRU1JTklfQVBJX0tFWVwiO1xuICAgIGVudktleXNbXCJBbnRocm9waWNBcGlLZXlcIl0gPSBcIkFOVEhST1BJQ19BUElfS0VZXCI7XG4gICAgZW52S2V5c1tcIkRlZXBTZWVrQXBpS2V5XCJdID0gXCJERUVQU0VFS19BUElfS0VZXCI7XG4gICAgZW52S2V5c1tcIkdyb2tBcGlLZXlcIl0gPSBcIlhBSV9BUElfS0VZXCI7XG59KShlbnZLZXlzIHx8IChleHBvcnRzLmVudktleXMgPSBlbnZLZXlzID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVudi5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@inngest/ai/dist/env.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@inngest/ai/dist/index.js":
/*!************************************************!*\
  !*** ./node_modules/@inngest/ai/dist/index.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./adapters/index.js */ \"(rsc)/./node_modules/@inngest/ai/dist/adapters/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./models/index.js */ \"(rsc)/./node_modules/@inngest/ai/dist/models/index.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGlubmdlc3QvYWkvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhLG1CQUFPLENBQUMsb0ZBQXFCO0FBQzFDLGFBQWEsbUJBQU8sQ0FBQyxnRkFBbUI7QUFDeEMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9oYXJzaHNocml2YXN0YXYvRGVza3RvcC9Db2RpbmcgUHJvamVjdHMvSm9iLUFzc2lzdGFudC1BZ2VudC9ub2RlX21vZHVsZXMvQGlubmdlc3QvYWkvZGlzdC9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2FkYXB0ZXJzL2luZGV4LmpzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9tb2RlbHMvaW5kZXguanNcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@inngest/ai/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@inngest/ai/dist/models/anthropic.js":
/*!***********************************************************!*\
  !*** ./node_modules/@inngest/ai/dist/models/anthropic.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.anthropic = void 0;\nconst env_1 = __webpack_require__(/*! ../env */ \"(rsc)/./node_modules/@inngest/ai/dist/env.js\");\n/**\n * Create an Anthropic model using the Anthropic chat format.\n *\n * By default it targets the `https://api.anthropic.com/v1/` base URL, with the\n * \"2023-06-01\" anthropic-version header.\n */\nconst anthropic = (options) => {\n    var _a, _b;\n    const authKey = options.apiKey || (0, env_1.processEnv)(env_1.envKeys.AnthropicApiKey) || \"\";\n    // Ensure we add a trailing slash to our base URL if it doesn't have one,\n    // otherwise we'll replace the path instead of appending it.\n    let baseUrl = options.baseUrl || \"https://api.anthropic.com/v1/\";\n    if (!baseUrl.endsWith(\"/\")) {\n        baseUrl += \"/\";\n    }\n    const url = new URL(\"messages\", baseUrl);\n    const headers = {\n        \"anthropic-version\": \"2023-06-01\",\n    };\n    if ((((_a = options.betaHeaders) === null || _a === void 0 ? void 0 : _a.length) || 0) > 0) {\n        headers[\"anthropic-beta\"] = ((_b = options.betaHeaders) === null || _b === void 0 ? void 0 : _b.join(\",\")) || \"\";\n    }\n    return {\n        url: url.href,\n        authKey,\n        format: \"anthropic\",\n        onCall(_, body) {\n            Object.assign(body, options.defaultParameters);\n            body.model || (body.model = options.model);\n        },\n        headers,\n        options,\n    };\n};\nexports.anthropic = anthropic;\n//# sourceMappingURL=anthropic.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGlubmdlc3QvYWkvZGlzdC9tb2RlbHMvYW50aHJvcGljLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGlCQUFpQjtBQUNqQixjQUFjLG1CQUFPLENBQUMsNERBQVE7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQiIsInNvdXJjZXMiOlsiL1VzZXJzL2hhcnNoc2hyaXZhc3Rhdi9EZXNrdG9wL0NvZGluZyBQcm9qZWN0cy9Kb2ItQXNzaXN0YW50LUFnZW50L25vZGVfbW9kdWxlcy9AaW5uZ2VzdC9haS9kaXN0L21vZGVscy9hbnRocm9waWMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmFudGhyb3BpYyA9IHZvaWQgMDtcbmNvbnN0IGVudl8xID0gcmVxdWlyZShcIi4uL2VudlwiKTtcbi8qKlxuICogQ3JlYXRlIGFuIEFudGhyb3BpYyBtb2RlbCB1c2luZyB0aGUgQW50aHJvcGljIGNoYXQgZm9ybWF0LlxuICpcbiAqIEJ5IGRlZmF1bHQgaXQgdGFyZ2V0cyB0aGUgYGh0dHBzOi8vYXBpLmFudGhyb3BpYy5jb20vdjEvYCBiYXNlIFVSTCwgd2l0aCB0aGVcbiAqIFwiMjAyMy0wNi0wMVwiIGFudGhyb3BpYy12ZXJzaW9uIGhlYWRlci5cbiAqL1xuY29uc3QgYW50aHJvcGljID0gKG9wdGlvbnMpID0+IHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIGNvbnN0IGF1dGhLZXkgPSBvcHRpb25zLmFwaUtleSB8fCAoMCwgZW52XzEucHJvY2Vzc0VudikoZW52XzEuZW52S2V5cy5BbnRocm9waWNBcGlLZXkpIHx8IFwiXCI7XG4gICAgLy8gRW5zdXJlIHdlIGFkZCBhIHRyYWlsaW5nIHNsYXNoIHRvIG91ciBiYXNlIFVSTCBpZiBpdCBkb2Vzbid0IGhhdmUgb25lLFxuICAgIC8vIG90aGVyd2lzZSB3ZSdsbCByZXBsYWNlIHRoZSBwYXRoIGluc3RlYWQgb2YgYXBwZW5kaW5nIGl0LlxuICAgIGxldCBiYXNlVXJsID0gb3B0aW9ucy5iYXNlVXJsIHx8IFwiaHR0cHM6Ly9hcGkuYW50aHJvcGljLmNvbS92MS9cIjtcbiAgICBpZiAoIWJhc2VVcmwuZW5kc1dpdGgoXCIvXCIpKSB7XG4gICAgICAgIGJhc2VVcmwgKz0gXCIvXCI7XG4gICAgfVxuICAgIGNvbnN0IHVybCA9IG5ldyBVUkwoXCJtZXNzYWdlc1wiLCBiYXNlVXJsKTtcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICBcImFudGhyb3BpYy12ZXJzaW9uXCI6IFwiMjAyMy0wNi0wMVwiLFxuICAgIH07XG4gICAgaWYgKCgoKF9hID0gb3B0aW9ucy5iZXRhSGVhZGVycykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmxlbmd0aCkgfHwgMCkgPiAwKSB7XG4gICAgICAgIGhlYWRlcnNbXCJhbnRocm9waWMtYmV0YVwiXSA9ICgoX2IgPSBvcHRpb25zLmJldGFIZWFkZXJzKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Iuam9pbihcIixcIikpIHx8IFwiXCI7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHVybDogdXJsLmhyZWYsXG4gICAgICAgIGF1dGhLZXksXG4gICAgICAgIGZvcm1hdDogXCJhbnRocm9waWNcIixcbiAgICAgICAgb25DYWxsKF8sIGJvZHkpIHtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYm9keSwgb3B0aW9ucy5kZWZhdWx0UGFyYW1ldGVycyk7XG4gICAgICAgICAgICBib2R5Lm1vZGVsIHx8IChib2R5Lm1vZGVsID0gb3B0aW9ucy5tb2RlbCk7XG4gICAgICAgIH0sXG4gICAgICAgIGhlYWRlcnMsXG4gICAgICAgIG9wdGlvbnMsXG4gICAgfTtcbn07XG5leHBvcnRzLmFudGhyb3BpYyA9IGFudGhyb3BpYztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFudGhyb3BpYy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@inngest/ai/dist/models/anthropic.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@inngest/ai/dist/models/deepseek.js":
/*!**********************************************************!*\
  !*** ./node_modules/@inngest/ai/dist/models/deepseek.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.deepseek = void 0;\nconst env_1 = __webpack_require__(/*! ../env */ \"(rsc)/./node_modules/@inngest/ai/dist/env.js\");\n/**\n * Create a DeepSeek model using the OpenAI-compatible chat format.\n *\n * By default it targets the `https://api.deepseek.com/v1/` base URL.\n */\nconst deepseek = (options) => {\n    const authKey = options.apiKey || (0, env_1.processEnv)(env_1.envKeys.DeepSeekApiKey) || \"\";\n    // Ensure we add a trailing slash to our base URL if it doesn't have one,\n    // otherwise we'll replace the path instead of appending it.\n    let baseUrl = options.baseUrl || \"https://api.deepseek.com/v1/\";\n    if (!baseUrl.endsWith(\"/\")) {\n        baseUrl += \"/\";\n    }\n    const url = new URL(\"chat/completions\", baseUrl);\n    return {\n        url: url.href,\n        authKey,\n        format: \"openai-chat\",\n        onCall(_, body) {\n            Object.assign(body, options.defaultParameters);\n            body.model || (body.model = options.model);\n        },\n        options,\n    };\n};\nexports.deepseek = deepseek;\n//# sourceMappingURL=deepseek.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGlubmdlc3QvYWkvZGlzdC9tb2RlbHMvZGVlcHNlZWsuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0JBQWdCO0FBQ2hCLGNBQWMsbUJBQU8sQ0FBQyw0REFBUTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCIiwic291cmNlcyI6WyIvVXNlcnMvaGFyc2hzaHJpdmFzdGF2L0Rlc2t0b3AvQ29kaW5nIFByb2plY3RzL0pvYi1Bc3Npc3RhbnQtQWdlbnQvbm9kZV9tb2R1bGVzL0Bpbm5nZXN0L2FpL2Rpc3QvbW9kZWxzL2RlZXBzZWVrLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWVwc2VlayA9IHZvaWQgMDtcbmNvbnN0IGVudl8xID0gcmVxdWlyZShcIi4uL2VudlwiKTtcbi8qKlxuICogQ3JlYXRlIGEgRGVlcFNlZWsgbW9kZWwgdXNpbmcgdGhlIE9wZW5BSS1jb21wYXRpYmxlIGNoYXQgZm9ybWF0LlxuICpcbiAqIEJ5IGRlZmF1bHQgaXQgdGFyZ2V0cyB0aGUgYGh0dHBzOi8vYXBpLmRlZXBzZWVrLmNvbS92MS9gIGJhc2UgVVJMLlxuICovXG5jb25zdCBkZWVwc2VlayA9IChvcHRpb25zKSA9PiB7XG4gICAgY29uc3QgYXV0aEtleSA9IG9wdGlvbnMuYXBpS2V5IHx8ICgwLCBlbnZfMS5wcm9jZXNzRW52KShlbnZfMS5lbnZLZXlzLkRlZXBTZWVrQXBpS2V5KSB8fCBcIlwiO1xuICAgIC8vIEVuc3VyZSB3ZSBhZGQgYSB0cmFpbGluZyBzbGFzaCB0byBvdXIgYmFzZSBVUkwgaWYgaXQgZG9lc24ndCBoYXZlIG9uZSxcbiAgICAvLyBvdGhlcndpc2Ugd2UnbGwgcmVwbGFjZSB0aGUgcGF0aCBpbnN0ZWFkIG9mIGFwcGVuZGluZyBpdC5cbiAgICBsZXQgYmFzZVVybCA9IG9wdGlvbnMuYmFzZVVybCB8fCBcImh0dHBzOi8vYXBpLmRlZXBzZWVrLmNvbS92MS9cIjtcbiAgICBpZiAoIWJhc2VVcmwuZW5kc1dpdGgoXCIvXCIpKSB7XG4gICAgICAgIGJhc2VVcmwgKz0gXCIvXCI7XG4gICAgfVxuICAgIGNvbnN0IHVybCA9IG5ldyBVUkwoXCJjaGF0L2NvbXBsZXRpb25zXCIsIGJhc2VVcmwpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHVybDogdXJsLmhyZWYsXG4gICAgICAgIGF1dGhLZXksXG4gICAgICAgIGZvcm1hdDogXCJvcGVuYWktY2hhdFwiLFxuICAgICAgICBvbkNhbGwoXywgYm9keSkge1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihib2R5LCBvcHRpb25zLmRlZmF1bHRQYXJhbWV0ZXJzKTtcbiAgICAgICAgICAgIGJvZHkubW9kZWwgfHwgKGJvZHkubW9kZWwgPSBvcHRpb25zLm1vZGVsKTtcbiAgICAgICAgfSxcbiAgICAgICAgb3B0aW9ucyxcbiAgICB9O1xufTtcbmV4cG9ydHMuZGVlcHNlZWsgPSBkZWVwc2Vlaztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlZXBzZWVrLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@inngest/ai/dist/models/deepseek.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@inngest/ai/dist/models/gemini.js":
/*!********************************************************!*\
  !*** ./node_modules/@inngest/ai/dist/models/gemini.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.gemini = void 0;\nconst env_1 = __webpack_require__(/*! ../env */ \"(rsc)/./node_modules/@inngest/ai/dist/env.js\");\n/**\n * Create a Gemini model using the OpenAI chat format.\n *\n * By default it targets the `https://generativelanguage.googleapis.com/v1beta/`\n * base URL.\n */\nconst gemini = (options) => {\n    const authKey = options.apiKey || (0, env_1.processEnv)(env_1.envKeys.GeminiApiKey) || \"\";\n    // Ensure we add a trailing slash to our base URL if it doesn't have one,\n    // otherwise we'll replace the path instead of appending it.\n    let baseUrl = options.baseUrl || \"https://generativelanguage.googleapis.com/v1beta/\";\n    if (!baseUrl.endsWith(\"/\")) {\n        baseUrl += \"/\";\n    }\n    const url = new URL(`models/${options.model}:generateContent?key=${authKey}`, baseUrl);\n    const headers = {};\n    return {\n        url: url.href,\n        authKey,\n        format: \"gemini\",\n        onCall(_, body) {\n            Object.assign(body, options.defaultParameters);\n        },\n        headers,\n        options,\n    };\n};\nexports.gemini = gemini;\n//# sourceMappingURL=gemini.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGlubmdlc3QvYWkvZGlzdC9tb2RlbHMvZ2VtaW5pLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGNBQWM7QUFDZCxjQUFjLG1CQUFPLENBQUMsNERBQVE7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxjQUFjLHVCQUF1QixRQUFRO0FBQy9FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkIiwic291cmNlcyI6WyIvVXNlcnMvaGFyc2hzaHJpdmFzdGF2L0Rlc2t0b3AvQ29kaW5nIFByb2plY3RzL0pvYi1Bc3Npc3RhbnQtQWdlbnQvbm9kZV9tb2R1bGVzL0Bpbm5nZXN0L2FpL2Rpc3QvbW9kZWxzL2dlbWluaS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2VtaW5pID0gdm9pZCAwO1xuY29uc3QgZW52XzEgPSByZXF1aXJlKFwiLi4vZW52XCIpO1xuLyoqXG4gKiBDcmVhdGUgYSBHZW1pbmkgbW9kZWwgdXNpbmcgdGhlIE9wZW5BSSBjaGF0IGZvcm1hdC5cbiAqXG4gKiBCeSBkZWZhdWx0IGl0IHRhcmdldHMgdGhlIGBodHRwczovL2dlbmVyYXRpdmVsYW5ndWFnZS5nb29nbGVhcGlzLmNvbS92MWJldGEvYFxuICogYmFzZSBVUkwuXG4gKi9cbmNvbnN0IGdlbWluaSA9IChvcHRpb25zKSA9PiB7XG4gICAgY29uc3QgYXV0aEtleSA9IG9wdGlvbnMuYXBpS2V5IHx8ICgwLCBlbnZfMS5wcm9jZXNzRW52KShlbnZfMS5lbnZLZXlzLkdlbWluaUFwaUtleSkgfHwgXCJcIjtcbiAgICAvLyBFbnN1cmUgd2UgYWRkIGEgdHJhaWxpbmcgc2xhc2ggdG8gb3VyIGJhc2UgVVJMIGlmIGl0IGRvZXNuJ3QgaGF2ZSBvbmUsXG4gICAgLy8gb3RoZXJ3aXNlIHdlJ2xsIHJlcGxhY2UgdGhlIHBhdGggaW5zdGVhZCBvZiBhcHBlbmRpbmcgaXQuXG4gICAgbGV0IGJhc2VVcmwgPSBvcHRpb25zLmJhc2VVcmwgfHwgXCJodHRwczovL2dlbmVyYXRpdmVsYW5ndWFnZS5nb29nbGVhcGlzLmNvbS92MWJldGEvXCI7XG4gICAgaWYgKCFiYXNlVXJsLmVuZHNXaXRoKFwiL1wiKSkge1xuICAgICAgICBiYXNlVXJsICs9IFwiL1wiO1xuICAgIH1cbiAgICBjb25zdCB1cmwgPSBuZXcgVVJMKGBtb2RlbHMvJHtvcHRpb25zLm1vZGVsfTpnZW5lcmF0ZUNvbnRlbnQ/a2V5PSR7YXV0aEtleX1gLCBiYXNlVXJsKTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdXJsOiB1cmwuaHJlZixcbiAgICAgICAgYXV0aEtleSxcbiAgICAgICAgZm9ybWF0OiBcImdlbWluaVwiLFxuICAgICAgICBvbkNhbGwoXywgYm9keSkge1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihib2R5LCBvcHRpb25zLmRlZmF1bHRQYXJhbWV0ZXJzKTtcbiAgICAgICAgfSxcbiAgICAgICAgaGVhZGVycyxcbiAgICAgICAgb3B0aW9ucyxcbiAgICB9O1xufTtcbmV4cG9ydHMuZ2VtaW5pID0gZ2VtaW5pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2VtaW5pLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@inngest/ai/dist/models/gemini.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@inngest/ai/dist/models/grok.js":
/*!******************************************************!*\
  !*** ./node_modules/@inngest/ai/dist/models/grok.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.grok = void 0;\nconst env_1 = __webpack_require__(/*! ../env */ \"(rsc)/./node_modules/@inngest/ai/dist/env.js\");\nconst openai_js_1 = __webpack_require__(/*! ./openai.js */ \"(rsc)/./node_modules/@inngest/ai/dist/models/openai.js\");\n/**\n * Create a Grok model using the OpenAI chat format.\n *\n * By default it targets the `https://api.x.ai/v1`\n * base URL.\n */\nconst grok = (options) => {\n    const apiKey = options.apiKey || (0, env_1.processEnv)(env_1.envKeys.GrokApiKey);\n    const baseUrl = options.baseUrl || \"https://api.x.ai/v1\";\n    const model = options.model;\n    const adapter = (0, openai_js_1.openai)(Object.assign(Object.assign({}, options), { apiKey,\n        baseUrl,\n        model }));\n    adapter.format = \"grok\";\n    return adapter;\n};\nexports.grok = grok;\n//# sourceMappingURL=grok.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGlubmdlc3QvYWkvZGlzdC9tb2RlbHMvZ3Jvay5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxZQUFZO0FBQ1osY0FBYyxtQkFBTyxDQUFDLDREQUFRO0FBQzlCLG9CQUFvQixtQkFBTyxDQUFDLDJFQUFhO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEVBQTBFLGNBQWM7QUFDeEY7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaIiwic291cmNlcyI6WyIvVXNlcnMvaGFyc2hzaHJpdmFzdGF2L0Rlc2t0b3AvQ29kaW5nIFByb2plY3RzL0pvYi1Bc3Npc3RhbnQtQWdlbnQvbm9kZV9tb2R1bGVzL0Bpbm5nZXN0L2FpL2Rpc3QvbW9kZWxzL2dyb2suanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdyb2sgPSB2b2lkIDA7XG5jb25zdCBlbnZfMSA9IHJlcXVpcmUoXCIuLi9lbnZcIik7XG5jb25zdCBvcGVuYWlfanNfMSA9IHJlcXVpcmUoXCIuL29wZW5haS5qc1wiKTtcbi8qKlxuICogQ3JlYXRlIGEgR3JvayBtb2RlbCB1c2luZyB0aGUgT3BlbkFJIGNoYXQgZm9ybWF0LlxuICpcbiAqIEJ5IGRlZmF1bHQgaXQgdGFyZ2V0cyB0aGUgYGh0dHBzOi8vYXBpLnguYWkvdjFgXG4gKiBiYXNlIFVSTC5cbiAqL1xuY29uc3QgZ3JvayA9IChvcHRpb25zKSA9PiB7XG4gICAgY29uc3QgYXBpS2V5ID0gb3B0aW9ucy5hcGlLZXkgfHwgKDAsIGVudl8xLnByb2Nlc3NFbnYpKGVudl8xLmVudktleXMuR3Jva0FwaUtleSk7XG4gICAgY29uc3QgYmFzZVVybCA9IG9wdGlvbnMuYmFzZVVybCB8fCBcImh0dHBzOi8vYXBpLnguYWkvdjFcIjtcbiAgICBjb25zdCBtb2RlbCA9IG9wdGlvbnMubW9kZWw7XG4gICAgY29uc3QgYWRhcHRlciA9ICgwLCBvcGVuYWlfanNfMS5vcGVuYWkpKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucyksIHsgYXBpS2V5LFxuICAgICAgICBiYXNlVXJsLFxuICAgICAgICBtb2RlbCB9KSk7XG4gICAgYWRhcHRlci5mb3JtYXQgPSBcImdyb2tcIjtcbiAgICByZXR1cm4gYWRhcHRlcjtcbn07XG5leHBvcnRzLmdyb2sgPSBncm9rO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z3Jvay5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@inngest/ai/dist/models/grok.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@inngest/ai/dist/models/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@inngest/ai/dist/models/index.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./anthropic.js */ \"(rsc)/./node_modules/@inngest/ai/dist/models/anthropic.js\"), exports);\n__exportStar(__webpack_require__(/*! ./gemini.js */ \"(rsc)/./node_modules/@inngest/ai/dist/models/gemini.js\"), exports);\n__exportStar(__webpack_require__(/*! ./openai.js */ \"(rsc)/./node_modules/@inngest/ai/dist/models/openai.js\"), exports);\n__exportStar(__webpack_require__(/*! ./deepseek.js */ \"(rsc)/./node_modules/@inngest/ai/dist/models/deepseek.js\"), exports);\n__exportStar(__webpack_require__(/*! ./grok.js */ \"(rsc)/./node_modules/@inngest/ai/dist/models/grok.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGlubmdlc3QvYWkvZGlzdC9tb2RlbHMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLGlGQUFnQjtBQUNyQyxhQUFhLG1CQUFPLENBQUMsMkVBQWE7QUFDbEMsYUFBYSxtQkFBTyxDQUFDLDJFQUFhO0FBQ2xDLGFBQWEsbUJBQU8sQ0FBQywrRUFBZTtBQUNwQyxhQUFhLG1CQUFPLENBQUMsdUVBQVc7QUFDaEMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9oYXJzaHNocml2YXN0YXYvRGVza3RvcC9Db2RpbmcgUHJvamVjdHMvSm9iLUFzc2lzdGFudC1BZ2VudC9ub2RlX21vZHVsZXMvQGlubmdlc3QvYWkvZGlzdC9tb2RlbHMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9hbnRocm9waWMuanNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2dlbWluaS5qc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vb3BlbmFpLmpzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9kZWVwc2Vlay5qc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZ3Jvay5qc1wiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@inngest/ai/dist/models/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@inngest/ai/dist/models/openai.js":
/*!********************************************************!*\
  !*** ./node_modules/@inngest/ai/dist/models/openai.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.openai = void 0;\nconst env_1 = __webpack_require__(/*! ../env */ \"(rsc)/./node_modules/@inngest/ai/dist/env.js\");\n/**\n * Create an OpenAI model using the OpenAI chat format.\n *\n * By default it targets the `https://api.openai.com/v1/` base URL.\n */\nconst openai = (options) => {\n    const authKey = options.apiKey || (0, env_1.processEnv)(env_1.envKeys.OpenAiApiKey) || \"\";\n    // Ensure we add a trailing slash to our base URL if it doesn't have one,\n    // otherwise we'll replace the path instead of appending it.\n    let baseUrl = options.baseUrl || \"https://api.openai.com/v1/\";\n    if (!baseUrl.endsWith(\"/\")) {\n        baseUrl += \"/\";\n    }\n    const url = new URL(\"chat/completions\", baseUrl);\n    return {\n        url: url.href,\n        authKey,\n        format: \"openai-chat\",\n        onCall(_, body) {\n            Object.assign(body, options.defaultParameters);\n            body.model || (body.model = options.model);\n        },\n        options,\n    };\n};\nexports.openai = openai;\n//# sourceMappingURL=openai.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGlubmdlc3QvYWkvZGlzdC9tb2RlbHMvb3BlbmFpLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGNBQWM7QUFDZCxjQUFjLG1CQUFPLENBQUMsNERBQVE7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZCIsInNvdXJjZXMiOlsiL1VzZXJzL2hhcnNoc2hyaXZhc3Rhdi9EZXNrdG9wL0NvZGluZyBQcm9qZWN0cy9Kb2ItQXNzaXN0YW50LUFnZW50L25vZGVfbW9kdWxlcy9AaW5uZ2VzdC9haS9kaXN0L21vZGVscy9vcGVuYWkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm9wZW5haSA9IHZvaWQgMDtcbmNvbnN0IGVudl8xID0gcmVxdWlyZShcIi4uL2VudlwiKTtcbi8qKlxuICogQ3JlYXRlIGFuIE9wZW5BSSBtb2RlbCB1c2luZyB0aGUgT3BlbkFJIGNoYXQgZm9ybWF0LlxuICpcbiAqIEJ5IGRlZmF1bHQgaXQgdGFyZ2V0cyB0aGUgYGh0dHBzOi8vYXBpLm9wZW5haS5jb20vdjEvYCBiYXNlIFVSTC5cbiAqL1xuY29uc3Qgb3BlbmFpID0gKG9wdGlvbnMpID0+IHtcbiAgICBjb25zdCBhdXRoS2V5ID0gb3B0aW9ucy5hcGlLZXkgfHwgKDAsIGVudl8xLnByb2Nlc3NFbnYpKGVudl8xLmVudktleXMuT3BlbkFpQXBpS2V5KSB8fCBcIlwiO1xuICAgIC8vIEVuc3VyZSB3ZSBhZGQgYSB0cmFpbGluZyBzbGFzaCB0byBvdXIgYmFzZSBVUkwgaWYgaXQgZG9lc24ndCBoYXZlIG9uZSxcbiAgICAvLyBvdGhlcndpc2Ugd2UnbGwgcmVwbGFjZSB0aGUgcGF0aCBpbnN0ZWFkIG9mIGFwcGVuZGluZyBpdC5cbiAgICBsZXQgYmFzZVVybCA9IG9wdGlvbnMuYmFzZVVybCB8fCBcImh0dHBzOi8vYXBpLm9wZW5haS5jb20vdjEvXCI7XG4gICAgaWYgKCFiYXNlVXJsLmVuZHNXaXRoKFwiL1wiKSkge1xuICAgICAgICBiYXNlVXJsICs9IFwiL1wiO1xuICAgIH1cbiAgICBjb25zdCB1cmwgPSBuZXcgVVJMKFwiY2hhdC9jb21wbGV0aW9uc1wiLCBiYXNlVXJsKTtcbiAgICByZXR1cm4ge1xuICAgICAgICB1cmw6IHVybC5ocmVmLFxuICAgICAgICBhdXRoS2V5LFxuICAgICAgICBmb3JtYXQ6IFwib3BlbmFpLWNoYXRcIixcbiAgICAgICAgb25DYWxsKF8sIGJvZHkpIHtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYm9keSwgb3B0aW9ucy5kZWZhdWx0UGFyYW1ldGVycyk7XG4gICAgICAgICAgICBib2R5Lm1vZGVsIHx8IChib2R5Lm1vZGVsID0gb3B0aW9ucy5tb2RlbCk7XG4gICAgICAgIH0sXG4gICAgICAgIG9wdGlvbnMsXG4gICAgfTtcbn07XG5leHBvcnRzLm9wZW5haSA9IG9wZW5haTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9wZW5haS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@inngest/ai/dist/models/openai.js\n");

/***/ })

};
;
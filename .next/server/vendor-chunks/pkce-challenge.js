"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/pkce-challenge";
exports.ids = ["vendor-chunks/pkce-challenge"];
exports.modules = {

/***/ "(rsc)/./node_modules/pkce-challenge/dist/index.node.js":
/*!********************************************************!*\
  !*** ./node_modules/pkce-challenge/dist/index.node.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ pkceChallenge),\n/* harmony export */   generateChallenge: () => (/* binding */ generateChallenge),\n/* harmony export */   verifyChallenge: () => (/* binding */ verifyChallenge)\n/* harmony export */ });\nlet crypto;\ncrypto =\n    globalThis.crypto?.webcrypto ?? // Node.js [18-16] REPL\n        globalThis.crypto ?? // Node.js >18\n        Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! node:crypto */ \"node:crypto\", 19)).then(m => m.webcrypto); // Node.js <18 Non-REPL\n/**\n * Creates an array of length `size` of random bytes\n * @param size\n * @returns Array of random ints (0 to 255)\n */\nasync function getRandomValues(size) {\n    return (await crypto).getRandomValues(new Uint8Array(size));\n}\n/** Generate cryptographically strong random string\n * @param size The desired length of the string\n * @returns The random string\n */\nasync function random(size) {\n    const mask = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._~\";\n    let result = \"\";\n    const randomUints = await getRandomValues(size);\n    for (let i = 0; i < size; i++) {\n        // cap the value of the randomIndex to mask.length - 1\n        const randomIndex = randomUints[i] % mask.length;\n        result += mask[randomIndex];\n    }\n    return result;\n}\n/** Generate a PKCE challenge verifier\n * @param length Length of the verifier\n * @returns A random verifier `length` characters long\n */\nasync function generateVerifier(length) {\n    return await random(length);\n}\n/** Generate a PKCE code challenge from a code verifier\n * @param code_verifier\n * @returns The base64 url encoded code challenge\n */\nasync function generateChallenge(code_verifier) {\n    const buffer = await (await crypto).subtle.digest(\"SHA-256\", new TextEncoder().encode(code_verifier));\n    // Generate base64url string\n    // btoa is deprecated in Node.js but is used here for web browser compatibility\n    // (which has no good replacement yet, see also https://github.com/whatwg/html/issues/6811)\n    return btoa(String.fromCharCode(...new Uint8Array(buffer)))\n        .replace(/\\//g, '_')\n        .replace(/\\+/g, '-')\n        .replace(/=/g, '');\n}\n/** Generate a PKCE challenge pair\n * @param length Length of the verifer (between 43-128). Defaults to 43.\n * @returns PKCE challenge pair\n */\nasync function pkceChallenge(length) {\n    if (!length)\n        length = 43;\n    if (length < 43 || length > 128) {\n        throw `Expected a length between 43 and 128. Received ${length}.`;\n    }\n    const verifier = await generateVerifier(length);\n    const challenge = await generateChallenge(verifier);\n    return {\n        code_verifier: verifier,\n        code_challenge: challenge,\n    };\n}\n/** Verify that a code_verifier produces the expected code challenge\n * @param code_verifier\n * @param expectedChallenge The code challenge to verify\n * @returns True if challenges are equal. False otherwise.\n */\nasync function verifyChallenge(code_verifier, expectedChallenge) {\n    const actualChallenge = await generateChallenge(code_verifier);\n    return actualChallenge === expectedChallenge;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcGtjZS1jaGFsbGVuZ2UvZGlzdC9pbmRleC5ub2RlLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSw0SEFBcUIseUJBQXlCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFVBQVU7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDZTtBQUNmO0FBQ0E7QUFDQTtBQUNBLGdFQUFnRSxPQUFPO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9oYXJzaHNocml2YXN0YXYvRGVza3RvcC9Db2RpbmcgUHJvamVjdHMvSm9iLUFzc2lzdGFudC1BZ2VudC9ub2RlX21vZHVsZXMvcGtjZS1jaGFsbGVuZ2UvZGlzdC9pbmRleC5ub2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImxldCBjcnlwdG87XG5jcnlwdG8gPVxuICAgIGdsb2JhbFRoaXMuY3J5cHRvPy53ZWJjcnlwdG8gPz8gLy8gTm9kZS5qcyBbMTgtMTZdIFJFUExcbiAgICAgICAgZ2xvYmFsVGhpcy5jcnlwdG8gPz8gLy8gTm9kZS5qcyA+MThcbiAgICAgICAgaW1wb3J0KFwibm9kZTpjcnlwdG9cIikudGhlbihtID0+IG0ud2ViY3J5cHRvKTsgLy8gTm9kZS5qcyA8MTggTm9uLVJFUExcbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiBsZW5ndGggYHNpemVgIG9mIHJhbmRvbSBieXRlc1xuICogQHBhcmFtIHNpemVcbiAqIEByZXR1cm5zIEFycmF5IG9mIHJhbmRvbSBpbnRzICgwIHRvIDI1NSlcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2V0UmFuZG9tVmFsdWVzKHNpemUpIHtcbiAgICByZXR1cm4gKGF3YWl0IGNyeXB0bykuZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50OEFycmF5KHNpemUpKTtcbn1cbi8qKiBHZW5lcmF0ZSBjcnlwdG9ncmFwaGljYWxseSBzdHJvbmcgcmFuZG9tIHN0cmluZ1xuICogQHBhcmFtIHNpemUgVGhlIGRlc2lyZWQgbGVuZ3RoIG9mIHRoZSBzdHJpbmdcbiAqIEByZXR1cm5zIFRoZSByYW5kb20gc3RyaW5nXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIHJhbmRvbShzaXplKSB7XG4gICAgY29uc3QgbWFzayA9IFwiYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWjAxMjM0NTY3ODktLl9+XCI7XG4gICAgbGV0IHJlc3VsdCA9IFwiXCI7XG4gICAgY29uc3QgcmFuZG9tVWludHMgPSBhd2FpdCBnZXRSYW5kb21WYWx1ZXMoc2l6ZSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaXplOyBpKyspIHtcbiAgICAgICAgLy8gY2FwIHRoZSB2YWx1ZSBvZiB0aGUgcmFuZG9tSW5kZXggdG8gbWFzay5sZW5ndGggLSAxXG4gICAgICAgIGNvbnN0IHJhbmRvbUluZGV4ID0gcmFuZG9tVWludHNbaV0gJSBtYXNrLmxlbmd0aDtcbiAgICAgICAgcmVzdWx0ICs9IG1hc2tbcmFuZG9tSW5kZXhdO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLyoqIEdlbmVyYXRlIGEgUEtDRSBjaGFsbGVuZ2UgdmVyaWZpZXJcbiAqIEBwYXJhbSBsZW5ndGggTGVuZ3RoIG9mIHRoZSB2ZXJpZmllclxuICogQHJldHVybnMgQSByYW5kb20gdmVyaWZpZXIgYGxlbmd0aGAgY2hhcmFjdGVycyBsb25nXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlVmVyaWZpZXIobGVuZ3RoKSB7XG4gICAgcmV0dXJuIGF3YWl0IHJhbmRvbShsZW5ndGgpO1xufVxuLyoqIEdlbmVyYXRlIGEgUEtDRSBjb2RlIGNoYWxsZW5nZSBmcm9tIGEgY29kZSB2ZXJpZmllclxuICogQHBhcmFtIGNvZGVfdmVyaWZpZXJcbiAqIEByZXR1cm5zIFRoZSBiYXNlNjQgdXJsIGVuY29kZWQgY29kZSBjaGFsbGVuZ2VcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlQ2hhbGxlbmdlKGNvZGVfdmVyaWZpZXIpIHtcbiAgICBjb25zdCBidWZmZXIgPSBhd2FpdCAoYXdhaXQgY3J5cHRvKS5zdWJ0bGUuZGlnZXN0KFwiU0hBLTI1NlwiLCBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoY29kZV92ZXJpZmllcikpO1xuICAgIC8vIEdlbmVyYXRlIGJhc2U2NHVybCBzdHJpbmdcbiAgICAvLyBidG9hIGlzIGRlcHJlY2F0ZWQgaW4gTm9kZS5qcyBidXQgaXMgdXNlZCBoZXJlIGZvciB3ZWIgYnJvd3NlciBjb21wYXRpYmlsaXR5XG4gICAgLy8gKHdoaWNoIGhhcyBubyBnb29kIHJlcGxhY2VtZW50IHlldCwgc2VlIGFsc28gaHR0cHM6Ly9naXRodWIuY29tL3doYXR3Zy9odG1sL2lzc3Vlcy82ODExKVxuICAgIHJldHVybiBidG9hKFN0cmluZy5mcm9tQ2hhckNvZGUoLi4ubmV3IFVpbnQ4QXJyYXkoYnVmZmVyKSkpXG4gICAgICAgIC5yZXBsYWNlKC9cXC8vZywgJ18nKVxuICAgICAgICAucmVwbGFjZSgvXFwrL2csICctJylcbiAgICAgICAgLnJlcGxhY2UoLz0vZywgJycpO1xufVxuLyoqIEdlbmVyYXRlIGEgUEtDRSBjaGFsbGVuZ2UgcGFpclxuICogQHBhcmFtIGxlbmd0aCBMZW5ndGggb2YgdGhlIHZlcmlmZXIgKGJldHdlZW4gNDMtMTI4KS4gRGVmYXVsdHMgdG8gNDMuXG4gKiBAcmV0dXJucyBQS0NFIGNoYWxsZW5nZSBwYWlyXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIHBrY2VDaGFsbGVuZ2UobGVuZ3RoKSB7XG4gICAgaWYgKCFsZW5ndGgpXG4gICAgICAgIGxlbmd0aCA9IDQzO1xuICAgIGlmIChsZW5ndGggPCA0MyB8fCBsZW5ndGggPiAxMjgpIHtcbiAgICAgICAgdGhyb3cgYEV4cGVjdGVkIGEgbGVuZ3RoIGJldHdlZW4gNDMgYW5kIDEyOC4gUmVjZWl2ZWQgJHtsZW5ndGh9LmA7XG4gICAgfVxuICAgIGNvbnN0IHZlcmlmaWVyID0gYXdhaXQgZ2VuZXJhdGVWZXJpZmllcihsZW5ndGgpO1xuICAgIGNvbnN0IGNoYWxsZW5nZSA9IGF3YWl0IGdlbmVyYXRlQ2hhbGxlbmdlKHZlcmlmaWVyKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBjb2RlX3ZlcmlmaWVyOiB2ZXJpZmllcixcbiAgICAgICAgY29kZV9jaGFsbGVuZ2U6IGNoYWxsZW5nZSxcbiAgICB9O1xufVxuLyoqIFZlcmlmeSB0aGF0IGEgY29kZV92ZXJpZmllciBwcm9kdWNlcyB0aGUgZXhwZWN0ZWQgY29kZSBjaGFsbGVuZ2VcbiAqIEBwYXJhbSBjb2RlX3ZlcmlmaWVyXG4gKiBAcGFyYW0gZXhwZWN0ZWRDaGFsbGVuZ2UgVGhlIGNvZGUgY2hhbGxlbmdlIHRvIHZlcmlmeVxuICogQHJldHVybnMgVHJ1ZSBpZiBjaGFsbGVuZ2VzIGFyZSBlcXVhbC4gRmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdmVyaWZ5Q2hhbGxlbmdlKGNvZGVfdmVyaWZpZXIsIGV4cGVjdGVkQ2hhbGxlbmdlKSB7XG4gICAgY29uc3QgYWN0dWFsQ2hhbGxlbmdlID0gYXdhaXQgZ2VuZXJhdGVDaGFsbGVuZ2UoY29kZV92ZXJpZmllcik7XG4gICAgcmV0dXJuIGFjdHVhbENoYWxsZW5nZSA9PT0gZXhwZWN0ZWRDaGFsbGVuZ2U7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pkce-challenge/dist/index.node.js\n");

/***/ })

};
;
"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/inngest";
exports.ids = ["vendor-chunks/inngest"];
exports.modules = {

/***/ "(rsc)/./node_modules/inngest/api/api.js":
/*!*****************************************!*\
  !*** ./node_modules/inngest/api/api.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.InngestApi = void 0;\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nconst consts_js_1 = __webpack_require__(/*! ../helpers/consts.js */ \"(rsc)/./node_modules/inngest/helpers/consts.js\");\nconst devserver_js_1 = __webpack_require__(/*! ../helpers/devserver.js */ \"(rsc)/./node_modules/inngest/helpers/devserver.js\");\nconst errors_js_1 = __webpack_require__(/*! ../helpers/errors.js */ \"(rsc)/./node_modules/inngest/helpers/errors.js\");\nconst net_js_1 = __webpack_require__(/*! ../helpers/net.js */ \"(rsc)/./node_modules/inngest/helpers/net.js\");\nconst strings_js_1 = __webpack_require__(/*! ../helpers/strings.js */ \"(rsc)/./node_modules/inngest/helpers/strings.js\");\nconst types_js_1 = __webpack_require__(/*! ../types.js */ \"(rsc)/./node_modules/inngest/types.js\");\nconst schema_js_1 = __webpack_require__(/*! ./schema.js */ \"(rsc)/./node_modules/inngest/api/schema.js\");\nconst realtimeSubscriptionTokenSchema = zod_1.z.object({\n    jwt: zod_1.z.string(),\n});\nconst sendSignalSuccessResponseSchema = zod_1.z.object({\n    data: zod_1.z.object({\n        run_id: zod_1.z.string().min(1),\n    }),\n});\nclass InngestApi {\n    constructor({ baseUrl, signingKey, signingKeyFallback, fetch, mode, }) {\n        this.apiBaseUrl = baseUrl;\n        this.signingKey = signingKey;\n        this.signingKeyFallback = signingKeyFallback;\n        this.fetch = fetch;\n        this.mode = mode;\n    }\n    get hashedKey() {\n        return (0, strings_js_1.hashSigningKey)(this.signingKey);\n    }\n    get hashedFallbackKey() {\n        if (!this.signingKeyFallback) {\n            return;\n        }\n        return (0, strings_js_1.hashSigningKey)(this.signingKeyFallback);\n    }\n    // set the signing key in case it was not instantiated previously\n    setSigningKey(key) {\n        if (typeof key === \"string\" && this.signingKey === \"\") {\n            this.signingKey = key;\n        }\n    }\n    setSigningKeyFallback(key) {\n        if (typeof key === \"string\" && !this.signingKeyFallback) {\n            this.signingKeyFallback = key;\n        }\n    }\n    async getTargetUrl(path) {\n        if (this.apiBaseUrl) {\n            return new URL(path, this.apiBaseUrl);\n        }\n        let url = new URL(path, consts_js_1.defaultInngestApiBaseUrl);\n        if (this.mode.isDev && this.mode.isInferred && !this.apiBaseUrl) {\n            const devAvailable = await (0, devserver_js_1.devServerAvailable)(consts_js_1.defaultDevServerHost, this.fetch);\n            if (devAvailable) {\n                url = new URL(path, consts_js_1.defaultDevServerHost);\n            }\n        }\n        return url;\n    }\n    async getRunSteps(runId, version) {\n        return (0, net_js_1.fetchWithAuthFallback)({\n            authToken: this.hashedKey,\n            authTokenFallback: this.hashedFallbackKey,\n            fetch: this.fetch,\n            url: await this.getTargetUrl(`/v0/runs/${runId}/actions`),\n        })\n            .then(async (resp) => {\n            const data = await resp.json();\n            if (resp.ok) {\n                return (0, types_js_1.ok)(schema_js_1.stepsSchemas[version].parse(data));\n            }\n            else {\n                return (0, types_js_1.err)(schema_js_1.errorSchema.parse(data));\n            }\n        })\n            .catch((error) => {\n            return (0, types_js_1.err)({\n                error: (0, errors_js_1.getErrorMessage)(error, \"Unknown error retrieving step data\"),\n                status: 500,\n            });\n        });\n    }\n    async getRunBatch(runId) {\n        return (0, net_js_1.fetchWithAuthFallback)({\n            authToken: this.hashedKey,\n            authTokenFallback: this.hashedFallbackKey,\n            fetch: this.fetch,\n            url: await this.getTargetUrl(`/v0/runs/${runId}/batch`),\n        })\n            .then(async (resp) => {\n            const data = await resp.json();\n            if (resp.ok) {\n                return (0, types_js_1.ok)(schema_js_1.batchSchema.parse(data));\n            }\n            else {\n                return (0, types_js_1.err)(schema_js_1.errorSchema.parse(data));\n            }\n        })\n            .catch((error) => {\n            return (0, types_js_1.err)({\n                error: (0, errors_js_1.getErrorMessage)(error, \"Unknown error retrieving event batch\"),\n                status: 500,\n            });\n        });\n    }\n    async publish(publishOptions, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    data) {\n        // todo it may not be a \"text/stream\"\n        const isStream = data instanceof ReadableStream;\n        const url = await this.getTargetUrl(\"/v1/realtime/publish\");\n        url.searchParams.set(\"channel\", publishOptions.channel || \"\");\n        if (publishOptions.runId) {\n            url.searchParams.set(\"run_id\", publishOptions.runId);\n        }\n        publishOptions.topics.forEach((topic) => {\n            url.searchParams.append(\"topic\", topic);\n        });\n        return (0, net_js_1.fetchWithAuthFallback)({\n            authToken: this.hashedKey,\n            authTokenFallback: this.hashedFallbackKey,\n            fetch: this.fetch,\n            url,\n            options: Object.assign({ method: \"POST\", body: isStream\n                    ? data\n                    : typeof data === \"string\"\n                        ? data\n                        : JSON.stringify(data), headers: {\n                    \"Content-Type\": isStream ? \"text/stream\" : \"application/json\",\n                } }, (isStream ? { duplex: \"half\" } : {})),\n        })\n            .then((res) => {\n            if (!res.ok) {\n                throw new Error(`Failed to publish event: ${res.status} ${res.statusText}`);\n            }\n            return (0, types_js_1.ok)(undefined);\n        })\n            .catch((error) => {\n            return (0, types_js_1.err)({\n                error: (0, errors_js_1.getErrorMessage)(error, \"Unknown error publishing event\"),\n                status: 500,\n            });\n        });\n    }\n    async sendSignal(signalOptions, options) {\n        const url = await this.getTargetUrl(\"/v1/signals\");\n        const body = {\n            signal: signalOptions.signal,\n            data: signalOptions.data,\n        };\n        return (0, net_js_1.fetchWithAuthFallback)({\n            authToken: this.hashedKey,\n            authTokenFallback: this.hashedFallbackKey,\n            fetch: this.fetch,\n            url,\n            options: {\n                method: \"POST\",\n                body: JSON.stringify(body),\n                headers: Object.assign({ \"Content-Type\": \"application/json\" }, options === null || options === void 0 ? void 0 : options.headers),\n            },\n        })\n            .then(async (res) => {\n            // A 404 is valid if the signal was not found.\n            if (res.status === 404) {\n                return (0, types_js_1.ok)({\n                    runId: undefined,\n                });\n            }\n            // Save a clone of the response we can use to get the text of if we fail\n            // to parse the JSON.\n            const resClone = res.clone();\n            // JSON!\n            let json;\n            try {\n                json = await res.json();\n            }\n            catch (error) {\n                // res.json() failed so not a valid JSON response\n                return (0, types_js_1.err)({\n                    error: `Failed to send signal: ${res.status} ${res.statusText} - ${await resClone.text()}`,\n                    status: res.status,\n                });\n            }\n            // If we're not 2xx, something went wrong.\n            if (!res.ok) {\n                try {\n                    return (0, types_js_1.err)(schema_js_1.errorSchema.parse(json));\n                }\n                catch (_a) {\n                    // schema parse failed\n                    return (0, types_js_1.err)({\n                        error: `Failed to send signal: ${res.status} ${res.statusText} - ${await res.text()}`,\n                        status: res.status,\n                    });\n                }\n            }\n            // If we are 2xx, we should have a run_id.\n            const parseRes = sendSignalSuccessResponseSchema.safeParse(json);\n            if (!parseRes.success) {\n                return (0, types_js_1.err)({\n                    error: `Successfully sent signal, but response parsing failed: ${res.status} ${res.statusText} - ${await resClone.text()}`,\n                    status: res.status,\n                });\n            }\n            return (0, types_js_1.ok)({\n                runId: parseRes.data.data.run_id,\n            });\n        })\n            .catch((error) => {\n            // Catch-all if various things go wrong\n            return (0, types_js_1.err)({\n                error: (0, errors_js_1.getErrorMessage)(error, \"Unknown error sending signal\"),\n                status: 500,\n            });\n        });\n    }\n    async getSubscriptionToken(channel, topics) {\n        const url = await this.getTargetUrl(\"/v1/realtime/token\");\n        const body = topics.map((topic) => ({\n            channel,\n            name: topic,\n            kind: \"run\",\n        }));\n        return (0, net_js_1.fetchWithAuthFallback)({\n            authToken: this.hashedKey,\n            authTokenFallback: this.hashedFallbackKey,\n            fetch: this.fetch,\n            url,\n            options: {\n                method: \"POST\",\n                body: JSON.stringify(body),\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n            },\n        })\n            .then(async (res) => {\n            if (!res.ok) {\n                throw new Error(`Failed to get subscription token: ${res.status} ${res.statusText} - ${await res.text()}`);\n            }\n            const data = realtimeSubscriptionTokenSchema.parse(await res.json());\n            return data.jwt;\n        })\n            .catch((error) => {\n            throw new Error((0, errors_js_1.getErrorMessage)(error, \"Unknown error getting subscription token\"));\n        });\n    }\n}\nexports.InngestApi = InngestApi;\n//# sourceMappingURL=api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/api/api.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/api/schema.js":
/*!********************************************!*\
  !*** ./node_modules/inngest/api/schema.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.batchSchema = exports.stepsSchemas = exports.errorSchema = void 0;\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nconst InngestExecution_js_1 = __webpack_require__(/*! ../components/execution/InngestExecution.js */ \"(rsc)/./node_modules/inngest/components/execution/InngestExecution.js\");\nconst types_js_1 = __webpack_require__(/*! ../types.js */ \"(rsc)/./node_modules/inngest/types.js\");\nexports.errorSchema = zod_1.z.object({\n    error: zod_1.z.string(),\n    status: zod_1.z.number(),\n});\nconst v0StepSchema = zod_1.z\n    .record(zod_1.z.any().refine((v) => typeof v !== \"undefined\", {\n    message: \"Values in steps must be defined\",\n}))\n    .optional()\n    .nullable();\nconst v1StepSchema = zod_1.z\n    .record(zod_1.z\n    .object({\n    type: zod_1.z.literal(\"data\").optional().default(\"data\"),\n    data: zod_1.z.any().refine((v) => typeof v !== \"undefined\", {\n        message: \"Data in steps must be defined\",\n    }),\n})\n    .strict()\n    .or(zod_1.z\n    .object({\n    type: zod_1.z.literal(\"error\").optional().default(\"error\"),\n    error: types_js_1.jsonErrorSchema,\n})\n    .strict())\n    .or(zod_1.z\n    .object({\n    type: zod_1.z.literal(\"input\").optional().default(\"input\"),\n    input: zod_1.z.any().refine((v) => typeof v !== \"undefined\", {\n        message: \"If input is present it must not be `undefined`\",\n    }),\n})\n    .strict())\n    /**\n     * If the result isn't a distcint `data` or `error` object, then it's\n     * likely that the executor has set this directly to a value, for example\n     * in the case of `sleep` or `waitForEvent`.\n     *\n     * In this case, pull the entire value through as data.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    .or(zod_1.z.any().transform((v) => ({ type: \"data\", data: v }))))\n    .default({});\nconst v2StepSchema = v1StepSchema;\nexports.stepsSchemas = {\n    [InngestExecution_js_1.ExecutionVersion.V0]: v0StepSchema,\n    [InngestExecution_js_1.ExecutionVersion.V1]: v1StepSchema,\n    [InngestExecution_js_1.ExecutionVersion.V2]: v2StepSchema,\n};\nexports.batchSchema = zod_1.z.array(zod_1.z.record(zod_1.z.any()).transform((v) => v));\n//# sourceMappingURL=schema.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9hcGkvc2NoZW1hLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1CQUFtQixHQUFHLG9CQUFvQixHQUFHLG1CQUFtQjtBQUNoRSxjQUFjLG1CQUFPLENBQUMsa0RBQUs7QUFDM0IsOEJBQThCLG1CQUFPLENBQUMsMEhBQTZDO0FBQ25GLG1CQUFtQixtQkFBTyxDQUFDLDBEQUFhO0FBQ3hDLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLHVCQUF1QjtBQUNqRSxlQUFlO0FBQ2Y7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9oYXJzaHNocml2YXN0YXYvRGVza3RvcC9Db2RpbmcgUHJvamVjdHMvSm9iLUFzc2lzdGFudC1BZ2VudC9ub2RlX21vZHVsZXMvaW5uZ2VzdC9hcGkvc2NoZW1hLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5iYXRjaFNjaGVtYSA9IGV4cG9ydHMuc3RlcHNTY2hlbWFzID0gZXhwb3J0cy5lcnJvclNjaGVtYSA9IHZvaWQgMDtcbmNvbnN0IHpvZF8xID0gcmVxdWlyZShcInpvZFwiKTtcbmNvbnN0IElubmdlc3RFeGVjdXRpb25fanNfMSA9IHJlcXVpcmUoXCIuLi9jb21wb25lbnRzL2V4ZWN1dGlvbi9Jbm5nZXN0RXhlY3V0aW9uLmpzXCIpO1xuY29uc3QgdHlwZXNfanNfMSA9IHJlcXVpcmUoXCIuLi90eXBlcy5qc1wiKTtcbmV4cG9ydHMuZXJyb3JTY2hlbWEgPSB6b2RfMS56Lm9iamVjdCh7XG4gICAgZXJyb3I6IHpvZF8xLnouc3RyaW5nKCksXG4gICAgc3RhdHVzOiB6b2RfMS56Lm51bWJlcigpLFxufSk7XG5jb25zdCB2MFN0ZXBTY2hlbWEgPSB6b2RfMS56XG4gICAgLnJlY29yZCh6b2RfMS56LmFueSgpLnJlZmluZSgodikgPT4gdHlwZW9mIHYgIT09IFwidW5kZWZpbmVkXCIsIHtcbiAgICBtZXNzYWdlOiBcIlZhbHVlcyBpbiBzdGVwcyBtdXN0IGJlIGRlZmluZWRcIixcbn0pKVxuICAgIC5vcHRpb25hbCgpXG4gICAgLm51bGxhYmxlKCk7XG5jb25zdCB2MVN0ZXBTY2hlbWEgPSB6b2RfMS56XG4gICAgLnJlY29yZCh6b2RfMS56XG4gICAgLm9iamVjdCh7XG4gICAgdHlwZTogem9kXzEuei5saXRlcmFsKFwiZGF0YVwiKS5vcHRpb25hbCgpLmRlZmF1bHQoXCJkYXRhXCIpLFxuICAgIGRhdGE6IHpvZF8xLnouYW55KCkucmVmaW5lKCh2KSA9PiB0eXBlb2YgdiAhPT0gXCJ1bmRlZmluZWRcIiwge1xuICAgICAgICBtZXNzYWdlOiBcIkRhdGEgaW4gc3RlcHMgbXVzdCBiZSBkZWZpbmVkXCIsXG4gICAgfSksXG59KVxuICAgIC5zdHJpY3QoKVxuICAgIC5vcih6b2RfMS56XG4gICAgLm9iamVjdCh7XG4gICAgdHlwZTogem9kXzEuei5saXRlcmFsKFwiZXJyb3JcIikub3B0aW9uYWwoKS5kZWZhdWx0KFwiZXJyb3JcIiksXG4gICAgZXJyb3I6IHR5cGVzX2pzXzEuanNvbkVycm9yU2NoZW1hLFxufSlcbiAgICAuc3RyaWN0KCkpXG4gICAgLm9yKHpvZF8xLnpcbiAgICAub2JqZWN0KHtcbiAgICB0eXBlOiB6b2RfMS56LmxpdGVyYWwoXCJpbnB1dFwiKS5vcHRpb25hbCgpLmRlZmF1bHQoXCJpbnB1dFwiKSxcbiAgICBpbnB1dDogem9kXzEuei5hbnkoKS5yZWZpbmUoKHYpID0+IHR5cGVvZiB2ICE9PSBcInVuZGVmaW5lZFwiLCB7XG4gICAgICAgIG1lc3NhZ2U6IFwiSWYgaW5wdXQgaXMgcHJlc2VudCBpdCBtdXN0IG5vdCBiZSBgdW5kZWZpbmVkYFwiLFxuICAgIH0pLFxufSlcbiAgICAuc3RyaWN0KCkpXG4gICAgLyoqXG4gICAgICogSWYgdGhlIHJlc3VsdCBpc24ndCBhIGRpc3RjaW50IGBkYXRhYCBvciBgZXJyb3JgIG9iamVjdCwgdGhlbiBpdCdzXG4gICAgICogbGlrZWx5IHRoYXQgdGhlIGV4ZWN1dG9yIGhhcyBzZXQgdGhpcyBkaXJlY3RseSB0byBhIHZhbHVlLCBmb3IgZXhhbXBsZVxuICAgICAqIGluIHRoZSBjYXNlIG9mIGBzbGVlcGAgb3IgYHdhaXRGb3JFdmVudGAuXG4gICAgICpcbiAgICAgKiBJbiB0aGlzIGNhc2UsIHB1bGwgdGhlIGVudGlyZSB2YWx1ZSB0aHJvdWdoIGFzIGRhdGEuXG4gICAgICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtYXNzaWdubWVudFxuICAgIC5vcih6b2RfMS56LmFueSgpLnRyYW5zZm9ybSgodikgPT4gKHsgdHlwZTogXCJkYXRhXCIsIGRhdGE6IHYgfSkpKSlcbiAgICAuZGVmYXVsdCh7fSk7XG5jb25zdCB2MlN0ZXBTY2hlbWEgPSB2MVN0ZXBTY2hlbWE7XG5leHBvcnRzLnN0ZXBzU2NoZW1hcyA9IHtcbiAgICBbSW5uZ2VzdEV4ZWN1dGlvbl9qc18xLkV4ZWN1dGlvblZlcnNpb24uVjBdOiB2MFN0ZXBTY2hlbWEsXG4gICAgW0lubmdlc3RFeGVjdXRpb25fanNfMS5FeGVjdXRpb25WZXJzaW9uLlYxXTogdjFTdGVwU2NoZW1hLFxuICAgIFtJbm5nZXN0RXhlY3V0aW9uX2pzXzEuRXhlY3V0aW9uVmVyc2lvbi5WMl06IHYyU3RlcFNjaGVtYSxcbn07XG5leHBvcnRzLmJhdGNoU2NoZW1hID0gem9kXzEuei5hcnJheSh6b2RfMS56LnJlY29yZCh6b2RfMS56LmFueSgpKS50cmFuc2Zvcm0oKHYpID0+IHYpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVtYS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/api/schema.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/EventSchemas.js":
/*!*********************************************************!*\
  !*** ./node_modules/inngest/components/EventSchemas.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.EventSchemas = void 0;\n/**\n * Provide an `EventSchemas` class to type events, providing type safety when\n * sending events and running functions via Inngest.\n *\n * You can provide generated Inngest types, custom types, types using Zod, or\n * a combination of the above. See {@link EventSchemas} for more information.\n *\n * @example\n *\n * ```ts\n * export const inngest = new Inngest({\n *   id: \"my-app\",\n *   schemas: new EventSchemas().fromZod({\n *     \"app/user.created\": {\n *       data: z.object({\n *         id: z.string(),\n *         name: z.string(),\n *       }),\n *     },\n *   }),\n * });\n * ```\n *\n * @public\n */\nclass EventSchemas {\n    constructor() {\n        this.runtimeSchemas = {};\n    }\n    addRuntimeSchemas(schemas) {\n        this.runtimeSchemas = Object.assign(Object.assign({}, this.runtimeSchemas), schemas);\n    }\n    /**\n     * Use generated Inngest types to type events.\n     */\n    fromGenerated() {\n        return this;\n    }\n    /**\n     * Use a `Record<>` type to type events.\n     *\n     * @example\n     *\n     * ```ts\n     * export const inngest = new Inngest({\n     *   id: \"my-app\",\n     *   schemas: new EventSchemas().fromRecord<{\n     *     \"app/user.created\": {\n     *       data: {\n     *         id: string;\n     *         name: string;\n     *       };\n     *     };\n     *   }>(),\n     * });\n     * ```\n     */\n    fromRecord(..._args) {\n        return this;\n    }\n    /**\n     * Use a union type to type events.\n     *\n     * @example\n     *\n     * ```ts\n     * type AccountCreated = {\n     *   name: \"app/account.created\";\n     *   data: { org: string };\n     *   user: { id: string };\n     * };\n     *\n     * type AccountDeleted = {\n     *   name: \"app/account.deleted\";\n     *   data: { org: string };\n     *   user: { id: string };\n     * };\n     *\n     * type Events = AccountCreated | AccountDeleted;\n     *\n     * export const inngest = new Inngest({\n     *   id: \"my-app\",\n     *   schemas: new EventSchemas().fromUnion<Events>(),\n     * });\n     * ```\n     */\n    fromUnion() {\n        return this;\n    }\n    /**\n     * Use Zod to type events.\n     *\n     * @example\n     *\n     * ```ts\n     * export const inngest = new Inngest({\n     *   id: \"my-app\",\n     *   schemas: new EventSchemas().fromZod({\n     *     \"app/user.created\": {\n     *       data: z.object({\n     *         id: z.string(),\n     *         name: z.string(),\n     *       }),\n     *     },\n     *   }),\n     * });\n     * ```\n     */\n    fromZod(schemas) {\n        let runtimeSchemas;\n        if (Array.isArray(schemas)) {\n            runtimeSchemas = schemas.reduce((acc, schema) => {\n                const _a = schema.shape, { name: { value: name } } = _a, rest = __rest(_a, [\"name\"]);\n                return Object.assign(Object.assign({}, acc), { [name]: rest });\n            }, {});\n        }\n        else {\n            runtimeSchemas = schemas;\n        }\n        this.addRuntimeSchemas(runtimeSchemas);\n        return this;\n    }\n}\nexports.EventSchemas = EventSchemas;\n//# sourceMappingURL=EventSchemas.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9jb21wb25lbnRzL0V2ZW50U2NoZW1hcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2REFBNkQsY0FBYztBQUMzRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLG9CQUFvQjtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWLFFBQVE7QUFDUixNQUFNO0FBQ04sSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDREQUE0RDtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2QsWUFBWTtBQUNaLFVBQVU7QUFDVixRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLFFBQVEsZ0JBQWdCO0FBQ25FLHFEQUFxRCxVQUFVLGNBQWM7QUFDN0UsYUFBYSxJQUFJO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9oYXJzaHNocml2YXN0YXYvRGVza3RvcC9Db2RpbmcgUHJvamVjdHMvSm9iLUFzc2lzdGFudC1BZ2VudC9ub2RlX21vZHVsZXMvaW5uZ2VzdC9jb21wb25lbnRzL0V2ZW50U2NoZW1hcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRXZlbnRTY2hlbWFzID0gdm9pZCAwO1xuLyoqXG4gKiBQcm92aWRlIGFuIGBFdmVudFNjaGVtYXNgIGNsYXNzIHRvIHR5cGUgZXZlbnRzLCBwcm92aWRpbmcgdHlwZSBzYWZldHkgd2hlblxuICogc2VuZGluZyBldmVudHMgYW5kIHJ1bm5pbmcgZnVuY3Rpb25zIHZpYSBJbm5nZXN0LlxuICpcbiAqIFlvdSBjYW4gcHJvdmlkZSBnZW5lcmF0ZWQgSW5uZ2VzdCB0eXBlcywgY3VzdG9tIHR5cGVzLCB0eXBlcyB1c2luZyBab2QsIG9yXG4gKiBhIGNvbWJpbmF0aW9uIG9mIHRoZSBhYm92ZS4gU2VlIHtAbGluayBFdmVudFNjaGVtYXN9IGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogYGBgdHNcbiAqIGV4cG9ydCBjb25zdCBpbm5nZXN0ID0gbmV3IElubmdlc3Qoe1xuICogICBpZDogXCJteS1hcHBcIixcbiAqICAgc2NoZW1hczogbmV3IEV2ZW50U2NoZW1hcygpLmZyb21ab2Qoe1xuICogICAgIFwiYXBwL3VzZXIuY3JlYXRlZFwiOiB7XG4gKiAgICAgICBkYXRhOiB6Lm9iamVjdCh7XG4gKiAgICAgICAgIGlkOiB6LnN0cmluZygpLFxuICogICAgICAgICBuYW1lOiB6LnN0cmluZygpLFxuICogICAgICAgfSksXG4gKiAgICAgfSxcbiAqICAgfSksXG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIEBwdWJsaWNcbiAqL1xuY2xhc3MgRXZlbnRTY2hlbWFzIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5ydW50aW1lU2NoZW1hcyA9IHt9O1xuICAgIH1cbiAgICBhZGRSdW50aW1lU2NoZW1hcyhzY2hlbWFzKSB7XG4gICAgICAgIHRoaXMucnVudGltZVNjaGVtYXMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHRoaXMucnVudGltZVNjaGVtYXMpLCBzY2hlbWFzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXNlIGdlbmVyYXRlZCBJbm5nZXN0IHR5cGVzIHRvIHR5cGUgZXZlbnRzLlxuICAgICAqL1xuICAgIGZyb21HZW5lcmF0ZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVc2UgYSBgUmVjb3JkPD5gIHR5cGUgdG8gdHlwZSBldmVudHMuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogYGBgdHNcbiAgICAgKiBleHBvcnQgY29uc3QgaW5uZ2VzdCA9IG5ldyBJbm5nZXN0KHtcbiAgICAgKiAgIGlkOiBcIm15LWFwcFwiLFxuICAgICAqICAgc2NoZW1hczogbmV3IEV2ZW50U2NoZW1hcygpLmZyb21SZWNvcmQ8e1xuICAgICAqICAgICBcImFwcC91c2VyLmNyZWF0ZWRcIjoge1xuICAgICAqICAgICAgIGRhdGE6IHtcbiAgICAgKiAgICAgICAgIGlkOiBzdHJpbmc7XG4gICAgICogICAgICAgICBuYW1lOiBzdHJpbmc7XG4gICAgICogICAgICAgfTtcbiAgICAgKiAgICAgfTtcbiAgICAgKiAgIH0+KCksXG4gICAgICogfSk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgZnJvbVJlY29yZCguLi5fYXJncykge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXNlIGEgdW5pb24gdHlwZSB0byB0eXBlIGV2ZW50cy5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBgYGB0c1xuICAgICAqIHR5cGUgQWNjb3VudENyZWF0ZWQgPSB7XG4gICAgICogICBuYW1lOiBcImFwcC9hY2NvdW50LmNyZWF0ZWRcIjtcbiAgICAgKiAgIGRhdGE6IHsgb3JnOiBzdHJpbmcgfTtcbiAgICAgKiAgIHVzZXI6IHsgaWQ6IHN0cmluZyB9O1xuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB0eXBlIEFjY291bnREZWxldGVkID0ge1xuICAgICAqICAgbmFtZTogXCJhcHAvYWNjb3VudC5kZWxldGVkXCI7XG4gICAgICogICBkYXRhOiB7IG9yZzogc3RyaW5nIH07XG4gICAgICogICB1c2VyOiB7IGlkOiBzdHJpbmcgfTtcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogdHlwZSBFdmVudHMgPSBBY2NvdW50Q3JlYXRlZCB8IEFjY291bnREZWxldGVkO1xuICAgICAqXG4gICAgICogZXhwb3J0IGNvbnN0IGlubmdlc3QgPSBuZXcgSW5uZ2VzdCh7XG4gICAgICogICBpZDogXCJteS1hcHBcIixcbiAgICAgKiAgIHNjaGVtYXM6IG5ldyBFdmVudFNjaGVtYXMoKS5mcm9tVW5pb248RXZlbnRzPigpLFxuICAgICAqIH0pO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGZyb21VbmlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVzZSBab2QgdG8gdHlwZSBldmVudHMuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogYGBgdHNcbiAgICAgKiBleHBvcnQgY29uc3QgaW5uZ2VzdCA9IG5ldyBJbm5nZXN0KHtcbiAgICAgKiAgIGlkOiBcIm15LWFwcFwiLFxuICAgICAqICAgc2NoZW1hczogbmV3IEV2ZW50U2NoZW1hcygpLmZyb21ab2Qoe1xuICAgICAqICAgICBcImFwcC91c2VyLmNyZWF0ZWRcIjoge1xuICAgICAqICAgICAgIGRhdGE6IHoub2JqZWN0KHtcbiAgICAgKiAgICAgICAgIGlkOiB6LnN0cmluZygpLFxuICAgICAqICAgICAgICAgbmFtZTogei5zdHJpbmcoKSxcbiAgICAgKiAgICAgICB9KSxcbiAgICAgKiAgICAgfSxcbiAgICAgKiAgIH0pLFxuICAgICAqIH0pO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGZyb21ab2Qoc2NoZW1hcykge1xuICAgICAgICBsZXQgcnVudGltZVNjaGVtYXM7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHNjaGVtYXMpKSB7XG4gICAgICAgICAgICBydW50aW1lU2NoZW1hcyA9IHNjaGVtYXMucmVkdWNlKChhY2MsIHNjaGVtYSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IF9hID0gc2NoZW1hLnNoYXBlLCB7IG5hbWU6IHsgdmFsdWU6IG5hbWUgfSB9ID0gX2EsIHJlc3QgPSBfX3Jlc3QoX2EsIFtcIm5hbWVcIl0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGFjYyksIHsgW25hbWVdOiByZXN0IH0pO1xuICAgICAgICAgICAgfSwge30pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcnVudGltZVNjaGVtYXMgPSBzY2hlbWFzO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWRkUnVudGltZVNjaGVtYXMocnVudGltZVNjaGVtYXMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG5leHBvcnRzLkV2ZW50U2NoZW1hcyA9IEV2ZW50U2NoZW1hcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUV2ZW50U2NoZW1hcy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/EventSchemas.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/Fetch.js":
/*!**************************************************!*\
  !*** ./node_modules/inngest/components/Fetch.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.fetch = void 0;\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\"));\nconst als_js_1 = __webpack_require__(/*! ./execution/als.js */ \"(rsc)/./node_modules/inngest/components/execution/als.js\");\nconst InngestStepTools_js_1 = __webpack_require__(/*! ./InngestStepTools.js */ \"(rsc)/./node_modules/inngest/components/InngestStepTools.js\");\nconst globalFetch = globalThis.fetch;\nconst debug = (0, debug_1.default)(\"inngest:fetch\");\nconst createFetchShim = () => {\n    // eslint-disable-next-line prefer-const\n    let stepFetch;\n    const fetch = async (input, init) => {\n        const ctx = await (0, als_js_1.getAsyncCtx)();\n        if (!ctx) {\n            // Not in a function run\n            if (!stepFetch.fallback) {\n                // TODO Tell the user how to solve\n                throw new Error(\"step.fetch() called outside of a function and had no fallback set\");\n            }\n            debug(\"step.fetch() called outside of a function; falling back to global fetch\");\n            return stepFetch.fallback(input, init);\n        }\n        // In a function run\n        if (ctx.executingStep) {\n            // Inside a step\n            if (!stepFetch.fallback) {\n                // TODO Tell the user how to solve\n                throw new Error(`step.fetch() called inside step \"${ctx.executingStep.id}\" and had no fallback set`);\n            }\n            debug(`step.fetch() called inside step \"${ctx.executingStep.id}\"; falling back to global fetch`);\n            return stepFetch.fallback(input, init);\n        }\n        const targetUrl = new URL(input instanceof Request ? input.url : input.toString());\n        debug(\"step.fetch() shimming request to\", targetUrl.hostname);\n        // Purposefully do not try/cacth this; if it throws then we treat that as a\n        // regular `fetch()` throw, which also would not return a `Response`.\n        const jsonRes = await ctx.ctx.step[InngestStepTools_js_1.gatewaySymbol](`step.fetch: ${targetUrl.hostname}`, input, init);\n        return new Response(jsonRes.body, {\n            headers: jsonRes.headers,\n            status: jsonRes.status,\n        });\n    };\n    const optionsRef = {\n        fallback: globalFetch,\n    };\n    const extras = Object.assign({ config: (options) => {\n            Object.assign(optionsRef, options);\n            Object.assign(stepFetch, optionsRef);\n            return stepFetch;\n        } }, optionsRef);\n    stepFetch = Object.assign(fetch, extras);\n    return stepFetch;\n};\n/**\n * `fetch` is a Fetch API-compatible function that can be used to make any HTTP\n * code durable if it's called within an Inngest function.\n *\n * It will gracefully fall back to the global `fetch` if called outside of this\n * context, and a custom fallback can be set using the `config` method.\n *\n * @example Basic usage\n * ```ts\n * import { fetch } from \"inngest\";\n *\n * const api = new MyProductApi({ fetch });\n * ```\n *\n * @example Setting a custom fallback\n * ```ts\n * import { fetch } from \"inngest\";\n *\n * const api = new MyProductApi({\n *            fetch: fetch.config({ fallback: myCustomFetch }),\n * });\n * ```\n *\n * @example Do not allow fallback\n * ```ts\n * import { fetch } from \"inngest\";\n *\n * const api = new MyProductApi({\n *            fetch: fetch.config({ fallback: undefined }),\n * });\n * ```\n */\nexports.fetch = createFetchShim();\n//# sourceMappingURL=Fetch.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9jb21wb25lbnRzL0ZldGNoLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYTtBQUNiLGdDQUFnQyxtQkFBTyxDQUFDLHNEQUFPO0FBQy9DLGlCQUFpQixtQkFBTyxDQUFDLG9GQUFvQjtBQUM3Qyw4QkFBOEIsbUJBQU8sQ0FBQywwRkFBdUI7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4REFBOEQ7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvRUFBb0UscUJBQXFCO0FBQ3pGO0FBQ0Esc0RBQXNELHFCQUFxQixHQUFHO0FBQzlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDO0FBQy9DO0FBQ0EsK0ZBQStGLG1CQUFtQjtBQUNsSDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkM7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksUUFBUTtBQUNwQjtBQUNBLGtDQUFrQyxPQUFPO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxRQUFRO0FBQ3BCO0FBQ0E7QUFDQSxvQ0FBb0MseUJBQXlCO0FBQzdELElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksUUFBUTtBQUNwQjtBQUNBO0FBQ0Esb0NBQW9DLHFCQUFxQjtBQUN6RCxJQUFJO0FBQ0o7QUFDQTtBQUNBLGFBQWE7QUFDYiIsInNvdXJjZXMiOlsiL1VzZXJzL2hhcnNoc2hyaXZhc3Rhdi9EZXNrdG9wL0NvZGluZyBQcm9qZWN0cy9Kb2ItQXNzaXN0YW50LUFnZW50L25vZGVfbW9kdWxlcy9pbm5nZXN0L2NvbXBvbmVudHMvRmV0Y2guanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmZldGNoID0gdm9pZCAwO1xuY29uc3QgZGVidWdfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiZGVidWdcIikpO1xuY29uc3QgYWxzX2pzXzEgPSByZXF1aXJlKFwiLi9leGVjdXRpb24vYWxzLmpzXCIpO1xuY29uc3QgSW5uZ2VzdFN0ZXBUb29sc19qc18xID0gcmVxdWlyZShcIi4vSW5uZ2VzdFN0ZXBUb29scy5qc1wiKTtcbmNvbnN0IGdsb2JhbEZldGNoID0gZ2xvYmFsVGhpcy5mZXRjaDtcbmNvbnN0IGRlYnVnID0gKDAsIGRlYnVnXzEuZGVmYXVsdCkoXCJpbm5nZXN0OmZldGNoXCIpO1xuY29uc3QgY3JlYXRlRmV0Y2hTaGltID0gKCkgPT4ge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItY29uc3RcbiAgICBsZXQgc3RlcEZldGNoO1xuICAgIGNvbnN0IGZldGNoID0gYXN5bmMgKGlucHV0LCBpbml0KSA9PiB7XG4gICAgICAgIGNvbnN0IGN0eCA9IGF3YWl0ICgwLCBhbHNfanNfMS5nZXRBc3luY0N0eCkoKTtcbiAgICAgICAgaWYgKCFjdHgpIHtcbiAgICAgICAgICAgIC8vIE5vdCBpbiBhIGZ1bmN0aW9uIHJ1blxuICAgICAgICAgICAgaWYgKCFzdGVwRmV0Y2guZmFsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAvLyBUT0RPIFRlbGwgdGhlIHVzZXIgaG93IHRvIHNvbHZlXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwic3RlcC5mZXRjaCgpIGNhbGxlZCBvdXRzaWRlIG9mIGEgZnVuY3Rpb24gYW5kIGhhZCBubyBmYWxsYmFjayBzZXRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWJ1ZyhcInN0ZXAuZmV0Y2goKSBjYWxsZWQgb3V0c2lkZSBvZiBhIGZ1bmN0aW9uOyBmYWxsaW5nIGJhY2sgdG8gZ2xvYmFsIGZldGNoXCIpO1xuICAgICAgICAgICAgcmV0dXJuIHN0ZXBGZXRjaC5mYWxsYmFjayhpbnB1dCwgaW5pdCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSW4gYSBmdW5jdGlvbiBydW5cbiAgICAgICAgaWYgKGN0eC5leGVjdXRpbmdTdGVwKSB7XG4gICAgICAgICAgICAvLyBJbnNpZGUgYSBzdGVwXG4gICAgICAgICAgICBpZiAoIXN0ZXBGZXRjaC5mYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIC8vIFRPRE8gVGVsbCB0aGUgdXNlciBob3cgdG8gc29sdmVcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHN0ZXAuZmV0Y2goKSBjYWxsZWQgaW5zaWRlIHN0ZXAgXCIke2N0eC5leGVjdXRpbmdTdGVwLmlkfVwiIGFuZCBoYWQgbm8gZmFsbGJhY2sgc2V0YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWJ1Zyhgc3RlcC5mZXRjaCgpIGNhbGxlZCBpbnNpZGUgc3RlcCBcIiR7Y3R4LmV4ZWN1dGluZ1N0ZXAuaWR9XCI7IGZhbGxpbmcgYmFjayB0byBnbG9iYWwgZmV0Y2hgKTtcbiAgICAgICAgICAgIHJldHVybiBzdGVwRmV0Y2guZmFsbGJhY2soaW5wdXQsIGluaXQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRhcmdldFVybCA9IG5ldyBVUkwoaW5wdXQgaW5zdGFuY2VvZiBSZXF1ZXN0ID8gaW5wdXQudXJsIDogaW5wdXQudG9TdHJpbmcoKSk7XG4gICAgICAgIGRlYnVnKFwic3RlcC5mZXRjaCgpIHNoaW1taW5nIHJlcXVlc3QgdG9cIiwgdGFyZ2V0VXJsLmhvc3RuYW1lKTtcbiAgICAgICAgLy8gUHVycG9zZWZ1bGx5IGRvIG5vdCB0cnkvY2FjdGggdGhpczsgaWYgaXQgdGhyb3dzIHRoZW4gd2UgdHJlYXQgdGhhdCBhcyBhXG4gICAgICAgIC8vIHJlZ3VsYXIgYGZldGNoKClgIHRocm93LCB3aGljaCBhbHNvIHdvdWxkIG5vdCByZXR1cm4gYSBgUmVzcG9uc2VgLlxuICAgICAgICBjb25zdCBqc29uUmVzID0gYXdhaXQgY3R4LmN0eC5zdGVwW0lubmdlc3RTdGVwVG9vbHNfanNfMS5nYXRld2F5U3ltYm9sXShgc3RlcC5mZXRjaDogJHt0YXJnZXRVcmwuaG9zdG5hbWV9YCwgaW5wdXQsIGluaXQpO1xuICAgICAgICByZXR1cm4gbmV3IFJlc3BvbnNlKGpzb25SZXMuYm9keSwge1xuICAgICAgICAgICAgaGVhZGVyczoganNvblJlcy5oZWFkZXJzLFxuICAgICAgICAgICAgc3RhdHVzOiBqc29uUmVzLnN0YXR1cyxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCBvcHRpb25zUmVmID0ge1xuICAgICAgICBmYWxsYmFjazogZ2xvYmFsRmV0Y2gsXG4gICAgfTtcbiAgICBjb25zdCBleHRyYXMgPSBPYmplY3QuYXNzaWduKHsgY29uZmlnOiAob3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihvcHRpb25zUmVmLCBvcHRpb25zKTtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oc3RlcEZldGNoLCBvcHRpb25zUmVmKTtcbiAgICAgICAgICAgIHJldHVybiBzdGVwRmV0Y2g7XG4gICAgICAgIH0gfSwgb3B0aW9uc1JlZik7XG4gICAgc3RlcEZldGNoID0gT2JqZWN0LmFzc2lnbihmZXRjaCwgZXh0cmFzKTtcbiAgICByZXR1cm4gc3RlcEZldGNoO1xufTtcbi8qKlxuICogYGZldGNoYCBpcyBhIEZldGNoIEFQSS1jb21wYXRpYmxlIGZ1bmN0aW9uIHRoYXQgY2FuIGJlIHVzZWQgdG8gbWFrZSBhbnkgSFRUUFxuICogY29kZSBkdXJhYmxlIGlmIGl0J3MgY2FsbGVkIHdpdGhpbiBhbiBJbm5nZXN0IGZ1bmN0aW9uLlxuICpcbiAqIEl0IHdpbGwgZ3JhY2VmdWxseSBmYWxsIGJhY2sgdG8gdGhlIGdsb2JhbCBgZmV0Y2hgIGlmIGNhbGxlZCBvdXRzaWRlIG9mIHRoaXNcbiAqIGNvbnRleHQsIGFuZCBhIGN1c3RvbSBmYWxsYmFjayBjYW4gYmUgc2V0IHVzaW5nIHRoZSBgY29uZmlnYCBtZXRob2QuXG4gKlxuICogQGV4YW1wbGUgQmFzaWMgdXNhZ2VcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBmZXRjaCB9IGZyb20gXCJpbm5nZXN0XCI7XG4gKlxuICogY29uc3QgYXBpID0gbmV3IE15UHJvZHVjdEFwaSh7IGZldGNoIH0pO1xuICogYGBgXG4gKlxuICogQGV4YW1wbGUgU2V0dGluZyBhIGN1c3RvbSBmYWxsYmFja1xuICogYGBgdHNcbiAqIGltcG9ydCB7IGZldGNoIH0gZnJvbSBcImlubmdlc3RcIjtcbiAqXG4gKiBjb25zdCBhcGkgPSBuZXcgTXlQcm9kdWN0QXBpKHtcbiAqICAgICAgICAgICAgZmV0Y2g6IGZldGNoLmNvbmZpZyh7IGZhbGxiYWNrOiBteUN1c3RvbUZldGNoIH0pLFxuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBAZXhhbXBsZSBEbyBub3QgYWxsb3cgZmFsbGJhY2tcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBmZXRjaCB9IGZyb20gXCJpbm5nZXN0XCI7XG4gKlxuICogY29uc3QgYXBpID0gbmV3IE15UHJvZHVjdEFwaSh7XG4gKiAgICAgICAgICAgIGZldGNoOiBmZXRjaC5jb25maWcoeyBmYWxsYmFjazogdW5kZWZpbmVkIH0pLFxuICogfSk7XG4gKiBgYGBcbiAqL1xuZXhwb3J0cy5mZXRjaCA9IGNyZWF0ZUZldGNoU2hpbSgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RmV0Y2guanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/Fetch.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/Inngest.js":
/*!****************************************************!*\
  !*** ./node_modules/inngest/components/Inngest.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.builtInMiddleware = exports.Inngest = void 0;\nconst api_js_1 = __webpack_require__(/*! ../api/api.js */ \"(rsc)/./node_modules/inngest/api/api.js\");\nconst consts_js_1 = __webpack_require__(/*! ../helpers/consts.js */ \"(rsc)/./node_modules/inngest/helpers/consts.js\");\nconst crypto_js_1 = __webpack_require__(/*! ../helpers/crypto.js */ \"(rsc)/./node_modules/inngest/helpers/crypto.js\");\nconst devserver_js_1 = __webpack_require__(/*! ../helpers/devserver.js */ \"(rsc)/./node_modules/inngest/helpers/devserver.js\");\nconst env_js_1 = __webpack_require__(/*! ../helpers/env.js */ \"(rsc)/./node_modules/inngest/helpers/env.js\");\nconst errors_js_1 = __webpack_require__(/*! ../helpers/errors.js */ \"(rsc)/./node_modules/inngest/helpers/errors.js\");\nconst promises_js_1 = __webpack_require__(/*! ../helpers/promises.js */ \"(rsc)/./node_modules/inngest/helpers/promises.js\");\nconst strings_js_1 = __webpack_require__(/*! ../helpers/strings.js */ \"(rsc)/./node_modules/inngest/helpers/strings.js\");\nconst logger_js_1 = __webpack_require__(/*! ../middleware/logger.js */ \"(rsc)/./node_modules/inngest/middleware/logger.js\");\nconst types_js_1 = __webpack_require__(/*! ../types.js */ \"(rsc)/./node_modules/inngest/types.js\");\nconst InngestFunction_js_1 = __webpack_require__(/*! ./InngestFunction.js */ \"(rsc)/./node_modules/inngest/components/InngestFunction.js\");\nconst InngestMiddleware_js_1 = __webpack_require__(/*! ./InngestMiddleware.js */ \"(rsc)/./node_modules/inngest/components/InngestMiddleware.js\");\n/**\n * A client used to interact with the Inngest API by sending or reacting to\n * events.\n *\n * To provide event typing, see {@link EventSchemas}.\n *\n * ```ts\n * const inngest = new Inngest({ id: \"my-app\" });\n *\n * // or to provide event typing too\n * const inngest = new Inngest({\n *   id: \"my-app\",\n *   schemas: new EventSchemas().fromRecord<{\n *     \"app/user.created\": {\n *       data: { userId: string };\n *     };\n *   }>(),\n * });\n * ```\n *\n * @public\n */\nclass Inngest {\n    get apiBaseUrl() {\n        return this._apiBaseUrl;\n    }\n    get eventBaseUrl() {\n        return this._eventBaseUrl;\n    }\n    get env() {\n        var _a;\n        return (_a = this.headers[consts_js_1.headerKeys.Environment]) !== null && _a !== void 0 ? _a : null;\n    }\n    get appVersion() {\n        return this._appVersion;\n    }\n    /**\n     * A client used to interact with the Inngest API by sending or reacting to\n     * events.\n     *\n     * To provide event typing, see {@link EventSchemas}.\n     *\n     * ```ts\n     * const inngest = new Inngest({ name: \"My App\" });\n     *\n     * // or to provide event typing too\n     * const inngest = new Inngest({\n     *   name: \"My App\",\n     *   schemas: new EventSchemas().fromRecord<{\n     *     \"app/user.created\": {\n     *       data: { userId: string };\n     *     };\n     *   }>(),\n     * });\n     * ```\n     */\n    constructor(options) {\n        /**\n         * Inngest event key, used to send events to Inngest Cloud.\n         */\n        this.eventKey = \"\";\n        /**\n         * The absolute URL of the Inngest Cloud API.\n         */\n        this.sendEventUrl = new URL(`e/${this.eventKey}`, consts_js_1.defaultInngestEventBaseUrl);\n        this.localFns = [];\n        this.createFunction = (rawOptions, rawTrigger, handler) => {\n            const fn = this._createFunction(rawOptions, rawTrigger, handler);\n            this.localFns.push(fn);\n            return fn;\n        };\n        this._createFunction = (rawOptions, rawTrigger, handler) => {\n            const options = this.sanitizeOptions(rawOptions);\n            const triggers = this.sanitizeTriggers(rawTrigger);\n            return new InngestFunction_js_1.InngestFunction(this, Object.assign(Object.assign({}, options), { triggers }), handler);\n        };\n        this.options = options;\n        const { id, fetch, logger = new logger_js_1.DefaultLogger(), middleware, isDev, schemas, appVersion, } = this.options;\n        if (!id) {\n            // TODO PrettyError\n            throw new Error(\"An `id` must be passed to create an Inngest instance.\");\n        }\n        this.id = id;\n        this._mode = (0, env_js_1.getMode)({\n            explicitMode: typeof isDev === \"boolean\" ? (isDev ? \"dev\" : \"cloud\") : undefined,\n        });\n        this.fetch = (0, env_js_1.getFetch)(fetch);\n        this.inngestApi = new api_js_1.InngestApi({\n            baseUrl: this.apiBaseUrl,\n            signingKey: (0, env_js_1.processEnv)(consts_js_1.envKeys.InngestSigningKey) || \"\",\n            signingKeyFallback: (0, env_js_1.processEnv)(consts_js_1.envKeys.InngestSigningKeyFallback),\n            fetch: this.fetch,\n            mode: this.mode,\n        });\n        this.schemas = schemas;\n        this.loadModeEnvVars();\n        this.logger = logger;\n        this.middleware = this.initializeMiddleware([\n            ...exports.builtInMiddleware,\n            ...(middleware || []),\n        ]);\n        this._appVersion = appVersion;\n    }\n    /**\n     * Returns a `Promise` that resolves when the app is ready and all middleware\n     * has been initialized.\n     */\n    get ready() {\n        return this.middleware.then(() => { });\n    }\n    /**\n     * Set the environment variables for this client. This is useful if you are\n     * passed environment variables at runtime instead of as globals and need to\n     * update the client with those values as requests come in.\n     */\n    setEnvVars(env = (0, env_js_1.allProcessEnv)()) {\n        this.mode = (0, env_js_1.getMode)({ env, client: this });\n        return this;\n    }\n    loadModeEnvVars() {\n        this._apiBaseUrl =\n            this.options.baseUrl ||\n                this.mode[\"env\"][consts_js_1.envKeys.InngestApiBaseUrl] ||\n                this.mode[\"env\"][consts_js_1.envKeys.InngestBaseUrl] ||\n                this.mode.getExplicitUrl(consts_js_1.defaultInngestApiBaseUrl);\n        this._eventBaseUrl =\n            this.options.baseUrl ||\n                this.mode[\"env\"][consts_js_1.envKeys.InngestEventApiBaseUrl] ||\n                this.mode[\"env\"][consts_js_1.envKeys.InngestBaseUrl] ||\n                this.mode.getExplicitUrl(consts_js_1.defaultInngestEventBaseUrl);\n        this.setEventKey(this.options.eventKey || this.mode[\"env\"][consts_js_1.envKeys.InngestEventKey] || \"\");\n        this.headers = (0, env_js_1.inngestHeaders)({\n            inngestEnv: this.options.env,\n            env: this.mode[\"env\"],\n        });\n        this.inngestApi[\"mode\"] = this.mode;\n        this.inngestApi[\"apiBaseUrl\"] = this._apiBaseUrl;\n    }\n    /**\n     * Initialize all passed middleware, running the `register` function on each\n     * in sequence and returning the requested hook registrations.\n     */\n    async initializeMiddleware(middleware = [], opts) {\n        var _a;\n        /**\n         * Wait for the prefix stack to run first; do not trigger ours before this\n         * is complete.\n         */\n        const prefix = await ((_a = opts === null || opts === void 0 ? void 0 : opts.prefixStack) !== null && _a !== void 0 ? _a : []);\n        const stack = middleware.reduce(async (acc, m) => {\n            // Be explicit about waiting for the previous middleware to finish\n            const prev = await acc;\n            const next = await m.init(Object.assign({ client: this }, opts === null || opts === void 0 ? void 0 : opts.registerInput));\n            return [...prev, next];\n        }, Promise.resolve([]));\n        return [...prefix, ...(await stack)];\n    }\n    get mode() {\n        return this._mode;\n    }\n    set mode(m) {\n        this._mode = m;\n        this.loadModeEnvVars();\n    }\n    /**\n     * Given a response from Inngest, relay the error to the caller.\n     */\n    async getResponseError(response, rawBody, foundErr = \"Unknown error\") {\n        let errorMessage = foundErr;\n        if (errorMessage === \"Unknown error\") {\n            switch (response.status) {\n                case 401:\n                    errorMessage = \"Event key Not Found\";\n                    break;\n                case 400:\n                    errorMessage = \"Cannot process event payload\";\n                    break;\n                case 403:\n                    errorMessage = \"Forbidden\";\n                    break;\n                case 404:\n                    errorMessage = \"Event key not found\";\n                    break;\n                case 406:\n                    errorMessage = `${JSON.stringify(await rawBody)}`;\n                    break;\n                case 409:\n                case 412:\n                    errorMessage = \"Event transformation failed\";\n                    break;\n                case 413:\n                    errorMessage = \"Event payload too large\";\n                    break;\n                case 500:\n                    errorMessage = \"Internal server error\";\n                    break;\n                default:\n                    try {\n                        errorMessage = await response.text();\n                    }\n                    catch (err) {\n                        errorMessage = `${JSON.stringify(await rawBody)}`;\n                    }\n                    break;\n            }\n        }\n        return new Error(`Inngest API Error: ${response.status} ${errorMessage}`);\n    }\n    /**\n     * Set the event key for this instance of Inngest. This is useful if for some\n     * reason the key is not available at time of instantiation or present in the\n     * `INNGEST_EVENT_KEY` environment variable.\n     */\n    setEventKey(\n    /**\n     * Inngest event key, used to send events to Inngest Cloud. Use this is your\n     * key is for some reason not available at time of instantiation or present\n     * in the `INNGEST_EVENT_KEY` environment variable.\n     */\n    eventKey) {\n        this.eventKey = eventKey || consts_js_1.dummyEventKey;\n        this.sendEventUrl = new URL(`e/${this.eventKey}`, this.eventBaseUrl || consts_js_1.defaultInngestEventBaseUrl);\n    }\n    eventKeySet() {\n        return Boolean(this.eventKey) && this.eventKey !== consts_js_1.dummyEventKey;\n    }\n    /**\n     * EXPERIMENTAL: This API is not yet stable and may change in the future\n     * without a major version bump.\n     *\n     * Send a Signal to Inngest.\n     */\n    async sendSignal({ signal, data, env, }) {\n        const headers = Object.assign({}, (env ? { [consts_js_1.headerKeys.Environment]: env } : {}));\n        return this._sendSignal({ signal, data, headers });\n    }\n    async _sendSignal({ signal, data, headers, }) {\n        var _a;\n        const res = await this.inngestApi.sendSignal({ signal, data }, Object.assign(Object.assign({}, this.headers), headers));\n        if (res.ok) {\n            return res.value;\n        }\n        throw new Error(`Failed to send signal: ${((_a = res.error) === null || _a === void 0 ? void 0 : _a.error) || \"Unknown error\"}`);\n    }\n    /**\n     * Send one or many events to Inngest. Takes an entire payload (including\n     * name) as each input.\n     *\n     * ```ts\n     * await inngest.send({ name: \"app/user.created\", data: { id: 123 } });\n     * ```\n     *\n     * Returns a promise that will resolve if the event(s) were sent successfully,\n     * else throws with an error explaining what went wrong.\n     *\n     * If you wish to send an event with custom types (i.e. one that hasn't been\n     * generated), make sure to add it when creating your Inngest instance, like\n     * so:\n     *\n     * ```ts\n     * const inngest = new Inngest({\n     *   name: \"My App\",\n     *   schemas: new EventSchemas().fromRecord<{\n     *     \"my/event\": {\n     *       name: \"my/event\";\n     *       data: { bar: string };\n     *     };\n     *   }>(),\n     * });\n     * ```\n     */\n    async send(payload, options) {\n        const headers = Object.assign({}, ((options === null || options === void 0 ? void 0 : options.env) ? { [consts_js_1.headerKeys.Environment]: options.env } : {}));\n        return this._send({ payload, headers });\n    }\n    /**\n     * Internal method for sending an event, used to allow Inngest internals to\n     * further customize the request sent to an Inngest Server.\n     */\n    async _send({ payload, headers, }) {\n        var _a;\n        const nowMillis = new Date().getTime();\n        let maxAttempts = 5;\n        // Attempt to set the event ID seed header. If it fails then disable retries\n        // (but we still want to send the event).\n        try {\n            const entropy = (0, crypto_js_1.createEntropy)(10);\n            const entropyBase64 = Buffer.from(entropy).toString(\"base64\");\n            headers = Object.assign(Object.assign({}, headers), { [consts_js_1.headerKeys.EventIdSeed]: `${nowMillis},${entropyBase64}` });\n        }\n        catch (err) {\n            let message = \"Event-sending retries disabled\";\n            if (err instanceof Error) {\n                message += `: ${err.message}`;\n            }\n            console.debug(message);\n            // Disable retries.\n            maxAttempts = 1;\n        }\n        const hooks = await (0, InngestMiddleware_js_1.getHookStack)(this.middleware, \"onSendEvent\", undefined, {\n            transformInput: (prev, output) => {\n                return Object.assign(Object.assign({}, prev), output);\n            },\n            transformOutput(prev, output) {\n                return {\n                    result: Object.assign(Object.assign({}, prev.result), output === null || output === void 0 ? void 0 : output.result),\n                };\n            },\n        });\n        let payloads = Array.isArray(payload)\n            ? payload\n            : payload\n                ? [payload]\n                : [];\n        const inputChanges = await ((_a = hooks.transformInput) === null || _a === void 0 ? void 0 : _a.call(hooks, {\n            payloads: [...payloads],\n        }));\n        if (inputChanges === null || inputChanges === void 0 ? void 0 : inputChanges.payloads) {\n            payloads = [...inputChanges.payloads];\n        }\n        // Ensure that we always add \"ts\" and \"data\" fields to events. \"ts\" is auto-\n        // filled by the event server so is safe, and adding here fixes Next.js\n        // server action cache issues.\n        payloads = payloads.map((p) => {\n            return Object.assign(Object.assign({}, p), { \n                // Always generate an idempotency ID for an event for retries\n                id: p.id, ts: p.ts || nowMillis, \n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                data: p.data || {} });\n        });\n        const applyHookToOutput = async (arg) => {\n            var _a;\n            const hookOutput = await ((_a = hooks.transformOutput) === null || _a === void 0 ? void 0 : _a.call(hooks, arg));\n            return Object.assign(Object.assign({}, arg.result), hookOutput === null || hookOutput === void 0 ? void 0 : hookOutput.result);\n        };\n        /**\n         * It can be valid for a user to send an empty list of events; if this\n         * happens, show a warning that this may not be intended, but don't throw.\n         */\n        if (!payloads.length) {\n            console.warn((0, errors_js_1.prettyError)({\n                type: \"warn\",\n                whatHappened: \"`inngest.send()` called with no events\",\n                reassurance: \"This is not an error, but you may not have intended to do this.\",\n                consequences: \"The returned promise will resolve, but no events have been sent to Inngest.\",\n                stack: true,\n            }));\n            return await applyHookToOutput({ result: { ids: [] } });\n        }\n        // When sending events, check if the dev server is available.  If so, use the\n        // dev server.\n        let url = this.sendEventUrl.href;\n        /**\n         * If in prod mode and key is not present, fail now.\n         */\n        if (this.mode.isCloud && !this.eventKeySet()) {\n            throw new Error((0, errors_js_1.prettyError)({\n                whatHappened: \"Failed to send event\",\n                consequences: \"Your event or events were not sent to Inngest.\",\n                why: \"We couldn't find an event key to use to send events to Inngest.\",\n                toFixNow: errors_js_1.fixEventKeyMissingSteps,\n            }));\n        }\n        /**\n         * If dev mode has been inferred, try to hit the dev server first to see if\n         * it exists. If it does, use it, otherwise fall back to whatever server we\n         * have configured.\n         *\n         * `INNGEST_BASE_URL` is used to set both dev server and prod URLs, so if a\n         * user has set this it means they have already chosen a URL to hit.\n         */\n        if (this.mode.isDev && this.mode.isInferred && !this.eventBaseUrl) {\n            const devAvailable = await (0, devserver_js_1.devServerAvailable)(consts_js_1.defaultDevServerHost, this.fetch);\n            if (devAvailable) {\n                url = (0, devserver_js_1.devServerUrl)(consts_js_1.defaultDevServerHost, `e/${this.eventKey}`).href;\n            }\n        }\n        const body = await (0, promises_js_1.retryWithBackoff)(async () => {\n            let rawBody;\n            let body;\n            // We don't need to do fallback auth here because this uses event keys and\n            // not signing keys\n            const response = await this.fetch(url, {\n                method: \"POST\",\n                body: (0, strings_js_1.stringify)(payloads),\n                headers: Object.assign(Object.assign({}, this.headers), headers),\n            });\n            try {\n                rawBody = await response.json();\n                body = await types_js_1.sendEventResponseSchema.parseAsync(rawBody);\n            }\n            catch (err) {\n                throw await this.getResponseError(response, rawBody);\n            }\n            if (body.status !== 200 || body.error) {\n                throw await this.getResponseError(response, rawBody, body.error);\n            }\n            return body;\n        }, {\n            maxAttempts,\n            baseDelay: 100,\n        });\n        return await applyHookToOutput({ result: { ids: body.ids } });\n    }\n    get funcs() {\n        return this.localFns;\n    }\n    /**\n     * Runtime-only validation.\n     */\n    sanitizeOptions(options) {\n        if (Object.prototype.hasOwnProperty.call(options, \"fns\")) {\n            // v2 -> v3 migration warning\n            console.warn(`${consts_js_1.logPrefix} InngestFunction: \\`fns\\` option has been deprecated in v3; use \\`middleware\\` instead. See https://www.inngest.com/docs/sdk/migration`);\n        }\n        if (typeof options === \"string\") {\n            // v2 -> v3 runtime migraton warning\n            console.warn(`${consts_js_1.logPrefix} InngestFunction: Creating a function with a string as the first argument has been deprecated in v3; pass an object instead. See https://www.inngest.com/docs/sdk/migration`);\n            return { id: options };\n        }\n        return options;\n    }\n    /**\n     * Runtime-only validation.\n     */\n    sanitizeTriggers(triggers) {\n        if (typeof triggers === \"string\") {\n            // v2 -> v3 migration warning\n            console.warn(`${consts_js_1.logPrefix} InngestFunction: Creating a function with a string as the second argument has been deprecated in v3; pass an object instead. See https://www.inngest.com/docs/sdk/migration`);\n            return [{ event: triggers }];\n        }\n        if (!Array.isArray(triggers)) {\n            return [triggers];\n        }\n        return triggers;\n    }\n}\nexports.Inngest = Inngest;\n/**\n * Default middleware that is included in every client, placed after the user's\n * middleware on the client but before function-level middleware.\n *\n * It is defined here to ensure that comments are included in the generated TS\n * definitions. Without this, we infer the stack of built-in middleware without\n * comments, losing a lot of value.\n *\n * If this is moved, please ensure that using this package in another project\n * can correctly access comments on mutated input and output.\n *\n * This return pattern mimics the output of a `satisfies` suffix; it's used as\n * we support versions of TypeScript prior to the introduction of `satisfies`.\n */\nexports.builtInMiddleware = ((m) => m)([\n    new InngestMiddleware_js_1.InngestMiddleware({\n        name: \"Inngest: Logger\",\n        init({ client }) {\n            return {\n                onFunctionRun(arg) {\n                    const { ctx } = arg;\n                    const metadata = {\n                        runID: ctx.runId,\n                        eventName: ctx.event.name,\n                        functionName: arg.fn.name,\n                    };\n                    let providedLogger = client[\"logger\"];\n                    // create a child logger if the provided logger has child logger implementation\n                    try {\n                        if (\"child\" in providedLogger) {\n                            providedLogger = providedLogger.child(metadata);\n                        }\n                    }\n                    catch (err) {\n                        console.error('failed to create \"childLogger\" with error: ', err);\n                        // no-op\n                    }\n                    const logger = new logger_js_1.ProxyLogger(providedLogger);\n                    return {\n                        transformInput() {\n                            return {\n                                ctx: {\n                                    /**\n                                     * The passed in logger from the user.\n                                     * Defaults to a console logger if not provided.\n                                     */\n                                    logger: logger,\n                                },\n                            };\n                        },\n                        beforeExecution() {\n                            logger.enable();\n                        },\n                        transformOutput({ result: { error } }) {\n                            if (error) {\n                                logger.error(error);\n                            }\n                        },\n                        async beforeResponse() {\n                            await logger.flush();\n                        },\n                    };\n                },\n            };\n        },\n    }),\n]);\n//# sourceMappingURL=Inngest.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/Inngest.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/InngestCommHandler.js":
/*!***************************************************************!*\
  !*** ./node_modules/inngest/components/InngestCommHandler.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _RequestSignature_instances, _RequestSignature_verifySignature;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.InngestCommHandler = void 0;\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\"));\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nconst ServerTiming_js_1 = __webpack_require__(/*! ../helpers/ServerTiming.js */ \"(rsc)/./node_modules/inngest/helpers/ServerTiming.js\");\nconst consts_js_1 = __webpack_require__(/*! ../helpers/consts.js */ \"(rsc)/./node_modules/inngest/helpers/consts.js\");\nconst devserver_js_1 = __webpack_require__(/*! ../helpers/devserver.js */ \"(rsc)/./node_modules/inngest/helpers/devserver.js\");\nconst enum_js_1 = __webpack_require__(/*! ../helpers/enum.js */ \"(rsc)/./node_modules/inngest/helpers/enum.js\");\nconst env_js_1 = __webpack_require__(/*! ../helpers/env.js */ \"(rsc)/./node_modules/inngest/helpers/env.js\");\nconst errors_js_1 = __webpack_require__(/*! ../helpers/errors.js */ \"(rsc)/./node_modules/inngest/helpers/errors.js\");\nconst functions_js_1 = __webpack_require__(/*! ../helpers/functions.js */ \"(rsc)/./node_modules/inngest/helpers/functions.js\");\nconst net_js_1 = __webpack_require__(/*! ../helpers/net.js */ \"(rsc)/./node_modules/inngest/helpers/net.js\");\nconst promises_js_1 = __webpack_require__(/*! ../helpers/promises.js */ \"(rsc)/./node_modules/inngest/helpers/promises.js\");\nconst stream_js_1 = __webpack_require__(/*! ../helpers/stream.js */ \"(rsc)/./node_modules/inngest/helpers/stream.js\");\nconst strings_js_1 = __webpack_require__(/*! ../helpers/strings.js */ \"(rsc)/./node_modules/inngest/helpers/strings.js\");\nconst types_js_1 = __webpack_require__(/*! ../types.js */ \"(rsc)/./node_modules/inngest/types.js\");\nconst version_js_1 = __webpack_require__(/*! ../version.js */ \"(rsc)/./node_modules/inngest/version.js\");\nconst InngestExecution_js_1 = __webpack_require__(/*! ./execution/InngestExecution.js */ \"(rsc)/./node_modules/inngest/components/execution/InngestExecution.js\");\n/**\n * A schema for the response from Inngest when registering.\n */\nconst registerResSchema = zod_1.z.object({\n    status: zod_1.z.number().default(200),\n    skipped: zod_1.z.boolean().optional().default(false),\n    modified: zod_1.z.boolean().optional().default(false),\n    error: zod_1.z.string().default(\"Successfully registered\"),\n});\n/**\n * `InngestCommHandler` is a class for handling incoming requests from Inngest (or\n * Inngest's tooling such as the dev server or CLI) and taking appropriate\n * action for any served functions.\n *\n * All handlers (Next.js, RedwoodJS, Remix, Deno Fresh, etc.) are created using\n * this class; the exposed `serve` function will - most commonly - create an\n * instance of `InngestCommHandler` and then return `instance.createHandler()`.\n *\n * See individual parameter details for more information, or see the\n * source code for an existing handler, e.g.\n * {@link https://github.com/inngest/inngest-js/blob/main/src/next.ts}\n *\n * @example\n * ```\n * // my-custom-handler.ts\n * import {\n *   InngestCommHandler,\n *   type ServeHandlerOptions,\n * } from \"./components/InngestCommHandler\";\n *\n * export const serve = (options: ServeHandlerOptions) => {\n *   const handler = new InngestCommHandler({\n *     frameworkName: \"my-custom-handler\",\n *     ...options,\n *     handler: (req: Request) => {\n *       return {\n *         body: () => req.json(),\n *         headers: (key) => req.headers.get(key),\n *         method: () => req.method,\n *         url: () => new URL(req.url, `https://${req.headers.get(\"host\") || \"\"}`),\n *         transformResponse: ({ body, status, headers }) => {\n *           return new Response(body, { status, headers });\n *         },\n *       };\n *     },\n *   });\n *\n *   return handler.createHandler();\n * };\n * ```\n *\n * @public\n */\nclass InngestCommHandler {\n    constructor(options) {\n        var _a;\n        /**\n         * A private collection of functions that are being served. This map is used\n         * to find and register functions when interacting with Inngest Cloud.\n         */\n        this.fns = {};\n        this.env = (0, env_js_1.allProcessEnv)();\n        // Set input options directly so we can reference them later\n        this._options = options;\n        /**\n         * v2 -> v3 migration error.\n         *\n         * If a serve handler is passed a client as the first argument, it'll be\n         * spread in to these options. We should be able to detect this by picking\n         * up a unique property on the object.\n         */\n        if (Object.prototype.hasOwnProperty.call(options, \"eventKey\")) {\n            throw new Error(`${consts_js_1.logPrefix} You've passed an Inngest client as the first argument to your serve handler. This is no longer supported in v3; please pass the Inngest client as the \\`client\\` property of an options object instead. See https://www.inngest.com/docs/sdk/migration`);\n        }\n        this.frameworkName = options.frameworkName;\n        this.client = options.client;\n        if (options.id) {\n            console.warn(`${consts_js_1.logPrefix} The \\`id\\` serve option is deprecated and will be removed in v4`);\n        }\n        this.id = options.id || this.client.id;\n        this.handler = options.handler;\n        /**\n         * Provide a hidden option to allow expired signatures to be accepted during\n         * testing.\n         */\n        this.allowExpiredSignatures = Boolean(\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, prefer-rest-params\n        (_a = arguments[\"0\"]) === null || _a === void 0 ? void 0 : _a.__testingAllowExpiredSignatures);\n        // Ensure we filter any undefined functions in case of missing imports.\n        this.rawFns = options.functions.filter(Boolean);\n        if (this.rawFns.length !== options.functions.length) {\n            // TODO PrettyError\n            console.warn(`Some functions passed to serve() are undefined and misconfigured.  Please check your imports.`);\n        }\n        this.fns = this.rawFns.reduce((acc, fn) => {\n            const configs = fn[\"getConfig\"]({\n                baseUrl: new URL(\"https://example.com\"),\n                appPrefix: this.id,\n            });\n            const fns = configs.reduce((acc, { id }, index) => {\n                return Object.assign(Object.assign({}, acc), { [id]: { fn, onFailure: Boolean(index) } });\n            }, {});\n            configs.forEach(({ id }) => {\n                if (acc[id]) {\n                    // TODO PrettyError\n                    throw new Error(`Duplicate function ID \"${id}\"; please change a function's name or provide an explicit ID to avoid conflicts.`);\n                }\n            });\n            return Object.assign(Object.assign({}, acc), fns);\n        }, {});\n        this.inngestRegisterUrl = new URL(\"/fn/register\", this.apiBaseUrl);\n        this.signingKey = options.signingKey;\n        this.signingKeyFallback = options.signingKeyFallback;\n        this._serveHost = options.serveHost || this.env[consts_js_1.envKeys.InngestServeHost];\n        this._servePath = options.servePath || this.env[consts_js_1.envKeys.InngestServePath];\n        this.skipSignatureValidation = options.skipSignatureValidation || false;\n        const defaultLogLevel = \"info\";\n        this.logLevel = zod_1.z\n            .enum(types_js_1.logLevels)\n            .default(defaultLogLevel)\n            .catch((ctx) => {\n            this.log(\"warn\", `Unknown log level passed: ${String(ctx.input)}; defaulting to ${defaultLogLevel}`);\n            return defaultLogLevel;\n        })\n            .parse(options.logLevel || this.env[consts_js_1.envKeys.InngestLogLevel]);\n        if (this.logLevel === \"debug\") {\n            /**\n             * `debug` is an old library; sometimes its runtime detection doesn't work\n             * for newer pairings of framework/runtime.\n             *\n             * One silly symptom of this is that `Debug()` returns an anonymous\n             * function with no extra properties instead of a `Debugger` instance if\n             * the wrong code is consumed following a bad detection. This results in\n             * the following `.enable()` call failing, so we just try carefully to\n             * enable it here.\n             */\n            if (debug_1.default.enable && typeof debug_1.default.enable === \"function\") {\n                debug_1.default.enable(`${consts_js_1.debugPrefix}:*`);\n            }\n        }\n        const defaultStreamingOption = false;\n        this.streaming = zod_1.z\n            .union([zod_1.z.enum([\"allow\", \"force\"]), zod_1.z.literal(false)])\n            .default(defaultStreamingOption)\n            .catch((ctx) => {\n            this.log(\"warn\", `Unknown streaming option passed: ${String(ctx.input)}; defaulting to ${String(defaultStreamingOption)}`);\n            return defaultStreamingOption;\n        })\n            .parse(options.streaming || this.env[consts_js_1.envKeys.InngestStreaming]);\n        this.fetch = options.fetch ? (0, env_js_1.getFetch)(options.fetch) : this.client[\"fetch\"];\n    }\n    /**\n     * Get the API base URL for the Inngest API.\n     *\n     * This is a getter to encourage checking the environment for the API base URL\n     * each time it's accessed, as it may change during execution.\n     */\n    get apiBaseUrl() {\n        return (this._options.baseUrl ||\n            this.env[consts_js_1.envKeys.InngestApiBaseUrl] ||\n            this.env[consts_js_1.envKeys.InngestBaseUrl] ||\n            this.client.apiBaseUrl ||\n            consts_js_1.defaultInngestApiBaseUrl);\n    }\n    /**\n     * Get the event API base URL for the Inngest API.\n     *\n     * This is a getter to encourage checking the environment for the event API\n     * base URL each time it's accessed, as it may change during execution.\n     */\n    get eventApiBaseUrl() {\n        return (this._options.baseUrl ||\n            this.env[consts_js_1.envKeys.InngestEventApiBaseUrl] ||\n            this.env[consts_js_1.envKeys.InngestBaseUrl] ||\n            this.client.eventBaseUrl ||\n            consts_js_1.defaultInngestEventBaseUrl);\n    }\n    /**\n     * The host used to access the Inngest serve endpoint, e.g.:\n     *\n     *     \"https://myapp.com\"\n     *\n     * By default, the library will try to infer this using request details such\n     * as the \"Host\" header and request path, but sometimes this isn't possible\n     * (e.g. when running in a more controlled environments such as AWS Lambda or\n     * when dealing with proxies/redirects).\n     *\n     * Provide the custom hostname here to ensure that the path is reported\n     * correctly when registering functions with Inngest.\n     *\n     * To also provide a custom path, use `servePath`.\n     */\n    get serveHost() {\n        return this._serveHost || this.env[consts_js_1.envKeys.InngestServeHost];\n    }\n    /**\n     * The path to the Inngest serve endpoint. e.g.:\n     *\n     *     \"/some/long/path/to/inngest/endpoint\"\n     *\n     * By default, the library will try to infer this using request details such\n     * as the \"Host\" header and request path, but sometimes this isn't possible\n     * (e.g. when running in a more controlled environments such as AWS Lambda or\n     * when dealing with proxies/redirects).\n     *\n     * Provide the custom path (excluding the hostname) here to ensure that the\n     * path is reported correctly when registering functions with Inngest.\n     *\n     * To also provide a custom hostname, use `serveHost`.\n     *\n     * This is a getter to encourage checking the environment for the serve path\n     * each time it's accessed, as it may change during execution.\n     */\n    get servePath() {\n        return this._servePath || this.env[consts_js_1.envKeys.InngestServePath];\n    }\n    get hashedEventKey() {\n        if (!this.client[\"eventKey\"] || this.client[\"eventKey\"] === consts_js_1.dummyEventKey) {\n            return undefined;\n        }\n        return (0, strings_js_1.hashEventKey)(this.client[\"eventKey\"]);\n    }\n    // hashedSigningKey creates a sha256 checksum of the signing key with the\n    // same signing key prefix.\n    get hashedSigningKey() {\n        if (!this.signingKey) {\n            return undefined;\n        }\n        return (0, strings_js_1.hashSigningKey)(this.signingKey);\n    }\n    get hashedSigningKeyFallback() {\n        if (!this.signingKeyFallback) {\n            return undefined;\n        }\n        return (0, strings_js_1.hashSigningKey)(this.signingKeyFallback);\n    }\n    /**\n     * Returns a `boolean` representing whether this handler will stream responses\n     * or not. Takes into account the user's preference and the platform's\n     * capabilities.\n     */\n    async shouldStream(actions) {\n        const rawProbe = await actions.queryStringWithDefaults(\"testing for probe\", consts_js_1.queryKeys.Probe);\n        if (rawProbe !== undefined) {\n            return false;\n        }\n        // We must be able to stream responses to continue.\n        if (!actions.transformStreamingResponse) {\n            return false;\n        }\n        // If the user has forced streaming, we should always stream.\n        if (this.streaming === \"force\") {\n            return true;\n        }\n        // If the user has allowed streaming, we should stream if the platform\n        // supports it.\n        return (this.streaming === \"allow\" &&\n            (0, env_js_1.platformSupportsStreaming)(this.frameworkName, this.env));\n    }\n    /**\n     * `createHandler` should be used to return a type-equivalent version of the\n     * `handler` specified during instantiation.\n     *\n     * @example\n     * ```\n     * // my-custom-handler.ts\n     * import {\n     *   InngestCommHandler,\n     *   type ServeHandlerOptions,\n     * } from \"./components/InngestCommHandler\";\n     *\n     * export const serve = (options: ServeHandlerOptions) => {\n     *   const handler = new InngestCommHandler({\n     *     frameworkName: \"my-custom-handler\",\n     *     ...options,\n     *     handler: (req: Request) => {\n     *       return {\n     *         body: () => req.json(),\n     *         headers: (key) => req.headers.get(key),\n     *         method: () => req.method,\n     *         url: () => new URL(req.url, `https://${req.headers.get(\"host\") || \"\"}`),\n     *         transformResponse: ({ body, status, headers }) => {\n     *           return new Response(body, { status, headers });\n     *         },\n     *       };\n     *     },\n     *   });\n     *\n     *   return handler.createHandler();\n     * };\n     * ```\n     */\n    createHandler() {\n        const handler = async (...args) => {\n            var _a, _b;\n            const timer = new ServerTiming_js_1.ServerTiming();\n            /**\n             * Used for testing, allow setting action overrides externally when\n             * calling the handler. Always search the final argument.\n             */\n            const lastArg = args[args.length - 1];\n            const actionOverrides = typeof lastArg === \"object\" &&\n                lastArg !== null &&\n                \"actionOverrides\" in lastArg &&\n                typeof lastArg[\"actionOverrides\"] === \"object\" &&\n                lastArg[\"actionOverrides\"] !== null\n                ? lastArg[\"actionOverrides\"]\n                : {};\n            /**\n             * We purposefully `await` the handler, as it could be either sync or\n             * async.\n             */\n            const rawActions = Object.assign(Object.assign({}, (await timer\n                .wrap(\"handler\", () => this.handler(...args))\n                .catch((0, errors_js_1.rethrowError)(\"Serve handler failed to run\")))), actionOverrides);\n            /**\n             * Map over every `action` in `rawActions` and create a new `actions`\n             * object where each function is safely promisified with each access\n             * requiring a reason.\n             *\n             * This helps us provide high quality errors about what's going wrong for\n             * each access without having to wrap every access in a try/catch.\n             */\n            const promisifiedActions = Object.entries(rawActions).reduce((acc, [key, value]) => {\n                if (typeof value !== \"function\") {\n                    return acc;\n                }\n                return Object.assign(Object.assign({}, acc), { [key]: (reason, ...args) => {\n                        const errMessage = [\n                            `Failed calling \\`${key}\\` from serve handler`,\n                            reason,\n                        ]\n                            .filter(Boolean)\n                            .join(\" when \");\n                        const fn = () => value(...args);\n                        return (0, promises_js_1.runAsPromise)(fn)\n                            .catch((0, errors_js_1.rethrowError)(errMessage))\n                            .catch((err) => {\n                            this.log(\"error\", err);\n                            throw err;\n                        });\n                    } });\n            }, {});\n            /**\n             * Mapped promisified handlers from userland `serve()` function mixed in\n             * with some helpers.\n             */\n            const actions = Object.assign(Object.assign(Object.assign({}, promisifiedActions), { queryStringWithDefaults: async (reason, key) => {\n                    var _a;\n                    const url = await actions.url(reason);\n                    const ret = (await ((_a = actions.queryString) === null || _a === void 0 ? void 0 : _a.call(actions, reason, key, url))) ||\n                        url.searchParams.get(key) ||\n                        undefined;\n                    return ret;\n                } }), actionOverrides);\n            const [env, expectedServerKind] = await Promise.all([\n                (_a = actions.env) === null || _a === void 0 ? void 0 : _a.call(actions, \"starting to handle request\"),\n                actions.headers(\"checking expected server kind\", consts_js_1.headerKeys.InngestServerKind),\n            ]);\n            // Always make sure to merge whatever env we've been given with\n            // `process.env`; some platforms may not provide all the necessary\n            // environment variables or may use two sources.\n            this.env = Object.assign(Object.assign({}, (0, env_js_1.allProcessEnv)()), env);\n            const getInngestHeaders = () => (0, env_js_1.inngestHeaders)({\n                env: this.env,\n                framework: this.frameworkName,\n                client: this.client,\n                expectedServerKind: expectedServerKind || undefined,\n                extras: {\n                    \"Server-Timing\": timer.getHeader(),\n                },\n            });\n            const assumedMode = (0, env_js_1.getMode)({ env: this.env, client: this.client });\n            if (assumedMode.isExplicit) {\n                this._mode = assumedMode;\n            }\n            else {\n                const serveIsProd = await ((_b = actions.isProduction) === null || _b === void 0 ? void 0 : _b.call(actions, \"starting to handle request\"));\n                if (typeof serveIsProd === \"boolean\") {\n                    this._mode = new env_js_1.Mode({\n                        type: serveIsProd ? \"cloud\" : \"dev\",\n                        isExplicit: false,\n                    });\n                }\n                else {\n                    this._mode = assumedMode;\n                }\n            }\n            this.upsertKeysFromEnv();\n            const methodP = actions.method(\"starting to handle request\");\n            const headerPromises = [\n                consts_js_1.headerKeys.TraceParent,\n                consts_js_1.headerKeys.TraceState,\n            ].map(async (header) => {\n                const value = await actions.headers(`fetching ${header} for forwarding`, header);\n                return { header, value };\n            });\n            const contentLength = await actions\n                .headers(\"checking signature for request\", consts_js_1.headerKeys.ContentLength)\n                .then((value) => {\n                if (!value) {\n                    return undefined;\n                }\n                return parseInt(value, 10);\n            });\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const [signature, method, body] = await Promise.all([\n                actions\n                    .headers(\"checking signature for request\", consts_js_1.headerKeys.Signature)\n                    .then((headerSignature) => {\n                    return headerSignature !== null && headerSignature !== void 0 ? headerSignature : undefined;\n                }),\n                methodP,\n                methodP.then((method) => {\n                    if (method === \"POST\" || method === \"PUT\") {\n                        if (!contentLength) {\n                            // Return empty string because req.json() will throw an error.\n                            return \"\";\n                        }\n                        return actions.body(`checking body for request signing as method is ${method}`);\n                    }\n                    return \"\";\n                }),\n            ]);\n            const signatureValidation = this.validateSignature(signature, body);\n            const headersToForwardP = Promise.all(headerPromises).then((fetchedHeaders) => {\n                return fetchedHeaders.reduce((acc, { header, value }) => {\n                    if (value) {\n                        acc[header] = value;\n                    }\n                    return acc;\n                }, {});\n            });\n            const actionRes = timer.wrap(\"action\", () => this.handleAction({\n                actions,\n                timer,\n                getInngestHeaders,\n                reqArgs: args,\n                signatureValidation,\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                body,\n                method,\n                headers: headersToForwardP,\n            }));\n            /**\n             * Prepares an action response by merging returned data to provide\n             * trailing information such as `Server-Timing` headers.\n             *\n             * It should always prioritize the headers returned by the action, as they\n             * may contain important information such as `Content-Type`.\n             */\n            const prepareActionRes = async (res) => {\n                var _a;\n                const headers = Object.assign(Object.assign(Object.assign(Object.assign({}, getInngestHeaders()), (await headersToForwardP)), res.headers), (res.version === null\n                    ? {}\n                    : {\n                        [consts_js_1.headerKeys.RequestVersion]: ((_a = res.version) !== null && _a !== void 0 ? _a : InngestExecution_js_1.PREFERRED_EXECUTION_VERSION).toString(),\n                    }));\n                let signature;\n                try {\n                    signature = await signatureValidation.then((result) => {\n                        if (!result.success || !result.keyUsed) {\n                            return undefined;\n                        }\n                        return this.getResponseSignature(result.keyUsed, res.body);\n                    });\n                }\n                catch (err) {\n                    // If we fail to sign, retun a 500 with the error.\n                    return Object.assign(Object.assign({}, res), { headers, body: (0, strings_js_1.stringify)((0, errors_js_1.serializeError)(err)), status: 500 });\n                }\n                if (signature) {\n                    headers[consts_js_1.headerKeys.Signature] = signature;\n                }\n                return Object.assign(Object.assign({}, res), { headers });\n            };\n            if (await this.shouldStream(actions)) {\n                const method = await actions.method(\"starting streaming response\");\n                if (method === \"POST\") {\n                    const { stream, finalize } = await (0, stream_js_1.createStream)();\n                    /**\n                     * Errors are handled by `handleAction` here to ensure that an\n                     * appropriate response is always given.\n                     */\n                    void actionRes.then((res) => {\n                        return finalize(prepareActionRes(res));\n                    });\n                    return timer.wrap(\"res\", () => {\n                        var _a;\n                        return (_a = actions.transformStreamingResponse) === null || _a === void 0 ? void 0 : _a.call(actions, \"starting streaming response\", {\n                            status: 201,\n                            headers: getInngestHeaders(),\n                            body: stream,\n                            version: null,\n                        });\n                    });\n                }\n            }\n            return timer.wrap(\"res\", async () => {\n                return actionRes.then(prepareActionRes).then((actionRes) => {\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                    return actions.transformResponse(\"sending back response\", actionRes);\n                });\n            });\n        };\n        /**\n         * Some platforms check (at runtime) the length of the function being used\n         * to handle an endpoint. If this is a variadic function, it will fail that\n         * check.\n         *\n         * Therefore, we expect the arguments accepted to be the same length as the\n         * `handler` function passed internally.\n         *\n         * We also set a name to avoid a common useless name in tracing such as\n         * `\"anonymous\"` or `\"bound function\"`.\n         *\n         * https://github.com/getsentry/sentry-javascript/issues/3284\n         */\n        Object.defineProperties(handler, {\n            name: {\n                value: \"InngestHandler\",\n            },\n            length: {\n                value: this.handler.length,\n            },\n        });\n        return handler;\n    }\n    get mode() {\n        return this._mode;\n    }\n    set mode(m) {\n        this._mode = m;\n        if (m) {\n            this.client[\"mode\"] = m;\n        }\n    }\n    /**\n     * Given a set of functions to check if an action is available from the\n     * instance's handler, enact any action that is found.\n     *\n     * This method can fetch varying payloads of data, but ultimately is the place\n     * where _decisions_ are made regarding functionality.\n     *\n     * For example, if we find that we should be viewing the UI, this function\n     * will decide whether the UI should be visible based on the payload it has\n     * found (e.g. env vars, options, etc).\n     */\n    async handleAction({ actions, timer, getInngestHeaders, reqArgs, signatureValidation, body, method, headers, }) {\n        var _a;\n        // This is when the request body is completely missing; it does not\n        // include an empty body. This commonly happens when the HTTP framework\n        // doesn't have body parsing middleware.\n        const isMissingBody = body === undefined;\n        try {\n            let url = await actions.url(\"starting to handle request\");\n            if (method === \"POST\") {\n                if (isMissingBody) {\n                    this.log(\"error\", \"Missing body when executing, possibly due to missing request body middleware\");\n                    return {\n                        status: 500,\n                        headers: {\n                            \"Content-Type\": \"application/json\",\n                        },\n                        body: (0, strings_js_1.stringify)((0, errors_js_1.serializeError)(new Error(\"Missing request body when executing, possibly due to missing request body middleware\"))),\n                        version: undefined,\n                    };\n                }\n                const validationResult = await signatureValidation;\n                if (!validationResult.success) {\n                    return {\n                        status: 401,\n                        headers: {\n                            \"Content-Type\": \"application/json\",\n                        },\n                        body: (0, strings_js_1.stringify)((0, errors_js_1.serializeError)(validationResult.err)),\n                        version: undefined,\n                    };\n                }\n                const rawProbe = await actions.queryStringWithDefaults(\"testing for probe\", consts_js_1.queryKeys.Probe);\n                if (rawProbe) {\n                    const probe = (0, enum_js_1.enumFromValue)(consts_js_1.probe, rawProbe);\n                    if (!probe) {\n                        // If we're here, we've received a probe that we don't recognize.\n                        // Fail.\n                        return {\n                            status: 400,\n                            headers: {\n                                \"Content-Type\": \"application/json\",\n                            },\n                            body: (0, strings_js_1.stringify)((0, errors_js_1.serializeError)(new Error(`Unknown probe \"${rawProbe}\"`))),\n                            version: undefined,\n                        };\n                    }\n                    // Provide actions for every probe available.\n                    const probeActions = {\n                        [consts_js_1.probe.Trust]: () => ({\n                            status: 200,\n                            headers: {\n                                \"Content-Type\": \"application/json\",\n                            },\n                            body: \"\",\n                            version: undefined,\n                        }),\n                    };\n                    return probeActions[probe]();\n                }\n                const fnId = await actions.queryStringWithDefaults(\"processing run request\", consts_js_1.queryKeys.FnId);\n                if (!fnId) {\n                    // TODO PrettyError\n                    throw new Error(\"No function ID found in request\");\n                }\n                const stepId = (await actions.queryStringWithDefaults(\"processing run request\", consts_js_1.queryKeys.StepId)) || null;\n                const { version, result } = this.runStep({\n                    functionId: fnId,\n                    data: body,\n                    stepId,\n                    timer,\n                    reqArgs,\n                    headers: await headers,\n                });\n                const stepOutput = await result;\n                /**\n                 * Functions can return `undefined`, but we'll always convert this to\n                 * `null`, as this is appropriately serializable by JSON.\n                 */\n                const opDataUndefinedToNull = (op) => {\n                    op.data = (0, functions_js_1.undefinedToNull)(op.data);\n                    return op;\n                };\n                const resultHandlers = {\n                    \"function-rejected\": (result) => {\n                        return {\n                            status: result.retriable ? 500 : 400,\n                            headers: Object.assign({ \"Content-Type\": \"application/json\", [consts_js_1.headerKeys.NoRetry]: result.retriable ? \"false\" : \"true\" }, (typeof result.retriable === \"string\"\n                                ? { [consts_js_1.headerKeys.RetryAfter]: result.retriable }\n                                : {})),\n                            body: (0, strings_js_1.stringify)((0, functions_js_1.undefinedToNull)(result.error)),\n                            version,\n                        };\n                    },\n                    \"function-resolved\": (result) => {\n                        return {\n                            status: 200,\n                            headers: {\n                                \"Content-Type\": \"application/json\",\n                            },\n                            body: (0, strings_js_1.stringify)((0, functions_js_1.undefinedToNull)(result.data)),\n                            version,\n                        };\n                    },\n                    \"step-not-found\": (result) => {\n                        return {\n                            status: 500,\n                            headers: {\n                                \"Content-Type\": \"application/json\",\n                                [consts_js_1.headerKeys.NoRetry]: \"false\",\n                            },\n                            body: (0, strings_js_1.stringify)({\n                                error: `Could not find step \"${result.step.displayName || result.step.id}\" to run; timed out`,\n                            }),\n                            version,\n                        };\n                    },\n                    \"step-ran\": (result) => {\n                        const step = opDataUndefinedToNull(result.step);\n                        return {\n                            status: 206,\n                            headers: Object.assign({ \"Content-Type\": \"application/json\" }, (typeof result.retriable !== \"undefined\"\n                                ? Object.assign({ [consts_js_1.headerKeys.NoRetry]: result.retriable ? \"false\" : \"true\" }, (typeof result.retriable === \"string\"\n                                    ? { [consts_js_1.headerKeys.RetryAfter]: result.retriable }\n                                    : {})) : {})),\n                            body: (0, strings_js_1.stringify)([step]),\n                            version,\n                        };\n                    },\n                    \"steps-found\": (result) => {\n                        const steps = result.steps.map(opDataUndefinedToNull);\n                        return {\n                            status: 206,\n                            headers: {\n                                \"Content-Type\": \"application/json\",\n                            },\n                            body: (0, strings_js_1.stringify)(steps),\n                            version,\n                        };\n                    },\n                };\n                const handler = resultHandlers[stepOutput.type];\n                try {\n                    return await handler(stepOutput);\n                }\n                catch (err) {\n                    this.log(\"error\", \"Error handling execution result\", err);\n                    throw err;\n                }\n            }\n            // TODO: This feels hacky, so we should probably make it not hacky.\n            const env = (_a = getInngestHeaders()[consts_js_1.headerKeys.Environment]) !== null && _a !== void 0 ? _a : null;\n            if (method === \"GET\") {\n                return {\n                    status: 200,\n                    body: (0, strings_js_1.stringify)(await this.introspectionBody({\n                        actions,\n                        env,\n                        signatureValidation,\n                        url,\n                    })),\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                    },\n                    version: undefined,\n                };\n            }\n            if (method === \"PUT\") {\n                const [deployId, inBandSyncRequested] = await Promise.all([\n                    actions\n                        .queryStringWithDefaults(\"processing deployment request\", consts_js_1.queryKeys.DeployId)\n                        .then((deployId) => {\n                        return deployId === \"undefined\" ? undefined : deployId;\n                    }),\n                    Promise.resolve((0, env_js_1.parseAsBoolean)(this.env[consts_js_1.envKeys.InngestAllowInBandSync]))\n                        .then((allowInBandSync) => {\n                        if (allowInBandSync !== undefined && !allowInBandSync) {\n                            return consts_js_1.syncKind.OutOfBand;\n                        }\n                        return actions.headers(\"processing deployment request\", consts_js_1.headerKeys.InngestSyncKind);\n                    })\n                        .then((kind) => {\n                        return kind === consts_js_1.syncKind.InBand;\n                    }),\n                ]);\n                if (inBandSyncRequested) {\n                    if (isMissingBody) {\n                        this.log(\"error\", \"Missing body when syncing, possibly due to missing request body middleware\");\n                        return {\n                            status: 500,\n                            headers: {\n                                \"Content-Type\": \"application/json\",\n                            },\n                            body: (0, strings_js_1.stringify)((0, errors_js_1.serializeError)(new Error(\"Missing request body when syncing, possibly due to missing request body middleware\"))),\n                            version: undefined,\n                        };\n                    }\n                    // Validation can be successful if we're in dev mode and did not\n                    // actually validate a key. In this case, also check that we did indeed\n                    // use a particular key to validate.\n                    const sigCheck = await signatureValidation;\n                    if (!sigCheck.success) {\n                        return {\n                            status: 401,\n                            body: (0, strings_js_1.stringify)({\n                                code: \"sig_verification_failed\",\n                            }),\n                            headers: {\n                                \"Content-Type\": \"application/json\",\n                            },\n                            version: undefined,\n                        };\n                    }\n                    const res = types_js_1.inBandSyncRequestBodySchema.safeParse(body);\n                    if (!res.success) {\n                        return {\n                            status: 400,\n                            body: (0, strings_js_1.stringify)({\n                                code: \"invalid_request\",\n                                message: res.error.message,\n                            }),\n                            headers: {\n                                \"Content-Type\": \"application/json\",\n                            },\n                            version: undefined,\n                        };\n                    }\n                    // We can trust the URL here because it's coming from\n                    // signature-verified request.\n                    url = this.reqUrl(new URL(res.data.url));\n                    // This should be an in-band sync\n                    const respBody = await this.inBandRegisterBody({\n                        actions,\n                        deployId,\n                        env,\n                        signatureValidation,\n                        url,\n                    });\n                    return {\n                        status: 200,\n                        body: (0, strings_js_1.stringify)(respBody),\n                        headers: {\n                            \"Content-Type\": \"application/json\",\n                            [consts_js_1.headerKeys.InngestSyncKind]: consts_js_1.syncKind.InBand,\n                        },\n                        version: undefined,\n                    };\n                }\n                // If we're here, this is a legacy out-of-band sync\n                const { status, message, modified } = await this.register(this.reqUrl(url), deployId, getInngestHeaders);\n                return {\n                    status,\n                    body: (0, strings_js_1.stringify)({ message, modified }),\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        [consts_js_1.headerKeys.InngestSyncKind]: consts_js_1.syncKind.OutOfBand,\n                    },\n                    version: undefined,\n                };\n            }\n        }\n        catch (err) {\n            return {\n                status: 500,\n                body: (0, strings_js_1.stringify)(Object.assign({ type: \"internal\" }, (0, errors_js_1.serializeError)(err))),\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                version: undefined,\n            };\n        }\n        return {\n            status: 405,\n            body: JSON.stringify({\n                message: \"No action found; request was likely not POST, PUT, or GET\",\n                mode: this._mode,\n            }),\n            headers: {},\n            version: undefined,\n        };\n    }\n    runStep({ functionId, stepId, data, timer, reqArgs, headers, }) {\n        var _a, _b;\n        const fn = this.fns[functionId];\n        if (!fn) {\n            // TODO PrettyError\n            throw new Error(`Could not find function with ID \"${functionId}\"`);\n        }\n        const immediateFnData = (0, functions_js_1.parseFnData)(data);\n        let { version } = immediateFnData;\n        // Handle opting in to optimized parallelism in v3.\n        if (version === InngestExecution_js_1.ExecutionVersion.V1 &&\n            ((_b = (_a = fn.fn)[\"shouldOptimizeParallelism\"]) === null || _b === void 0 ? void 0 : _b.call(_a))) {\n            version = InngestExecution_js_1.ExecutionVersion.V2;\n        }\n        const result = (0, promises_js_1.runAsPromise)(async () => {\n            const anyFnData = await (0, functions_js_1.fetchAllFnData)({\n                data: immediateFnData,\n                api: this.client[\"inngestApi\"],\n                version,\n            });\n            if (!anyFnData.ok) {\n                throw new Error(anyFnData.error);\n            }\n            const executionStarters = ((s) => s)({\n                [InngestExecution_js_1.ExecutionVersion.V0]: ({ event, events, steps, ctx, version }) => {\n                    var _a, _b, _c;\n                    const stepState = Object.entries(steps !== null && steps !== void 0 ? steps : {}).reduce((acc, [id, data]) => {\n                        return Object.assign(Object.assign({}, acc), { \n                            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                            [id]: { id, data } });\n                    }, {});\n                    return {\n                        version,\n                        partialOptions: {\n                            client: this.client,\n                            runId: (ctx === null || ctx === void 0 ? void 0 : ctx.run_id) || \"\",\n                            data: {\n                                event: event,\n                                events: events,\n                                runId: (ctx === null || ctx === void 0 ? void 0 : ctx.run_id) || \"\",\n                                attempt: (_a = ctx === null || ctx === void 0 ? void 0 : ctx.attempt) !== null && _a !== void 0 ? _a : 0,\n                            },\n                            stepState,\n                            requestedRunStep: stepId === \"step\" ? undefined : stepId || undefined,\n                            timer,\n                            isFailureHandler: fn.onFailure,\n                            stepCompletionOrder: (_c = (_b = ctx === null || ctx === void 0 ? void 0 : ctx.stack) === null || _b === void 0 ? void 0 : _b.stack) !== null && _c !== void 0 ? _c : [],\n                            reqArgs,\n                            headers,\n                        },\n                    };\n                },\n                [InngestExecution_js_1.ExecutionVersion.V1]: ({ event, events, steps, ctx, version }) => {\n                    var _a, _b, _c;\n                    const stepState = Object.entries(steps !== null && steps !== void 0 ? steps : {}).reduce((acc, [id, result]) => {\n                        return Object.assign(Object.assign({}, acc), { [id]: result.type === \"data\"\n                                ? // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                                    { id, data: result.data }\n                                : result.type === \"input\"\n                                    ? // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                                        { id, input: result.input }\n                                    : { id, error: result.error } });\n                    }, {});\n                    return {\n                        version,\n                        partialOptions: {\n                            client: this.client,\n                            runId: (ctx === null || ctx === void 0 ? void 0 : ctx.run_id) || \"\",\n                            data: {\n                                event: event,\n                                events: events,\n                                runId: (ctx === null || ctx === void 0 ? void 0 : ctx.run_id) || \"\",\n                                attempt: (_a = ctx === null || ctx === void 0 ? void 0 : ctx.attempt) !== null && _a !== void 0 ? _a : 0,\n                            },\n                            stepState,\n                            requestedRunStep: stepId === \"step\" ? undefined : stepId || undefined,\n                            timer,\n                            isFailureHandler: fn.onFailure,\n                            disableImmediateExecution: ctx === null || ctx === void 0 ? void 0 : ctx.disable_immediate_execution,\n                            stepCompletionOrder: (_c = (_b = ctx === null || ctx === void 0 ? void 0 : ctx.stack) === null || _b === void 0 ? void 0 : _b.stack) !== null && _c !== void 0 ? _c : [],\n                            reqArgs,\n                            headers,\n                        },\n                    };\n                },\n                [InngestExecution_js_1.ExecutionVersion.V2]: ({ event, events, steps, ctx, version }) => {\n                    var _a, _b, _c;\n                    const stepState = Object.entries(steps !== null && steps !== void 0 ? steps : {}).reduce((acc, [id, result]) => {\n                        return Object.assign(Object.assign({}, acc), { [id]: result.type === \"data\"\n                                ? // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                                    { id, data: result.data }\n                                : result.type === \"input\"\n                                    ? // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                                        { id, input: result.input }\n                                    : { id, error: result.error } });\n                    }, {});\n                    return {\n                        version,\n                        partialOptions: {\n                            client: this.client,\n                            runId: (ctx === null || ctx === void 0 ? void 0 : ctx.run_id) || \"\",\n                            data: {\n                                event: event,\n                                events: events,\n                                runId: (ctx === null || ctx === void 0 ? void 0 : ctx.run_id) || \"\",\n                                attempt: (_a = ctx === null || ctx === void 0 ? void 0 : ctx.attempt) !== null && _a !== void 0 ? _a : 0,\n                            },\n                            stepState,\n                            requestedRunStep: stepId === \"step\" ? undefined : stepId || undefined,\n                            timer,\n                            isFailureHandler: fn.onFailure,\n                            disableImmediateExecution: ctx === null || ctx === void 0 ? void 0 : ctx.disable_immediate_execution,\n                            stepCompletionOrder: (_c = (_b = ctx === null || ctx === void 0 ? void 0 : ctx.stack) === null || _b === void 0 ? void 0 : _b.stack) !== null && _c !== void 0 ? _c : [],\n                            reqArgs,\n                            headers,\n                        },\n                    };\n                },\n            });\n            const executionOptions = await executionStarters[version](anyFnData.value);\n            return fn.fn[\"createExecution\"](executionOptions).start();\n        });\n        return { version, result };\n    }\n    configs(url) {\n        const configs = Object.values(this.rawFns).reduce((acc, fn) => [\n            ...acc,\n            ...fn[\"getConfig\"]({ baseUrl: url, appPrefix: this.id }),\n        ], []);\n        for (const config of configs) {\n            const check = types_js_1.functionConfigSchema.safeParse(config);\n            if (!check.success) {\n                const errors = check.error.errors.map((err) => err.message).join(\"; \");\n                this.log(\"warn\", `Config invalid for function \"${config.id}\" : ${errors}`);\n            }\n        }\n        return configs;\n    }\n    /**\n     * Return an Inngest serve endpoint URL given a potential `path` and `host`.\n     *\n     * Will automatically use the `serveHost` and `servePath` if they have been\n     * set when registering.\n     */\n    reqUrl(url) {\n        let ret = new URL(url);\n        const serveHost = this.serveHost || this.env[consts_js_1.envKeys.InngestServeHost];\n        const servePath = this.servePath || this.env[consts_js_1.envKeys.InngestServePath];\n        if (servePath) {\n            ret.pathname = servePath;\n        }\n        if (serveHost) {\n            ret = new URL(ret.pathname + ret.search, serveHost);\n        }\n        return ret;\n    }\n    registerBody({ url, deployId, }) {\n        const body = {\n            url: url.href,\n            deployType: \"ping\",\n            framework: this.frameworkName,\n            appName: this.id,\n            functions: this.configs(url),\n            sdk: `js:v${version_js_1.version}`,\n            v: \"0.1\",\n            deployId: deployId || undefined,\n            capabilities: {\n                trust_probe: \"v1\",\n                connect: \"v1\",\n            },\n            appVersion: this.client.appVersion,\n        };\n        return body;\n    }\n    async inBandRegisterBody({ actions, deployId, env, signatureValidation, url, }) {\n        const registerBody = this.registerBody({ deployId, url });\n        const introspectionBody = await this.introspectionBody({\n            actions,\n            env,\n            signatureValidation,\n            url,\n        });\n        const body = {\n            app_id: this.id,\n            appVersion: this.client.appVersion,\n            capabilities: registerBody.capabilities,\n            env,\n            framework: registerBody.framework,\n            functions: registerBody.functions,\n            inspection: introspectionBody,\n            platform: (0, env_js_1.getPlatformName)(Object.assign(Object.assign({}, (0, env_js_1.allProcessEnv)()), this.env)),\n            sdk_author: \"inngest\",\n            sdk_language: \"\",\n            sdk_version: \"\",\n            sdk: registerBody.sdk,\n            url: registerBody.url,\n        };\n        if (introspectionBody.authentication_succeeded) {\n            body.sdk_language = introspectionBody.sdk_language;\n            body.sdk_version = introspectionBody.sdk_version;\n        }\n        return body;\n    }\n    async introspectionBody({ actions, env, signatureValidation, url, }) {\n        var _a, _b, _c, _d, _e;\n        const registerBody = this.registerBody({\n            url: this.reqUrl(url),\n            deployId: null,\n        });\n        if (!this._mode) {\n            throw new Error(\"No mode set; cannot introspect without mode\");\n        }\n        let introspection = {\n            authentication_succeeded: null,\n            extra: {\n                is_mode_explicit: this._mode.isExplicit,\n            },\n            has_event_key: this.client[\"eventKeySet\"](),\n            has_signing_key: Boolean(this.signingKey),\n            function_count: registerBody.functions.length,\n            mode: this._mode.type,\n            schema_version: \"2024-05-24\",\n        };\n        // Only allow authenticated introspection in Cloud mode, since Dev mode skips\n        // signature validation\n        if (this._mode.type === \"cloud\") {\n            try {\n                const validationResult = await signatureValidation;\n                if (!validationResult.success) {\n                    throw new Error(\"Signature validation failed\");\n                }\n                introspection = Object.assign(Object.assign({}, introspection), { authentication_succeeded: true, api_origin: this.apiBaseUrl, app_id: this.id, capabilities: {\n                        trust_probe: \"v1\",\n                        connect: \"v1\",\n                    }, env, event_api_origin: this.eventApiBaseUrl, event_key_hash: (_a = this.hashedEventKey) !== null && _a !== void 0 ? _a : null, extra: Object.assign(Object.assign({}, introspection.extra), { is_streaming: await this.shouldStream(actions) }), framework: this.frameworkName, sdk_language: \"js\", sdk_version: version_js_1.version, serve_origin: (_b = this.serveHost) !== null && _b !== void 0 ? _b : null, serve_path: (_c = this.servePath) !== null && _c !== void 0 ? _c : null, signing_key_fallback_hash: (_d = this.hashedSigningKeyFallback) !== null && _d !== void 0 ? _d : null, signing_key_hash: (_e = this.hashedSigningKey) !== null && _e !== void 0 ? _e : null });\n            }\n            catch (_f) {\n                // Swallow signature validation error since we'll just return the\n                // unauthenticated introspection\n                introspection = Object.assign(Object.assign({}, introspection), { authentication_succeeded: false });\n            }\n        }\n        return introspection;\n    }\n    async register(url, deployId, getHeaders) {\n        var _a;\n        const body = this.registerBody({ url, deployId });\n        let res;\n        // Whenever we register, we check to see if the dev server is up.  This\n        // is a noop and returns false in production. Clone the URL object to avoid\n        // mutating the property between requests.\n        let registerURL = new URL(this.inngestRegisterUrl.href);\n        const inferredDevMode = this._mode && this._mode.isInferred && this._mode.isDev;\n        if (inferredDevMode) {\n            const host = (0, env_js_1.devServerHost)(this.env);\n            const hasDevServer = await (0, devserver_js_1.devServerAvailable)(host, this.fetch);\n            if (hasDevServer) {\n                registerURL = (0, devserver_js_1.devServerUrl)(host, \"/fn/register\");\n            }\n        }\n        else if ((_a = this._mode) === null || _a === void 0 ? void 0 : _a.explicitDevUrl) {\n            registerURL = (0, devserver_js_1.devServerUrl)(this._mode.explicitDevUrl.href, \"/fn/register\");\n        }\n        if (deployId) {\n            registerURL.searchParams.set(consts_js_1.queryKeys.DeployId, deployId);\n        }\n        try {\n            res = await (0, net_js_1.fetchWithAuthFallback)({\n                authToken: this.hashedSigningKey,\n                authTokenFallback: this.hashedSigningKeyFallback,\n                fetch: this.fetch,\n                url: registerURL.href,\n                options: {\n                    method: \"POST\",\n                    body: (0, strings_js_1.stringify)(body),\n                    headers: Object.assign(Object.assign({}, getHeaders()), { [consts_js_1.headerKeys.InngestSyncKind]: consts_js_1.syncKind.OutOfBand }),\n                    redirect: \"follow\",\n                },\n            });\n        }\n        catch (err) {\n            this.log(\"error\", err);\n            return {\n                status: 500,\n                message: `Failed to register${err instanceof Error ? `; ${err.message}` : \"\"}`,\n                modified: false,\n            };\n        }\n        const raw = await res.text();\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        let data = {};\n        try {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            data = JSON.parse(raw);\n        }\n        catch (err) {\n            this.log(\"warn\", \"Couldn't unpack register response:\", err);\n            let message = \"Failed to register\";\n            if (err instanceof Error) {\n                message += `; ${err.message}`;\n            }\n            message += `; status code: ${res.status}`;\n            return {\n                status: 500,\n                message,\n                modified: false,\n            };\n        }\n        let status;\n        let error;\n        let skipped;\n        let modified;\n        try {\n            ({ status, error, skipped, modified } = registerResSchema.parse(data));\n        }\n        catch (err) {\n            this.log(\"warn\", \"Invalid register response schema:\", err);\n            let message = \"Failed to register\";\n            if (err instanceof Error) {\n                message += `; ${err.message}`;\n            }\n            message += `; status code: ${res.status}`;\n            return {\n                status: 500,\n                message,\n                modified: false,\n            };\n        }\n        // The dev server polls this endpoint to register functions every few\n        // seconds, but we only want to log that we've registered functions if\n        // the function definitions change.  Therefore, we compare the body sent\n        // during registration with the body of the current functions and refuse\n        // to register if the functions are the same.\n        if (!skipped) {\n            this.log(\"debug\", \"registered inngest functions:\", res.status, res.statusText, data);\n        }\n        return { status, message: error, modified };\n    }\n    /**\n     * Given an environment, upsert any missing keys. This is useful in\n     * situations where environment variables are passed directly to handlers or\n     * are otherwise difficult to access during initialization.\n     */\n    upsertKeysFromEnv() {\n        if (this.env[consts_js_1.envKeys.InngestSigningKey]) {\n            if (!this.signingKey) {\n                this.signingKey = String(this.env[consts_js_1.envKeys.InngestSigningKey]);\n            }\n            this.client[\"inngestApi\"].setSigningKey(this.signingKey);\n        }\n        if (this.env[consts_js_1.envKeys.InngestSigningKeyFallback]) {\n            if (!this.signingKeyFallback) {\n                this.signingKeyFallback = String(this.env[consts_js_1.envKeys.InngestSigningKeyFallback]);\n            }\n            this.client[\"inngestApi\"].setSigningKeyFallback(this.signingKeyFallback);\n        }\n        if (!this.client[\"eventKeySet\"]() && this.env[consts_js_1.envKeys.InngestEventKey]) {\n            this.client.setEventKey(String(this.env[consts_js_1.envKeys.InngestEventKey]));\n        }\n        // v2 -> v3 migration warnings\n        if (this.env[consts_js_1.envKeys.InngestDevServerUrl]) {\n            this.log(\"warn\", `Use of ${consts_js_1.envKeys.InngestDevServerUrl} has been deprecated in v3; please use ${consts_js_1.envKeys.InngestBaseUrl} instead. See https://www.inngest.com/docs/sdk/migration`);\n        }\n    }\n    /**\n     * Validate the signature of a request and return the signing key used to\n     * validate it.\n     */\n    // eslint-disable-next-line @typescript-eslint/require-await\n    async validateSignature(sig, body) {\n        try {\n            // Skip signature validation if requested (used by connect)\n            if (this.skipSignatureValidation) {\n                return { success: true, keyUsed: \"\" };\n            }\n            // Never validate signatures outside of prod. Make sure to check the mode\n            // exists here instead of using nullish coalescing to confirm that the check\n            // has been completed.\n            if (this._mode && !this._mode.isCloud) {\n                return { success: true, keyUsed: \"\" };\n            }\n            // If we're here, we're in production; lack of a signing key is an error.\n            if (!this.signingKey) {\n                // TODO PrettyError\n                throw new Error(`No signing key found in client options or ${consts_js_1.envKeys.InngestSigningKey} env var. Find your keys at https://app.inngest.com/secrets`);\n            }\n            // If we're here, we're in production; lack of a req signature is an error.\n            if (!sig) {\n                // TODO PrettyError\n                throw new Error(`No ${consts_js_1.headerKeys.Signature} provided`);\n            }\n            // Validate the signature\n            return {\n                success: true,\n                keyUsed: new RequestSignature(sig).verifySignature({\n                    body,\n                    allowExpiredSignatures: this.allowExpiredSignatures,\n                    signingKey: this.signingKey,\n                    signingKeyFallback: this.signingKeyFallback,\n                }),\n            };\n        }\n        catch (err) {\n            return { success: false, err: err };\n        }\n    }\n    getResponseSignature(key, body) {\n        const now = Date.now();\n        const mac = (0, net_js_1.signDataWithKey)(body, key, now.toString());\n        return `t=${now}&s=${mac}`;\n    }\n    /**\n     * Log to stdout/stderr if the log level is set to include the given level.\n     * The default log level is `\"info\"`.\n     *\n     * This is an abstraction over `console.log` and will try to use the correct\n     * method for the given log level.  For example, `log(\"error\", \"foo\")` will\n     * call `console.error(\"foo\")`.\n     */\n    log(level, ...args) {\n        const logLevels = [\n            \"debug\",\n            \"info\",\n            \"warn\",\n            \"error\",\n            \"fatal\",\n            \"silent\",\n        ];\n        const logLevelSetting = logLevels.indexOf(this.logLevel);\n        const currentLevel = logLevels.indexOf(level);\n        if (currentLevel >= logLevelSetting) {\n            let logger = console.log;\n            if (Object.prototype.hasOwnProperty.call(console, level)) {\n                logger = console[level];\n            }\n            logger(`${consts_js_1.logPrefix} ${level} -`, ...args);\n        }\n    }\n}\nexports.InngestCommHandler = InngestCommHandler;\nclass RequestSignature {\n    constructor(sig) {\n        _RequestSignature_instances.add(this);\n        const params = new URLSearchParams(sig);\n        this.timestamp = params.get(\"t\") || \"\";\n        this.signature = params.get(\"s\") || \"\";\n        if (!this.timestamp || !this.signature) {\n            // TODO PrettyError\n            throw new Error(`Invalid ${consts_js_1.headerKeys.Signature} provided`);\n        }\n    }\n    hasExpired(allowExpiredSignatures) {\n        if (allowExpiredSignatures) {\n            return false;\n        }\n        const delta = Date.now() - new Date(parseInt(this.timestamp) * 1000).valueOf();\n        return delta > 1000 * 60 * 5;\n    }\n    verifySignature({ body, signingKey, signingKeyFallback, allowExpiredSignatures, }) {\n        try {\n            __classPrivateFieldGet(this, _RequestSignature_instances, \"m\", _RequestSignature_verifySignature).call(this, { body, signingKey, allowExpiredSignatures });\n            return signingKey;\n        }\n        catch (err) {\n            if (!signingKeyFallback) {\n                throw err;\n            }\n            __classPrivateFieldGet(this, _RequestSignature_instances, \"m\", _RequestSignature_verifySignature).call(this, {\n                body,\n                signingKey: signingKeyFallback,\n                allowExpiredSignatures,\n            });\n            return signingKeyFallback;\n        }\n    }\n}\n_RequestSignature_instances = new WeakSet(), _RequestSignature_verifySignature = function _RequestSignature_verifySignature({ body, signingKey, allowExpiredSignatures, }) {\n    if (this.hasExpired(allowExpiredSignatures)) {\n        // TODO PrettyError\n        throw new Error(\"Signature has expired\");\n    }\n    const mac = (0, net_js_1.signDataWithKey)(body, signingKey, this.timestamp);\n    if (mac !== this.signature) {\n        // TODO PrettyError\n        throw new Error(\"Invalid signature\");\n    }\n};\n//# sourceMappingURL=InngestCommHandler.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/InngestCommHandler.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/InngestFunction.js":
/*!************************************************************!*\
  !*** ./node_modules/inngest/components/InngestFunction.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.InngestFunction = void 0;\nconst consts_js_1 = __webpack_require__(/*! ../helpers/consts.js */ \"(rsc)/./node_modules/inngest/helpers/consts.js\");\nconst strings_js_1 = __webpack_require__(/*! ../helpers/strings.js */ \"(rsc)/./node_modules/inngest/helpers/strings.js\");\nconst InngestExecution_js_1 = __webpack_require__(/*! ./execution/InngestExecution.js */ \"(rsc)/./node_modules/inngest/components/execution/InngestExecution.js\");\nconst v0_js_1 = __webpack_require__(/*! ./execution/v0.js */ \"(rsc)/./node_modules/inngest/components/execution/v0.js\");\nconst v1_js_1 = __webpack_require__(/*! ./execution/v1.js */ \"(rsc)/./node_modules/inngest/components/execution/v1.js\");\nconst v2_js_1 = __webpack_require__(/*! ./execution/v2.js */ \"(rsc)/./node_modules/inngest/components/execution/v2.js\");\n/**\n * A stateless Inngest function, wrapping up function configuration and any\n * in-memory steps to run when triggered.\n *\n * This function can be \"registered\" to create a handler that Inngest can\n * trigger remotely.\n *\n * @public\n */\nclass InngestFunction {\n    /**\n     * A stateless Inngest function, wrapping up function configuration and any\n     * in-memory steps to run when triggered.\n     *\n     * This function can be \"registered\" to create a handler that Inngest can\n     * trigger remotely.\n     */\n    constructor(client, \n    /**\n     * Options\n     */\n    opts, fn) {\n        this.client = client;\n        this.opts = opts;\n        this.fn = fn;\n        this.onFailureFn = this.opts.onFailure;\n        this.middleware = this.client[\"initializeMiddleware\"](this.opts.middleware, { registerInput: { fn: this }, prefixStack: this.client[\"middleware\"] });\n    }\n    /**\n     * The generated or given ID for this function.\n     */\n    id(prefix) {\n        return [prefix, this.opts.id].filter(Boolean).join(\"-\");\n    }\n    /**\n     * The generated or given ID for this function, prefixed with the app ID. This\n     * is used for routing invokes and identifying the function across apps.\n     */\n    get absoluteId() {\n        return this.id(this.client.id);\n    }\n    /**\n     * The name of this function as it will appear in the Inngest Cloud UI.\n     */\n    get name() {\n        return this.opts.name || this.id();\n    }\n    /**\n     * The description of this function.\n     */\n    get description() {\n        return this.opts.description;\n    }\n    /**\n     * Retrieve the Inngest config for this function.\n     */\n    getConfig({ baseUrl, appPrefix, isConnect, }) {\n        var _a, _b;\n        const fnId = this.id(appPrefix);\n        const stepUrl = new URL(baseUrl.href);\n        stepUrl.searchParams.set(consts_js_1.queryKeys.FnId, fnId);\n        stepUrl.searchParams.set(consts_js_1.queryKeys.StepId, InngestFunction.stepId);\n        const { retries: attempts, cancelOn, idempotency, batchEvents, rateLimit, throttle, concurrency, debounce, timeouts, priority, singleton, } = this.opts;\n        /**\n         * Convert retries into the format required when defining function\n         * configuration.\n         */\n        const retries = typeof attempts === \"undefined\" ? undefined : { attempts };\n        const fn = {\n            id: fnId,\n            name: this.name,\n            triggers: ((_a = this.opts.triggers) !== null && _a !== void 0 ? _a : []).map((trigger) => {\n                if (\"event\" in trigger) {\n                    return {\n                        event: trigger.event,\n                        expression: trigger.if,\n                    };\n                }\n                return {\n                    cron: trigger.cron,\n                };\n            }),\n            steps: {\n                [InngestFunction.stepId]: {\n                    id: InngestFunction.stepId,\n                    name: InngestFunction.stepId,\n                    runtime: {\n                        type: isConnect ? \"ws\" : \"http\",\n                        url: stepUrl.href,\n                    },\n                    retries,\n                },\n            },\n            idempotency,\n            batchEvents,\n            rateLimit,\n            throttle,\n            concurrency,\n            debounce,\n            priority,\n            timeouts,\n            singleton,\n        };\n        if (cancelOn) {\n            fn.cancel = cancelOn.map(({ event, timeout, if: ifStr, match }) => {\n                const ret = {\n                    event,\n                };\n                if (timeout) {\n                    ret.timeout = (0, strings_js_1.timeStr)(timeout);\n                }\n                if (match) {\n                    ret.if = `event.${match} == async.${match}`;\n                }\n                else if (ifStr) {\n                    ret.if = ifStr;\n                }\n                return ret;\n            }, []);\n        }\n        const config = [fn];\n        if (this.onFailureFn) {\n            const id = `${fn.id}${InngestFunction.failureSuffix}`;\n            const name = `${(_b = fn.name) !== null && _b !== void 0 ? _b : fn.id} (failure)`;\n            const failureStepUrl = new URL(stepUrl.href);\n            failureStepUrl.searchParams.set(consts_js_1.queryKeys.FnId, id);\n            config.push({\n                id,\n                name,\n                triggers: [\n                    {\n                        event: consts_js_1.internalEvents.FunctionFailed,\n                        expression: `event.data.function_id == '${fnId}'`,\n                    },\n                ],\n                steps: {\n                    [InngestFunction.stepId]: {\n                        id: InngestFunction.stepId,\n                        name: InngestFunction.stepId,\n                        runtime: {\n                            type: \"http\",\n                            url: failureStepUrl.href,\n                        },\n                        retries: { attempts: 1 },\n                    },\n                },\n            });\n        }\n        return config;\n    }\n    createExecution(opts) {\n        const options = Object.assign({ fn: this }, opts.partialOptions);\n        const versionHandlers = {\n            [InngestExecution_js_1.ExecutionVersion.V2]: () => (0, v2_js_1.createV2InngestExecution)(options),\n            [InngestExecution_js_1.ExecutionVersion.V1]: () => (0, v1_js_1.createV1InngestExecution)(options),\n            [InngestExecution_js_1.ExecutionVersion.V0]: () => (0, v0_js_1.createV0InngestExecution)(options),\n        };\n        return versionHandlers[opts.version]();\n    }\n    shouldOptimizeParallelism() {\n        var _a, _b;\n        // TODO We should check the commhandler's client instead of this one?\n        return ((_b = (_a = this.opts.optimizeParallelism) !== null && _a !== void 0 ? _a : this.client[\"options\"].optimizeParallelism) !== null && _b !== void 0 ? _b : false);\n    }\n}\nexports.InngestFunction = InngestFunction;\nInngestFunction.stepId = \"step\";\nInngestFunction.failureSuffix = \"-failure\";\n//# sourceMappingURL=InngestFunction.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/InngestFunction.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/InngestFunctionReference.js":
/*!*********************************************************************!*\
  !*** ./node_modules/inngest/components/InngestFunctionReference.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.referenceFunction = exports.InngestFunctionReference = void 0;\n/**\n * A reference to an `InngestFunction` that can be used to represent both local\n * and remote functions without pulling in the full function definition (i.e.\n * dependencies).\n *\n * These references can be invoked in the same manner as a regular\n * `InngestFunction`.\n *\n * To create a reference function, use the {@link referenceFunction} helper.\n *\n * @public\n */\nclass InngestFunctionReference {\n    constructor(opts) {\n        this.opts = opts;\n    }\n}\nexports.InngestFunctionReference = InngestFunctionReference;\n/**\n * Create a reference to an `InngestFunction` that can be used to represent both\n * local and remote functions without pulling in the full function definition\n * (i.e. dependencies).\n *\n * These references can be invoked in the same manner as a regular\n * `InngestFunction`.\n *\n * @public\n */\nconst referenceFunction = ({ functionId, appId, }) => {\n    return new InngestFunctionReference({\n        functionId,\n        appId,\n    });\n};\nexports.referenceFunction = referenceFunction;\n//# sourceMappingURL=InngestFunctionReference.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9jb21wb25lbnRzL0lubmdlc3RGdW5jdGlvblJlZmVyZW5jZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx5QkFBeUIsR0FBRyxnQ0FBZ0M7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0Qyx5QkFBeUI7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixvQkFBb0I7QUFDakQ7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EseUJBQXlCO0FBQ3pCIiwic291cmNlcyI6WyIvVXNlcnMvaGFyc2hzaHJpdmFzdGF2L0Rlc2t0b3AvQ29kaW5nIFByb2plY3RzL0pvYi1Bc3Npc3RhbnQtQWdlbnQvbm9kZV9tb2R1bGVzL2lubmdlc3QvY29tcG9uZW50cy9Jbm5nZXN0RnVuY3Rpb25SZWZlcmVuY2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJlZmVyZW5jZUZ1bmN0aW9uID0gZXhwb3J0cy5Jbm5nZXN0RnVuY3Rpb25SZWZlcmVuY2UgPSB2b2lkIDA7XG4vKipcbiAqIEEgcmVmZXJlbmNlIHRvIGFuIGBJbm5nZXN0RnVuY3Rpb25gIHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVwcmVzZW50IGJvdGggbG9jYWxcbiAqIGFuZCByZW1vdGUgZnVuY3Rpb25zIHdpdGhvdXQgcHVsbGluZyBpbiB0aGUgZnVsbCBmdW5jdGlvbiBkZWZpbml0aW9uIChpLmUuXG4gKiBkZXBlbmRlbmNpZXMpLlxuICpcbiAqIFRoZXNlIHJlZmVyZW5jZXMgY2FuIGJlIGludm9rZWQgaW4gdGhlIHNhbWUgbWFubmVyIGFzIGEgcmVndWxhclxuICogYElubmdlc3RGdW5jdGlvbmAuXG4gKlxuICogVG8gY3JlYXRlIGEgcmVmZXJlbmNlIGZ1bmN0aW9uLCB1c2UgdGhlIHtAbGluayByZWZlcmVuY2VGdW5jdGlvbn0gaGVscGVyLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuY2xhc3MgSW5uZ2VzdEZ1bmN0aW9uUmVmZXJlbmNlIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHRoaXMub3B0cyA9IG9wdHM7XG4gICAgfVxufVxuZXhwb3J0cy5Jbm5nZXN0RnVuY3Rpb25SZWZlcmVuY2UgPSBJbm5nZXN0RnVuY3Rpb25SZWZlcmVuY2U7XG4vKipcbiAqIENyZWF0ZSBhIHJlZmVyZW5jZSB0byBhbiBgSW5uZ2VzdEZ1bmN0aW9uYCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcHJlc2VudCBib3RoXG4gKiBsb2NhbCBhbmQgcmVtb3RlIGZ1bmN0aW9ucyB3aXRob3V0IHB1bGxpbmcgaW4gdGhlIGZ1bGwgZnVuY3Rpb24gZGVmaW5pdGlvblxuICogKGkuZS4gZGVwZW5kZW5jaWVzKS5cbiAqXG4gKiBUaGVzZSByZWZlcmVuY2VzIGNhbiBiZSBpbnZva2VkIGluIHRoZSBzYW1lIG1hbm5lciBhcyBhIHJlZ3VsYXJcbiAqIGBJbm5nZXN0RnVuY3Rpb25gLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuY29uc3QgcmVmZXJlbmNlRnVuY3Rpb24gPSAoeyBmdW5jdGlvbklkLCBhcHBJZCwgfSkgPT4ge1xuICAgIHJldHVybiBuZXcgSW5uZ2VzdEZ1bmN0aW9uUmVmZXJlbmNlKHtcbiAgICAgICAgZnVuY3Rpb25JZCxcbiAgICAgICAgYXBwSWQsXG4gICAgfSk7XG59O1xuZXhwb3J0cy5yZWZlcmVuY2VGdW5jdGlvbiA9IHJlZmVyZW5jZUZ1bmN0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SW5uZ2VzdEZ1bmN0aW9uUmVmZXJlbmNlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/InngestFunctionReference.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/InngestMiddleware.js":
/*!**************************************************************!*\
  !*** ./node_modules/inngest/components/InngestMiddleware.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getHookStack = exports.InngestMiddleware = void 0;\nconst functions_js_1 = __webpack_require__(/*! ../helpers/functions.js */ \"(rsc)/./node_modules/inngest/helpers/functions.js\");\n/**\n * A middleware that can be registered with Inngest to hook into various\n * lifecycles of the SDK and affect input and output of Inngest functionality.\n *\n * See {@link https://innge.st/middleware}\n *\n * @example\n *\n * ```ts\n * export const inngest = new Inngest({\n *   middleware: [\n *     new InngestMiddleware({\n *       name: \"My Middleware\",\n *       init: () => {\n *         // ...\n *       }\n *     })\n *   ]\n * });\n * ```\n *\n * @public\n */\nclass InngestMiddleware {\n    constructor({ name, init }) {\n        this.name = name;\n        this.init = init;\n    }\n}\nexports.InngestMiddleware = InngestMiddleware;\n/**\n * Given some middleware and an entrypoint, runs the initializer for the given\n * `key` and returns functions that will pass arguments through a stack of each\n * given hook in a middleware's lifecycle.\n *\n * Lets the middleware initialize before starting.\n */\nconst getHookStack = async (\n/**\n * The stack of middleware that will be used to run hooks.\n */\nmiddleware, \n/**\n * The hook type to initialize.\n */\nkey, \n/**\n * Arguments for the initial hook.\n */\narg, transforms) => {\n    // Wait for middleware to initialize\n    const mwStack = await middleware;\n    // Step through each middleware and get the hook for the given key\n    const keyFns = mwStack.reduce((acc, mw) => {\n        const fn = mw[key];\n        if (fn) {\n            return [...acc, fn];\n        }\n        return acc;\n    }, []);\n    // Run each hook found in sequence and collect the results\n    const hooksRegistered = await keyFns.reduce(async (acc, fn) => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return [...(await acc), await fn(arg)];\n    }, Promise.resolve([]));\n    // Prepare the return object - mutating this instead of using reduce as it\n    // results in cleaner code.\n    const ret = {};\n    // Step through each hook result and create a waterfall joining each key\n    for (const hook of hooksRegistered) {\n        const hookKeys = Object.keys(hook);\n        for (const key of hookKeys) {\n            let fns = [hook[key]];\n            const existingWaterfall = ret[key];\n            if (existingWaterfall) {\n                fns = [existingWaterfall, hook[key]];\n            }\n            const transform = transforms[key];\n            ret[key] = (0, functions_js_1.waterfall)(fns, transform);\n        }\n    }\n    // Cache each function in the stack to ensure each can only be called once\n    for (const k of Object.keys(ret)) {\n        const key = k;\n        ret[key] = (0, functions_js_1.cacheFn)(ret[key]);\n    }\n    return ret;\n};\nexports.getHookStack = getHookStack;\n//# sourceMappingURL=InngestMiddleware.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9jb21wb25lbnRzL0lubmdlc3RNaWRkbGV3YXJlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9CQUFvQixHQUFHLHlCQUF5QjtBQUNoRCx1QkFBdUIsbUJBQU8sQ0FBQyxrRkFBeUI7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLFlBQVk7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCIiwic291cmNlcyI6WyIvVXNlcnMvaGFyc2hzaHJpdmFzdGF2L0Rlc2t0b3AvQ29kaW5nIFByb2plY3RzL0pvYi1Bc3Npc3RhbnQtQWdlbnQvbm9kZV9tb2R1bGVzL2lubmdlc3QvY29tcG9uZW50cy9Jbm5nZXN0TWlkZGxld2FyZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0SG9va1N0YWNrID0gZXhwb3J0cy5Jbm5nZXN0TWlkZGxld2FyZSA9IHZvaWQgMDtcbmNvbnN0IGZ1bmN0aW9uc19qc18xID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvZnVuY3Rpb25zLmpzXCIpO1xuLyoqXG4gKiBBIG1pZGRsZXdhcmUgdGhhdCBjYW4gYmUgcmVnaXN0ZXJlZCB3aXRoIElubmdlc3QgdG8gaG9vayBpbnRvIHZhcmlvdXNcbiAqIGxpZmVjeWNsZXMgb2YgdGhlIFNESyBhbmQgYWZmZWN0IGlucHV0IGFuZCBvdXRwdXQgb2YgSW5uZ2VzdCBmdW5jdGlvbmFsaXR5LlxuICpcbiAqIFNlZSB7QGxpbmsgaHR0cHM6Ly9pbm5nZS5zdC9taWRkbGV3YXJlfVxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogYGBgdHNcbiAqIGV4cG9ydCBjb25zdCBpbm5nZXN0ID0gbmV3IElubmdlc3Qoe1xuICogICBtaWRkbGV3YXJlOiBbXG4gKiAgICAgbmV3IElubmdlc3RNaWRkbGV3YXJlKHtcbiAqICAgICAgIG5hbWU6IFwiTXkgTWlkZGxld2FyZVwiLFxuICogICAgICAgaW5pdDogKCkgPT4ge1xuICogICAgICAgICAvLyAuLi5cbiAqICAgICAgIH1cbiAqICAgICB9KVxuICogICBdXG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIEBwdWJsaWNcbiAqL1xuY2xhc3MgSW5uZ2VzdE1pZGRsZXdhcmUge1xuICAgIGNvbnN0cnVjdG9yKHsgbmFtZSwgaW5pdCB9KSB7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMuaW5pdCA9IGluaXQ7XG4gICAgfVxufVxuZXhwb3J0cy5Jbm5nZXN0TWlkZGxld2FyZSA9IElubmdlc3RNaWRkbGV3YXJlO1xuLyoqXG4gKiBHaXZlbiBzb21lIG1pZGRsZXdhcmUgYW5kIGFuIGVudHJ5cG9pbnQsIHJ1bnMgdGhlIGluaXRpYWxpemVyIGZvciB0aGUgZ2l2ZW5cbiAqIGBrZXlgIGFuZCByZXR1cm5zIGZ1bmN0aW9ucyB0aGF0IHdpbGwgcGFzcyBhcmd1bWVudHMgdGhyb3VnaCBhIHN0YWNrIG9mIGVhY2hcbiAqIGdpdmVuIGhvb2sgaW4gYSBtaWRkbGV3YXJlJ3MgbGlmZWN5Y2xlLlxuICpcbiAqIExldHMgdGhlIG1pZGRsZXdhcmUgaW5pdGlhbGl6ZSBiZWZvcmUgc3RhcnRpbmcuXG4gKi9cbmNvbnN0IGdldEhvb2tTdGFjayA9IGFzeW5jIChcbi8qKlxuICogVGhlIHN0YWNrIG9mIG1pZGRsZXdhcmUgdGhhdCB3aWxsIGJlIHVzZWQgdG8gcnVuIGhvb2tzLlxuICovXG5taWRkbGV3YXJlLCBcbi8qKlxuICogVGhlIGhvb2sgdHlwZSB0byBpbml0aWFsaXplLlxuICovXG5rZXksIFxuLyoqXG4gKiBBcmd1bWVudHMgZm9yIHRoZSBpbml0aWFsIGhvb2suXG4gKi9cbmFyZywgdHJhbnNmb3JtcykgPT4ge1xuICAgIC8vIFdhaXQgZm9yIG1pZGRsZXdhcmUgdG8gaW5pdGlhbGl6ZVxuICAgIGNvbnN0IG13U3RhY2sgPSBhd2FpdCBtaWRkbGV3YXJlO1xuICAgIC8vIFN0ZXAgdGhyb3VnaCBlYWNoIG1pZGRsZXdhcmUgYW5kIGdldCB0aGUgaG9vayBmb3IgdGhlIGdpdmVuIGtleVxuICAgIGNvbnN0IGtleUZucyA9IG13U3RhY2sucmVkdWNlKChhY2MsIG13KSA9PiB7XG4gICAgICAgIGNvbnN0IGZuID0gbXdba2V5XTtcbiAgICAgICAgaWYgKGZuKSB7XG4gICAgICAgICAgICByZXR1cm4gWy4uLmFjYywgZm5dO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgW10pO1xuICAgIC8vIFJ1biBlYWNoIGhvb2sgZm91bmQgaW4gc2VxdWVuY2UgYW5kIGNvbGxlY3QgdGhlIHJlc3VsdHNcbiAgICBjb25zdCBob29rc1JlZ2lzdGVyZWQgPSBhd2FpdCBrZXlGbnMucmVkdWNlKGFzeW5jIChhY2MsIGZuKSA9PiB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLXJldHVyblxuICAgICAgICByZXR1cm4gWy4uLihhd2FpdCBhY2MpLCBhd2FpdCBmbihhcmcpXTtcbiAgICB9LCBQcm9taXNlLnJlc29sdmUoW10pKTtcbiAgICAvLyBQcmVwYXJlIHRoZSByZXR1cm4gb2JqZWN0IC0gbXV0YXRpbmcgdGhpcyBpbnN0ZWFkIG9mIHVzaW5nIHJlZHVjZSBhcyBpdFxuICAgIC8vIHJlc3VsdHMgaW4gY2xlYW5lciBjb2RlLlxuICAgIGNvbnN0IHJldCA9IHt9O1xuICAgIC8vIFN0ZXAgdGhyb3VnaCBlYWNoIGhvb2sgcmVzdWx0IGFuZCBjcmVhdGUgYSB3YXRlcmZhbGwgam9pbmluZyBlYWNoIGtleVxuICAgIGZvciAoY29uc3QgaG9vayBvZiBob29rc1JlZ2lzdGVyZWQpIHtcbiAgICAgICAgY29uc3QgaG9va0tleXMgPSBPYmplY3Qua2V5cyhob29rKTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgaG9va0tleXMpIHtcbiAgICAgICAgICAgIGxldCBmbnMgPSBbaG9va1trZXldXTtcbiAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nV2F0ZXJmYWxsID0gcmV0W2tleV07XG4gICAgICAgICAgICBpZiAoZXhpc3RpbmdXYXRlcmZhbGwpIHtcbiAgICAgICAgICAgICAgICBmbnMgPSBbZXhpc3RpbmdXYXRlcmZhbGwsIGhvb2tba2V5XV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB0cmFuc2Zvcm0gPSB0cmFuc2Zvcm1zW2tleV07XG4gICAgICAgICAgICByZXRba2V5XSA9ICgwLCBmdW5jdGlvbnNfanNfMS53YXRlcmZhbGwpKGZucywgdHJhbnNmb3JtKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBDYWNoZSBlYWNoIGZ1bmN0aW9uIGluIHRoZSBzdGFjayB0byBlbnN1cmUgZWFjaCBjYW4gb25seSBiZSBjYWxsZWQgb25jZVxuICAgIGZvciAoY29uc3QgayBvZiBPYmplY3Qua2V5cyhyZXQpKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IGs7XG4gICAgICAgIHJldFtrZXldID0gKDAsIGZ1bmN0aW9uc19qc18xLmNhY2hlRm4pKHJldFtrZXldKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbn07XG5leHBvcnRzLmdldEhvb2tTdGFjayA9IGdldEhvb2tTdGFjaztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUlubmdlc3RNaWRkbGV3YXJlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/InngestMiddleware.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/InngestStepTools.js":
/*!*************************************************************!*\
  !*** ./node_modules/inngest/components/InngestStepTools.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.invokePayloadSchema = exports.gatewaySymbol = exports.createStepTools = exports.STEP_INDEXING_SUFFIX = exports.getStepOptions = void 0;\nconst ai_1 = __webpack_require__(/*! @inngest/ai */ \"(rsc)/./node_modules/@inngest/ai/dist/index.js\");\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nconst consts_js_1 = __webpack_require__(/*! ../helpers/consts.js */ \"(rsc)/./node_modules/inngest/helpers/consts.js\");\nconst strings_js_1 = __webpack_require__(/*! ../helpers/strings.js */ \"(rsc)/./node_modules/inngest/helpers/strings.js\");\nconst Temporal = __importStar(__webpack_require__(/*! ../helpers/temporal.js */ \"(rsc)/./node_modules/inngest/helpers/temporal.js\"));\nconst types_js_1 = __webpack_require__(/*! ../types.js */ \"(rsc)/./node_modules/inngest/types.js\");\nconst Fetch_js_1 = __webpack_require__(/*! ./Fetch.js */ \"(rsc)/./node_modules/inngest/components/Fetch.js\");\nconst InngestFunction_js_1 = __webpack_require__(/*! ./InngestFunction.js */ \"(rsc)/./node_modules/inngest/components/InngestFunction.js\");\nconst InngestFunctionReference_js_1 = __webpack_require__(/*! ./InngestFunctionReference.js */ \"(rsc)/./node_modules/inngest/components/InngestFunctionReference.js\");\nconst getStepOptions = (options) => {\n    if (typeof options === \"string\") {\n        return { id: options };\n    }\n    return options;\n};\nexports.getStepOptions = getStepOptions;\n/**\n * Suffix used to namespace steps that are automatically indexed.\n */\nexports.STEP_INDEXING_SUFFIX = \":\";\n/**\n * Create a new set of step function tools ready to be used in a step function.\n * This function should be run and a fresh set of tools provided every time a\n * function is run.\n *\n * An op stack (function state) is passed in as well as some mutable properties\n * that the tools can use to submit a new op.\n */\nconst createStepTools = (client, execution, stepHandler) => {\n    /**\n     * A local helper used to create tools that can be used to submit an op.\n     *\n     * When using this function, a generic type should be provided which is the\n     * function signature exposed to the user.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const createTool = (\n    /**\n     * A function that returns an ID for this op. This is used to ensure that\n     * the op stack is correctly filled, submitted, and retrieved with the same\n     * ID.\n     *\n     * It is passed the arguments passed by the user.\n     *\n     * Most simple tools will likely only need to define this.\n     */\n    matchOp, opts) => {\n        return (async (...args) => {\n            const parsedArgs = args;\n            return stepHandler({ args: parsedArgs, matchOp, opts });\n        });\n    };\n    /**\n     * Create a new step run tool that can be used to run a step function using\n     * `step.run()` as a shim.\n     */\n    const createStepRun = (\n    /**\n     * The sub-type of this step tool, exposed via `opts.type` when the op is\n     * reported.\n     */\n    type) => {\n        return createTool(({ id, name }, _fn, ...input) => {\n            const opts = Object.assign(Object.assign({}, (input.length ? { input } : {})), (type ? { type } : {}));\n            return Object.assign({ id, op: types_js_1.StepOpCode.StepPlanned, name: id, displayName: name !== null && name !== void 0 ? name : id }, (Object.keys(opts).length ? { opts } : {}));\n        }, {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            fn: (_, fn, ...input) => fn(...input),\n        });\n    };\n    /**\n     * Define the set of tools the user has access to for their step functions.\n     *\n     * Each key is the function name and is expected to run `createTool` and pass\n     * a generic type for that function as it will appear in the user's code.\n     */\n    const tools = {\n        /**\n         * Send one or many events to Inngest. Should always be used in place of\n         * `inngest.send()` to ensure that the event send is successfully retried\n         * and not sent multiple times due to memoisation.\n         *\n         * @example\n         * ```ts\n         * await step.sendEvent(\"emit-user-creation\", {\n         *   name: \"app/user.created\",\n         *   data: { id: 123 },\n         * });\n         *\n         * await step.sendEvent(\"emit-user-updates\", [\n         *   {\n         *     name: \"app/user.created\",\n         *     data: { id: 123 },\n         *   },\n         *   {\n         *     name: \"app/user.feed.created\",\n         *     data: { id: 123 },\n         *   },\n         * ]);\n         * ```\n         *\n         * Returns a promise that will resolve once the event has been sent.\n         */\n        sendEvent: createTool(({ id, name }) => {\n            return {\n                id,\n                op: types_js_1.StepOpCode.StepPlanned,\n                name: \"sendEvent\",\n                displayName: name !== null && name !== void 0 ? name : id,\n            };\n        }, {\n            fn: (idOrOptions, payload) => {\n                return client[\"_send\"]({\n                    payload,\n                    headers: execution[\"options\"][\"headers\"],\n                });\n            },\n        }),\n        /**\n         * EXPERIMENTAL: This API is not yet stable and may change in the future\n         * without a major version bump.\n         *\n         * Wait for a particular signal to be received before continuing. When the\n         * signal is received, its data will be returned.\n         */\n        waitForSignal: createTool(({ id, name }, opts) => {\n            // TODO Should support Temporal.DurationLike, Temporal.InstantLike,\n            // Temporal.ZonedDateTimeLike\n            return {\n                id,\n                op: types_js_1.StepOpCode.WaitForSignal,\n                name: opts.signal,\n                displayName: name !== null && name !== void 0 ? name : id,\n                opts: {\n                    signal: opts.signal,\n                    timeout: (0, strings_js_1.timeStr)(opts.timeout),\n                    conflict: opts.onConflict,\n                },\n            };\n        }),\n        /**\n         * Send a Signal to Inngest.\n         */\n        sendSignal: createTool(({ id, name }, opts) => {\n            return {\n                id,\n                op: types_js_1.StepOpCode.StepPlanned,\n                name: \"sendSignal\",\n                displayName: name !== null && name !== void 0 ? name : id,\n                opts: {\n                    type: \"step.sendSignal\",\n                    signal: opts.signal,\n                },\n            };\n        }, {\n            fn: (_idOrOptions, opts) => {\n                return client[\"_sendSignal\"]({\n                    signal: opts.signal,\n                    data: opts.data,\n                    headers: execution[\"options\"][\"headers\"],\n                });\n            },\n        }),\n        /**\n         * Wait for a particular event to be received before continuing. When the\n         * event is received, it will be returned.\n         *\n         * You can also provide options to control the particular event that is\n         * received, for example to ensure that a user ID matches between two\n         * events, or to only wait a maximum amount of time before giving up and\n         * returning `null` instead of any event data.\n         */\n        waitForEvent: createTool(({ id, name }, \n        /**\n         * Options to control the event we're waiting for.\n         */\n        opts) => {\n            const matchOpts = {\n                timeout: (0, strings_js_1.timeStr)(typeof opts === \"string\" ? opts : opts.timeout),\n            };\n            if (typeof opts !== \"string\") {\n                if (opts === null || opts === void 0 ? void 0 : opts.match) {\n                    matchOpts.if = `event.${opts.match} == async.${opts.match}`;\n                }\n                else if (opts === null || opts === void 0 ? void 0 : opts.if) {\n                    matchOpts.if = opts.if;\n                }\n            }\n            return {\n                id,\n                op: types_js_1.StepOpCode.WaitForEvent,\n                name: opts.event,\n                opts: matchOpts,\n                displayName: name !== null && name !== void 0 ? name : id,\n            };\n        }),\n        /**\n         * Use this tool to run business logic. Each call to `run` will be retried\n         * individually, meaning you can compose complex workflows that safely\n         * retry dependent asynchronous actions.\n         *\n         * The function you pass to `run` will be called only when this \"step\" is to\n         * be executed and can be synchronous or asynchronous.\n         *\n         * In either case, the return value of the function will be the return value\n         * of the `run` tool, meaning you can return and reason about return data\n         * for next steps.\n         */\n        run: createStepRun(),\n        /**\n         * AI tooling for running AI models and other AI-related tasks.\n         */\n        ai: {\n            /**\n             * Use this tool to have Inngest make your AI calls. Useful for agentic workflows.\n             *\n             * Input is also tracked for this tool, meaning you can pass input to the\n             * function and it will be displayed and editable in the UI.\n             */\n            infer: createTool(({ id, name }, options) => {\n                var _a, _b;\n                const modelCopy = Object.assign({}, options.model);\n                // Allow the model to mutate options and body for this call\n                (_b = (_a = options.model).onCall) === null || _b === void 0 ? void 0 : _b.call(_a, modelCopy, options.body);\n                return {\n                    id,\n                    op: types_js_1.StepOpCode.AiGateway,\n                    displayName: name !== null && name !== void 0 ? name : id,\n                    opts: {\n                        type: \"step.ai.infer\",\n                        url: modelCopy.url,\n                        headers: modelCopy.headers,\n                        auth_key: modelCopy.authKey,\n                        format: modelCopy.format,\n                        body: options.body,\n                    },\n                };\n            }),\n            /**\n             * Use this tool to wrap AI models and other AI-related tasks. Each call\n             * to `wrap` will be retried individually, meaning you can compose complex\n             * workflows that safely retry dependent asynchronous actions.\n             *\n             * Input is also tracked for this tool, meaning you can pass input to the\n             * function and it will be displayed and editable in the UI.\n             */\n            wrap: createStepRun(\"step.ai.wrap\"),\n            /**\n             * Models for AI inference and other AI-related tasks.\n             */\n            models: Object.assign({}, ai_1.models),\n        },\n        /**\n         * Wait a specified amount of time before continuing.\n         *\n         * The time to wait can be specified using a `number` of milliseconds or an\n         * `ms`-compatible time string like `\"1 hour\"`, `\"30 mins\"`, or `\"2.5d\"`.\n         *\n         * {@link https://npm.im/ms}\n         *\n         * To wait until a particular date, use `sleepUntil` instead.\n         */\n        sleep: createTool(({ id, name }, time) => {\n            /**\n             * The presence of this operation in the returned stack indicates that the\n             * sleep is over and we should continue execution.\n             */\n            const msTimeStr = (0, strings_js_1.timeStr)(Temporal.isTemporalDuration(time)\n                ? time.total({ unit: \"milliseconds\" })\n                : time);\n            return {\n                id,\n                op: types_js_1.StepOpCode.Sleep,\n                name: msTimeStr,\n                displayName: name !== null && name !== void 0 ? name : id,\n            };\n        }),\n        /**\n         * Wait until a particular date before continuing by passing a `Date`.\n         *\n         * To wait for a particular amount of time from now, always use `sleep`\n         * instead.\n         */\n        sleepUntil: createTool(({ id, name }, time) => {\n            try {\n                const iso = Temporal.getISOString(time);\n                /**\n                 * The presence of this operation in the returned stack indicates that the\n                 * sleep is over and we should continue execution.\n                 */\n                return {\n                    id,\n                    op: types_js_1.StepOpCode.Sleep,\n                    name: iso,\n                    displayName: name !== null && name !== void 0 ? name : id,\n                };\n            }\n            catch (err) {\n                /**\n                 * If we're here, it's because the date is invalid. We'll throw a custom\n                 * error here to standardise this response.\n                 */\n                // TODO PrettyError\n                console.warn(\"Invalid `Date`, date string, `Temporal.Instant`, or `Temporal.ZonedDateTime` passed to sleepUntil;\", err);\n                // TODO PrettyError\n                throw new Error(`Invalid \\`Date\\`, date string, \\`Temporal.Instant\\`, or \\`Temporal.ZonedDateTime\\` passed to sleepUntil: ${\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                time}`);\n            }\n        }),\n        /**\n         * Invoke a passed Inngest `function` with the given `data`. Returns the\n         * result of the returned value of the function or `null` if the function\n         * does not return a value.\n         *\n         * A string ID can also be passed to reference functions outside of the\n         * current app.\n         */\n        invoke: createTool(({ id, name }, invokeOpts) => {\n            // Create a discriminated union to operate on based on the input types\n            // available for this tool.\n            const optsSchema = exports.invokePayloadSchema.extend({\n                timeout: zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.date()]).optional(),\n            });\n            const parsedFnOpts = optsSchema\n                .extend({\n                _type: zod_1.z.literal(\"fullId\").optional().default(\"fullId\"),\n                function: zod_1.z.string().min(1),\n            })\n                .or(optsSchema.extend({\n                _type: zod_1.z.literal(\"fnInstance\").optional().default(\"fnInstance\"),\n                function: zod_1.z.instanceof(InngestFunction_js_1.InngestFunction),\n            }))\n                .or(optsSchema.extend({\n                _type: zod_1.z.literal(\"refInstance\").optional().default(\"refInstance\"),\n                function: zod_1.z.instanceof(InngestFunctionReference_js_1.InngestFunctionReference),\n            }))\n                .safeParse(invokeOpts);\n            if (!parsedFnOpts.success) {\n                throw new Error(`Invalid invocation options passed to invoke; must include either a function or functionId.`);\n            }\n            const { _type, function: fn, data, user, v, timeout } = parsedFnOpts.data;\n            const payload = { data, user, v };\n            const opts = {\n                payload,\n                function_id: \"\",\n                timeout: typeof timeout === \"undefined\" ? undefined : (0, strings_js_1.timeStr)(timeout),\n            };\n            switch (_type) {\n                case \"fnInstance\":\n                    opts.function_id = fn.id(fn[\"client\"].id);\n                    break;\n                case \"fullId\":\n                    console.warn(`${consts_js_1.logPrefix} Invoking function with \\`function: string\\` is deprecated and will be removed in v4.0.0; use an imported function or \\`referenceFunction()\\` instead. See https://innge.st/ts-referencing-functions`);\n                    opts.function_id = fn;\n                    break;\n                case \"refInstance\":\n                    opts.function_id = [fn.opts.appId || client.id, fn.opts.functionId]\n                        .filter(Boolean)\n                        .join(\"-\");\n                    break;\n            }\n            return {\n                id,\n                op: types_js_1.StepOpCode.InvokeFunction,\n                displayName: name !== null && name !== void 0 ? name : id,\n                opts,\n            };\n        }),\n        /**\n         * `step.fetch` is a Fetch-API-compatible function that can be used to make\n         * any HTTP code durable if it's called within an Inngest function.\n         *\n         * It will gracefully fall back to the global `fetch` if called outside of\n         * this context, and a custom fallback can be set using the `config` method.\n         */\n        fetch: Fetch_js_1.fetch,\n    };\n    // Add an uptyped gateway\n    tools[exports.gatewaySymbol] = createTool(({ id, name }, input, init) => {\n        var _a;\n        const url = input instanceof Request ? input.url : input.toString();\n        const headers = {};\n        if (input instanceof Request) {\n            input.headers.forEach((value, key) => (headers[key] = value));\n        }\n        else if (init === null || init === void 0 ? void 0 : init.headers) {\n            const h = new Headers(init.headers);\n            h.forEach((value, key) => (headers[key] = value));\n        }\n        return {\n            id,\n            op: types_js_1.StepOpCode.Gateway,\n            displayName: name !== null && name !== void 0 ? name : id,\n            opts: {\n                url,\n                method: (_a = init === null || init === void 0 ? void 0 : init.method) !== null && _a !== void 0 ? _a : \"GET\",\n                headers,\n                body: init === null || init === void 0 ? void 0 : init.body,\n            },\n        };\n    });\n    return tools;\n};\nexports.createStepTools = createStepTools;\nexports.gatewaySymbol = Symbol.for(\"inngest.step.gateway\");\n/**\n * The event payload portion of the options for `step.invoke()`. This does not\n * include non-payload options like `timeout` or the function to invoke.\n */\nexports.invokePayloadSchema = zod_1.z.object({\n    data: zod_1.z.record(zod_1.z.any()).optional(),\n    user: zod_1.z.record(zod_1.z.any()).optional(),\n    v: zod_1.z.string().optional(),\n});\n//# sourceMappingURL=InngestStepTools.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/InngestStepTools.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/NonRetriableError.js":
/*!**************************************************************!*\
  !*** ./node_modules/inngest/components/NonRetriableError.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.NonRetriableError = void 0;\n/**\n * An error that, when thrown, indicates to Inngest that the function should\n * cease all execution and not retry.\n *\n * A `message` must be provided, and an optional `cause` can be provided to\n * provide more context to the error.\n *\n * @public\n */\nclass NonRetriableError extends Error {\n    constructor(message, options) {\n        super(message);\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        this.cause = options === null || options === void 0 ? void 0 : options.cause;\n        this.name = \"NonRetriableError\";\n    }\n}\nexports.NonRetriableError = NonRetriableError;\n//# sourceMappingURL=NonRetriableError.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9jb21wb25lbnRzL05vblJldHJpYWJsZUVycm9yLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCIiwic291cmNlcyI6WyIvVXNlcnMvaGFyc2hzaHJpdmFzdGF2L0Rlc2t0b3AvQ29kaW5nIFByb2plY3RzL0pvYi1Bc3Npc3RhbnQtQWdlbnQvbm9kZV9tb2R1bGVzL2lubmdlc3QvY29tcG9uZW50cy9Ob25SZXRyaWFibGVFcnJvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTm9uUmV0cmlhYmxlRXJyb3IgPSB2b2lkIDA7XG4vKipcbiAqIEFuIGVycm9yIHRoYXQsIHdoZW4gdGhyb3duLCBpbmRpY2F0ZXMgdG8gSW5uZ2VzdCB0aGF0IHRoZSBmdW5jdGlvbiBzaG91bGRcbiAqIGNlYXNlIGFsbCBleGVjdXRpb24gYW5kIG5vdCByZXRyeS5cbiAqXG4gKiBBIGBtZXNzYWdlYCBtdXN0IGJlIHByb3ZpZGVkLCBhbmQgYW4gb3B0aW9uYWwgYGNhdXNlYCBjYW4gYmUgcHJvdmlkZWQgdG9cbiAqIHByb3ZpZGUgbW9yZSBjb250ZXh0IHRvIHRoZSBlcnJvci5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmNsYXNzIE5vblJldHJpYWJsZUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWFzc2lnbm1lbnRcbiAgICAgICAgdGhpcy5jYXVzZSA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5jYXVzZTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJOb25SZXRyaWFibGVFcnJvclwiO1xuICAgIH1cbn1cbmV4cG9ydHMuTm9uUmV0cmlhYmxlRXJyb3IgPSBOb25SZXRyaWFibGVFcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU5vblJldHJpYWJsZUVycm9yLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/NonRetriableError.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/RetryAfterError.js":
/*!************************************************************!*\
  !*** ./node_modules/inngest/components/RetryAfterError.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RetryAfterError = void 0;\nconst ms_1 = __importDefault(__webpack_require__(/*! ms */ \"(rsc)/./node_modules/ms/index.js\"));\n/**\n * An error that, when thrown, indicates to Inngest that the function should be\n * retried after a given amount of time.\n *\n * A `message` must be provided, as well as a `retryAfter` parameter, which can\n * be a `number` of milliseconds, an `ms`-compatible time string, or a `Date`.\n *\n * An optional `cause` can be provided to provide more context to the error.\n *\n * @public\n */\nclass RetryAfterError extends Error {\n    constructor(message, \n    /**\n     * The time after which the function should be retried. Represents either a\n     * number of milliseconds or a RFC3339 date.\n     */\n    retryAfter, options) {\n        super(message);\n        if (retryAfter instanceof Date) {\n            this.retryAfter = retryAfter.toISOString();\n        }\n        else {\n            const seconds = `${Math.ceil((typeof retryAfter === \"string\" ? (0, ms_1.default)(retryAfter) : retryAfter) / 1000)}`;\n            if (!isFinite(Number(seconds))) {\n                throw new Error(\"retryAfter must be a number of milliseconds, a ms-compatible string, or a Date\");\n            }\n            this.retryAfter = seconds;\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        this.cause = options === null || options === void 0 ? void 0 : options.cause;\n    }\n}\nexports.RetryAfterError = RetryAfterError;\n//# sourceMappingURL=RetryAfterError.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9jb21wb25lbnRzL1JldHJ5QWZ0ZXJFcnJvci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHVCQUF1QjtBQUN2Qiw2QkFBNkIsbUJBQU8sQ0FBQyw0Q0FBSTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLGdHQUFnRztBQUMvSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9oYXJzaHNocml2YXN0YXYvRGVza3RvcC9Db2RpbmcgUHJvamVjdHMvSm9iLUFzc2lzdGFudC1BZ2VudC9ub2RlX21vZHVsZXMvaW5uZ2VzdC9jb21wb25lbnRzL1JldHJ5QWZ0ZXJFcnJvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUmV0cnlBZnRlckVycm9yID0gdm9pZCAwO1xuY29uc3QgbXNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwibXNcIikpO1xuLyoqXG4gKiBBbiBlcnJvciB0aGF0LCB3aGVuIHRocm93biwgaW5kaWNhdGVzIHRvIElubmdlc3QgdGhhdCB0aGUgZnVuY3Rpb24gc2hvdWxkIGJlXG4gKiByZXRyaWVkIGFmdGVyIGEgZ2l2ZW4gYW1vdW50IG9mIHRpbWUuXG4gKlxuICogQSBgbWVzc2FnZWAgbXVzdCBiZSBwcm92aWRlZCwgYXMgd2VsbCBhcyBhIGByZXRyeUFmdGVyYCBwYXJhbWV0ZXIsIHdoaWNoIGNhblxuICogYmUgYSBgbnVtYmVyYCBvZiBtaWxsaXNlY29uZHMsIGFuIGBtc2AtY29tcGF0aWJsZSB0aW1lIHN0cmluZywgb3IgYSBgRGF0ZWAuXG4gKlxuICogQW4gb3B0aW9uYWwgYGNhdXNlYCBjYW4gYmUgcHJvdmlkZWQgdG8gcHJvdmlkZSBtb3JlIGNvbnRleHQgdG8gdGhlIGVycm9yLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuY2xhc3MgUmV0cnlBZnRlckVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIFxuICAgIC8qKlxuICAgICAqIFRoZSB0aW1lIGFmdGVyIHdoaWNoIHRoZSBmdW5jdGlvbiBzaG91bGQgYmUgcmV0cmllZC4gUmVwcmVzZW50cyBlaXRoZXIgYVxuICAgICAqIG51bWJlciBvZiBtaWxsaXNlY29uZHMgb3IgYSBSRkMzMzM5IGRhdGUuXG4gICAgICovXG4gICAgcmV0cnlBZnRlciwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgaWYgKHJldHJ5QWZ0ZXIgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgICAgICB0aGlzLnJldHJ5QWZ0ZXIgPSByZXRyeUFmdGVyLnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBzZWNvbmRzID0gYCR7TWF0aC5jZWlsKCh0eXBlb2YgcmV0cnlBZnRlciA9PT0gXCJzdHJpbmdcIiA/ICgwLCBtc18xLmRlZmF1bHQpKHJldHJ5QWZ0ZXIpIDogcmV0cnlBZnRlcikgLyAxMDAwKX1gO1xuICAgICAgICAgICAgaWYgKCFpc0Zpbml0ZShOdW1iZXIoc2Vjb25kcykpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmV0cnlBZnRlciBtdXN0IGJlIGEgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcywgYSBtcy1jb21wYXRpYmxlIHN0cmluZywgb3IgYSBEYXRlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5yZXRyeUFmdGVyID0gc2Vjb25kcztcbiAgICAgICAgfVxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1hc3NpZ25tZW50XG4gICAgICAgIHRoaXMuY2F1c2UgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuY2F1c2U7XG4gICAgfVxufVxuZXhwb3J0cy5SZXRyeUFmdGVyRXJyb3IgPSBSZXRyeUFmdGVyRXJyb3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1SZXRyeUFmdGVyRXJyb3IuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/RetryAfterError.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/StepError.js":
/*!******************************************************!*\
  !*** ./node_modules/inngest/components/StepError.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StepError = void 0;\nconst errors_js_1 = __webpack_require__(/*! ../helpers/errors.js */ \"(rsc)/./node_modules/inngest/helpers/errors.js\");\nconst types_js_1 = __webpack_require__(/*! ../types.js */ \"(rsc)/./node_modules/inngest/types.js\");\n/**\n * An error that represents a step exhausting all retries and failing. This is\n * thrown by an Inngest step if it fails.\n *\n * It's synonymous with an `Error`, with the addition of the `stepId` that\n * failed.\n *\n * @public\n */\nclass StepError extends Error {\n    constructor(\n    /**\n     * The ID of the step that failed.\n     */\n    stepId, err) {\n        var _a;\n        const parsedErr = types_js_1.jsonErrorSchema.parse(err);\n        super(parsedErr.message);\n        this.stepId = stepId;\n        this.name = parsedErr.name;\n        this.stepId = stepId;\n        // Don't show the internal stack trace if we don't have one.\n        this.stack = (_a = parsedErr.stack) !== null && _a !== void 0 ? _a : undefined;\n        // Try setting the cause if we have one\n        this.cause = parsedErr.cause\n            ? (0, errors_js_1.deserializeError)(parsedErr.cause, true)\n            : undefined;\n    }\n}\nexports.StepError = StepError;\n//# sourceMappingURL=StepError.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9jb21wb25lbnRzL1N0ZXBFcnJvci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxpQkFBaUI7QUFDakIsb0JBQW9CLG1CQUFPLENBQUMsNEVBQXNCO0FBQ2xELG1CQUFtQixtQkFBTyxDQUFDLDBEQUFhO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9oYXJzaHNocml2YXN0YXYvRGVza3RvcC9Db2RpbmcgUHJvamVjdHMvSm9iLUFzc2lzdGFudC1BZ2VudC9ub2RlX21vZHVsZXMvaW5uZ2VzdC9jb21wb25lbnRzL1N0ZXBFcnJvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU3RlcEVycm9yID0gdm9pZCAwO1xuY29uc3QgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi4vaGVscGVycy9lcnJvcnMuanNcIik7XG5jb25zdCB0eXBlc19qc18xID0gcmVxdWlyZShcIi4uL3R5cGVzLmpzXCIpO1xuLyoqXG4gKiBBbiBlcnJvciB0aGF0IHJlcHJlc2VudHMgYSBzdGVwIGV4aGF1c3RpbmcgYWxsIHJldHJpZXMgYW5kIGZhaWxpbmcuIFRoaXMgaXNcbiAqIHRocm93biBieSBhbiBJbm5nZXN0IHN0ZXAgaWYgaXQgZmFpbHMuXG4gKlxuICogSXQncyBzeW5vbnltb3VzIHdpdGggYW4gYEVycm9yYCwgd2l0aCB0aGUgYWRkaXRpb24gb2YgdGhlIGBzdGVwSWRgIHRoYXRcbiAqIGZhaWxlZC5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmNsYXNzIFN0ZXBFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKipcbiAgICAgKiBUaGUgSUQgb2YgdGhlIHN0ZXAgdGhhdCBmYWlsZWQuXG4gICAgICovXG4gICAgc3RlcElkLCBlcnIpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCBwYXJzZWRFcnIgPSB0eXBlc19qc18xLmpzb25FcnJvclNjaGVtYS5wYXJzZShlcnIpO1xuICAgICAgICBzdXBlcihwYXJzZWRFcnIubWVzc2FnZSk7XG4gICAgICAgIHRoaXMuc3RlcElkID0gc3RlcElkO1xuICAgICAgICB0aGlzLm5hbWUgPSBwYXJzZWRFcnIubmFtZTtcbiAgICAgICAgdGhpcy5zdGVwSWQgPSBzdGVwSWQ7XG4gICAgICAgIC8vIERvbid0IHNob3cgdGhlIGludGVybmFsIHN0YWNrIHRyYWNlIGlmIHdlIGRvbid0IGhhdmUgb25lLlxuICAgICAgICB0aGlzLnN0YWNrID0gKF9hID0gcGFyc2VkRXJyLnN0YWNrKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB1bmRlZmluZWQ7XG4gICAgICAgIC8vIFRyeSBzZXR0aW5nIHRoZSBjYXVzZSBpZiB3ZSBoYXZlIG9uZVxuICAgICAgICB0aGlzLmNhdXNlID0gcGFyc2VkRXJyLmNhdXNlXG4gICAgICAgICAgICA/ICgwLCBlcnJvcnNfanNfMS5kZXNlcmlhbGl6ZUVycm9yKShwYXJzZWRFcnIuY2F1c2UsIHRydWUpXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG59XG5leHBvcnRzLlN0ZXBFcnJvciA9IFN0ZXBFcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN0ZXBFcnJvci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/StepError.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/execution/InngestExecution.js":
/*!***********************************************************************!*\
  !*** ./node_modules/inngest/components/execution/InngestExecution.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.InngestExecution = exports.PREFERRED_EXECUTION_VERSION = exports.ExecutionVersion = void 0;\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\"));\nconst consts_js_1 = __webpack_require__(/*! ../../helpers/consts.js */ \"(rsc)/./node_modules/inngest/helpers/consts.js\");\n/**\n * The execution models the SDK is aware of.\n *\n * This is used in a number of places to ensure all execution versions are\n * accounted for for a given operation.\n */\nvar ExecutionVersion;\n(function (ExecutionVersion) {\n    ExecutionVersion[ExecutionVersion[\"V0\"] = 0] = \"V0\";\n    ExecutionVersion[ExecutionVersion[\"V1\"] = 1] = \"V1\";\n    ExecutionVersion[ExecutionVersion[\"V2\"] = 2] = \"V2\";\n})(ExecutionVersion || (exports.ExecutionVersion = ExecutionVersion = {}));\n/**\n * The preferred execution version that will be used by the SDK when handling\n * brand new runs where the Executor is allowing us to choose.\n *\n * Changing this should not ever be a breaking change, as this will only change\n * new runs, not existing ones.\n */\nexports.PREFERRED_EXECUTION_VERSION = ExecutionVersion.V1;\nclass InngestExecution {\n    constructor(options) {\n        this.options = options;\n        this.debug = (0, debug_1.default)(`${consts_js_1.debugPrefix}:${this.options.runId}`);\n    }\n}\nexports.InngestExecution = InngestExecution;\n//# sourceMappingURL=InngestExecution.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9jb21wb25lbnRzL2V4ZWN1dGlvbi9Jbm5nZXN0RXhlY3V0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsd0JBQXdCLEdBQUcsbUNBQW1DLEdBQUcsd0JBQXdCO0FBQ3pGLGdDQUFnQyxtQkFBTyxDQUFDLHNEQUFPO0FBQy9DLG9CQUFvQixtQkFBTyxDQUFDLCtFQUF5QjtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyx1QkFBdUIsd0JBQXdCLHdCQUF3QjtBQUN4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMsd0JBQXdCLEdBQUcsbUJBQW1CO0FBQzNGO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9oYXJzaHNocml2YXN0YXYvRGVza3RvcC9Db2RpbmcgUHJvamVjdHMvSm9iLUFzc2lzdGFudC1BZ2VudC9ub2RlX21vZHVsZXMvaW5uZ2VzdC9jb21wb25lbnRzL2V4ZWN1dGlvbi9Jbm5nZXN0RXhlY3V0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Jbm5nZXN0RXhlY3V0aW9uID0gZXhwb3J0cy5QUkVGRVJSRURfRVhFQ1VUSU9OX1ZFUlNJT04gPSBleHBvcnRzLkV4ZWN1dGlvblZlcnNpb24gPSB2b2lkIDA7XG5jb25zdCBkZWJ1Z18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJkZWJ1Z1wiKSk7XG5jb25zdCBjb25zdHNfanNfMSA9IHJlcXVpcmUoXCIuLi8uLi9oZWxwZXJzL2NvbnN0cy5qc1wiKTtcbi8qKlxuICogVGhlIGV4ZWN1dGlvbiBtb2RlbHMgdGhlIFNESyBpcyBhd2FyZSBvZi5cbiAqXG4gKiBUaGlzIGlzIHVzZWQgaW4gYSBudW1iZXIgb2YgcGxhY2VzIHRvIGVuc3VyZSBhbGwgZXhlY3V0aW9uIHZlcnNpb25zIGFyZVxuICogYWNjb3VudGVkIGZvciBmb3IgYSBnaXZlbiBvcGVyYXRpb24uXG4gKi9cbnZhciBFeGVjdXRpb25WZXJzaW9uO1xuKGZ1bmN0aW9uIChFeGVjdXRpb25WZXJzaW9uKSB7XG4gICAgRXhlY3V0aW9uVmVyc2lvbltFeGVjdXRpb25WZXJzaW9uW1wiVjBcIl0gPSAwXSA9IFwiVjBcIjtcbiAgICBFeGVjdXRpb25WZXJzaW9uW0V4ZWN1dGlvblZlcnNpb25bXCJWMVwiXSA9IDFdID0gXCJWMVwiO1xuICAgIEV4ZWN1dGlvblZlcnNpb25bRXhlY3V0aW9uVmVyc2lvbltcIlYyXCJdID0gMl0gPSBcIlYyXCI7XG59KShFeGVjdXRpb25WZXJzaW9uIHx8IChleHBvcnRzLkV4ZWN1dGlvblZlcnNpb24gPSBFeGVjdXRpb25WZXJzaW9uID0ge30pKTtcbi8qKlxuICogVGhlIHByZWZlcnJlZCBleGVjdXRpb24gdmVyc2lvbiB0aGF0IHdpbGwgYmUgdXNlZCBieSB0aGUgU0RLIHdoZW4gaGFuZGxpbmdcbiAqIGJyYW5kIG5ldyBydW5zIHdoZXJlIHRoZSBFeGVjdXRvciBpcyBhbGxvd2luZyB1cyB0byBjaG9vc2UuXG4gKlxuICogQ2hhbmdpbmcgdGhpcyBzaG91bGQgbm90IGV2ZXIgYmUgYSBicmVha2luZyBjaGFuZ2UsIGFzIHRoaXMgd2lsbCBvbmx5IGNoYW5nZVxuICogbmV3IHJ1bnMsIG5vdCBleGlzdGluZyBvbmVzLlxuICovXG5leHBvcnRzLlBSRUZFUlJFRF9FWEVDVVRJT05fVkVSU0lPTiA9IEV4ZWN1dGlvblZlcnNpb24uVjE7XG5jbGFzcyBJbm5nZXN0RXhlY3V0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuZGVidWcgPSAoMCwgZGVidWdfMS5kZWZhdWx0KShgJHtjb25zdHNfanNfMS5kZWJ1Z1ByZWZpeH06JHt0aGlzLm9wdGlvbnMucnVuSWR9YCk7XG4gICAgfVxufVxuZXhwb3J0cy5Jbm5nZXN0RXhlY3V0aW9uID0gSW5uZ2VzdEV4ZWN1dGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUlubmdlc3RFeGVjdXRpb24uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/execution/InngestExecution.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/execution/als.js":
/*!**********************************************************!*\
  !*** ./node_modules/inngest/components/execution/als.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getAsyncLocalStorage = exports.getAsyncCtx = void 0;\n/**\n * A local-only symbol used as a key in global state to store the async local\n * storage instance.\n */\nconst alsSymbol = Symbol.for(\"inngest:als\");\n/**\n * Retrieve the async context for the current execution.\n */\nconst getAsyncCtx = async () => {\n    return (0, exports.getAsyncLocalStorage)().then((als) => als.getStore());\n};\nexports.getAsyncCtx = getAsyncCtx;\n/**\n * Get a singleton instance of `AsyncLocalStorage` used to store and retrieve\n * async context for the current execution.\n */\nconst getAsyncLocalStorage = async () => {\n    var _a;\n    var _b;\n    (_a = (_b = globalThis)[alsSymbol]) !== null && _a !== void 0 ? _a : (_b[alsSymbol] = new Promise(\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises, no-async-promise-executor\n    async (resolve) => {\n        try {\n            const { AsyncLocalStorage } = await Promise.resolve().then(() => __importStar(__webpack_require__(/*! node:async_hooks */ \"node:async_hooks\")));\n            resolve(new AsyncLocalStorage());\n        }\n        catch (err) {\n            console.warn(\"node:async_hooks is not supported in this runtime. Experimental async context is disabled.\");\n            resolve({\n                getStore: () => undefined,\n                run: (_, fn) => fn(),\n            });\n        }\n    }));\n    return globalThis[alsSymbol];\n};\nexports.getAsyncLocalStorage = getAsyncLocalStorage;\n//# sourceMappingURL=als.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9jb21wb25lbnRzL2V4ZWN1dGlvbi9hbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLDBDQUEwQyw0QkFBNEI7QUFDdEUsQ0FBQztBQUNEO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUEyRCxjQUFjO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNEJBQTRCLEdBQUcsbUJBQW1CO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixvQkFBb0Isa0RBQWtELG1CQUFPLENBQUMsMENBQWtCO0FBQ3BIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9oYXJzaHNocml2YXN0YXYvRGVza3RvcC9Db2RpbmcgUHJvamVjdHMvSm9iLUFzc2lzdGFudC1BZ2VudC9ub2RlX21vZHVsZXMvaW5uZ2VzdC9jb21wb25lbnRzL2V4ZWN1dGlvbi9hbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG93bktleXMgPSBmdW5jdGlvbihvKSB7XG4gICAgICAgIG93bktleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbiAobykge1xuICAgICAgICAgICAgdmFyIGFyID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBrIGluIG8pIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobywgaykpIGFyW2FyLmxlbmd0aF0gPSBrO1xuICAgICAgICAgICAgcmV0dXJuIGFyO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gb3duS2V5cyhvKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAobW9kKSB7XG4gICAgICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrID0gb3duS2V5cyhtb2QpLCBpID0gMDsgaSA8IGsubGVuZ3RoOyBpKyspIGlmIChrW2ldICE9PSBcImRlZmF1bHRcIikgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrW2ldKTtcbiAgICAgICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0QXN5bmNMb2NhbFN0b3JhZ2UgPSBleHBvcnRzLmdldEFzeW5jQ3R4ID0gdm9pZCAwO1xuLyoqXG4gKiBBIGxvY2FsLW9ubHkgc3ltYm9sIHVzZWQgYXMgYSBrZXkgaW4gZ2xvYmFsIHN0YXRlIHRvIHN0b3JlIHRoZSBhc3luYyBsb2NhbFxuICogc3RvcmFnZSBpbnN0YW5jZS5cbiAqL1xuY29uc3QgYWxzU3ltYm9sID0gU3ltYm9sLmZvcihcImlubmdlc3Q6YWxzXCIpO1xuLyoqXG4gKiBSZXRyaWV2ZSB0aGUgYXN5bmMgY29udGV4dCBmb3IgdGhlIGN1cnJlbnQgZXhlY3V0aW9uLlxuICovXG5jb25zdCBnZXRBc3luY0N0eCA9IGFzeW5jICgpID0+IHtcbiAgICByZXR1cm4gKDAsIGV4cG9ydHMuZ2V0QXN5bmNMb2NhbFN0b3JhZ2UpKCkudGhlbigoYWxzKSA9PiBhbHMuZ2V0U3RvcmUoKSk7XG59O1xuZXhwb3J0cy5nZXRBc3luY0N0eCA9IGdldEFzeW5jQ3R4O1xuLyoqXG4gKiBHZXQgYSBzaW5nbGV0b24gaW5zdGFuY2Ugb2YgYEFzeW5jTG9jYWxTdG9yYWdlYCB1c2VkIHRvIHN0b3JlIGFuZCByZXRyaWV2ZVxuICogYXN5bmMgY29udGV4dCBmb3IgdGhlIGN1cnJlbnQgZXhlY3V0aW9uLlxuICovXG5jb25zdCBnZXRBc3luY0xvY2FsU3RvcmFnZSA9IGFzeW5jICgpID0+IHtcbiAgICB2YXIgX2E7XG4gICAgdmFyIF9iO1xuICAgIChfYSA9IChfYiA9IGdsb2JhbFRoaXMpW2Fsc1N5bWJvbF0pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IChfYlthbHNTeW1ib2xdID0gbmV3IFByb21pc2UoXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1taXN1c2VkLXByb21pc2VzLCBuby1hc3luYy1wcm9taXNlLWV4ZWN1dG9yXG4gICAgYXN5bmMgKHJlc29sdmUpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHsgQXN5bmNMb2NhbFN0b3JhZ2UgfSA9IGF3YWl0IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCJub2RlOmFzeW5jX2hvb2tzXCIpKSk7XG4gICAgICAgICAgICByZXNvbHZlKG5ldyBBc3luY0xvY2FsU3RvcmFnZSgpKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJub2RlOmFzeW5jX2hvb2tzIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBydW50aW1lLiBFeHBlcmltZW50YWwgYXN5bmMgY29udGV4dCBpcyBkaXNhYmxlZC5cIik7XG4gICAgICAgICAgICByZXNvbHZlKHtcbiAgICAgICAgICAgICAgICBnZXRTdG9yZTogKCkgPT4gdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHJ1bjogKF8sIGZuKSA9PiBmbigpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KSk7XG4gICAgcmV0dXJuIGdsb2JhbFRoaXNbYWxzU3ltYm9sXTtcbn07XG5leHBvcnRzLmdldEFzeW5jTG9jYWxTdG9yYWdlID0gZ2V0QXN5bmNMb2NhbFN0b3JhZ2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hbHMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/execution/als.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/execution/otel/access.js":
/*!******************************************************************!*\
  !*** ./node_modules/inngest/components/execution/otel/access.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * A file used to access client processors safely without also importing any\n * otel-specific libraries. Useful for ensuring that the otel libraries can be\n * tree-shaken if they're not used directly by the user.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.clientProcessorMap = void 0;\n/**\n * A map of Inngest clients to their OTel span processors. This is used to\n * ensure that we only create one span processor per client, and that we can\n * access the span processor from the client without exposing the OTel\n * libraries to the user.\n */\nexports.clientProcessorMap = new WeakMap();\n//# sourceMappingURL=access.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9jb21wb25lbnRzL2V4ZWN1dGlvbi9vdGVsL2FjY2Vzcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQiIsInNvdXJjZXMiOlsiL1VzZXJzL2hhcnNoc2hyaXZhc3Rhdi9EZXNrdG9wL0NvZGluZyBQcm9qZWN0cy9Kb2ItQXNzaXN0YW50LUFnZW50L25vZGVfbW9kdWxlcy9pbm5nZXN0L2NvbXBvbmVudHMvZXhlY3V0aW9uL290ZWwvYWNjZXNzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBBIGZpbGUgdXNlZCB0byBhY2Nlc3MgY2xpZW50IHByb2Nlc3NvcnMgc2FmZWx5IHdpdGhvdXQgYWxzbyBpbXBvcnRpbmcgYW55XG4gKiBvdGVsLXNwZWNpZmljIGxpYnJhcmllcy4gVXNlZnVsIGZvciBlbnN1cmluZyB0aGF0IHRoZSBvdGVsIGxpYnJhcmllcyBjYW4gYmVcbiAqIHRyZWUtc2hha2VuIGlmIHRoZXkncmUgbm90IHVzZWQgZGlyZWN0bHkgYnkgdGhlIHVzZXIuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY2xpZW50UHJvY2Vzc29yTWFwID0gdm9pZCAwO1xuLyoqXG4gKiBBIG1hcCBvZiBJbm5nZXN0IGNsaWVudHMgdG8gdGhlaXIgT1RlbCBzcGFuIHByb2Nlc3NvcnMuIFRoaXMgaXMgdXNlZCB0b1xuICogZW5zdXJlIHRoYXQgd2Ugb25seSBjcmVhdGUgb25lIHNwYW4gcHJvY2Vzc29yIHBlciBjbGllbnQsIGFuZCB0aGF0IHdlIGNhblxuICogYWNjZXNzIHRoZSBzcGFuIHByb2Nlc3NvciBmcm9tIHRoZSBjbGllbnQgd2l0aG91dCBleHBvc2luZyB0aGUgT1RlbFxuICogbGlicmFyaWVzIHRvIHRoZSB1c2VyLlxuICovXG5leHBvcnRzLmNsaWVudFByb2Nlc3Nvck1hcCA9IG5ldyBXZWFrTWFwKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hY2Nlc3MuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/execution/otel/access.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/execution/otel/consts.js":
/*!******************************************************************!*\
  !*** ./node_modules/inngest/components/execution/otel/consts.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Attribute = exports.TraceStateKey = exports.debugPrefix = void 0;\nexports.debugPrefix = \"inngest:otel\";\nvar TraceStateKey;\n(function (TraceStateKey) {\n    TraceStateKey[\"AppId\"] = \"inngest@app\";\n    TraceStateKey[\"FunctionId\"] = \"inngest@fn\";\n})(TraceStateKey || (exports.TraceStateKey = TraceStateKey = {}));\nvar Attribute;\n(function (Attribute) {\n    Attribute[\"InngestTraceparent\"] = \"inngest.traceparent\";\n    Attribute[\"InngestRunId\"] = \"sdk.run.id\";\n    Attribute[\"InngestAppId1\"] = \"sdk.app.id\";\n    Attribute[\"InngestAppId2\"] = \"sys.app.id\";\n    Attribute[\"InngestFunctionId\"] = \"sys.function.id\";\n})(Attribute || (exports.Attribute = Attribute = {}));\n//# sourceMappingURL=consts.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9jb21wb25lbnRzL2V4ZWN1dGlvbi9vdGVsL2NvbnN0cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxpQkFBaUIsR0FBRyxxQkFBcUIsR0FBRyxtQkFBbUI7QUFDL0QsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxvQkFBb0IscUJBQXFCLHFCQUFxQjtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsZ0JBQWdCLGlCQUFpQixpQkFBaUI7QUFDbkQiLCJzb3VyY2VzIjpbIi9Vc2Vycy9oYXJzaHNocml2YXN0YXYvRGVza3RvcC9Db2RpbmcgUHJvamVjdHMvSm9iLUFzc2lzdGFudC1BZ2VudC9ub2RlX21vZHVsZXMvaW5uZ2VzdC9jb21wb25lbnRzL2V4ZWN1dGlvbi9vdGVsL2NvbnN0cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQXR0cmlidXRlID0gZXhwb3J0cy5UcmFjZVN0YXRlS2V5ID0gZXhwb3J0cy5kZWJ1Z1ByZWZpeCA9IHZvaWQgMDtcbmV4cG9ydHMuZGVidWdQcmVmaXggPSBcImlubmdlc3Q6b3RlbFwiO1xudmFyIFRyYWNlU3RhdGVLZXk7XG4oZnVuY3Rpb24gKFRyYWNlU3RhdGVLZXkpIHtcbiAgICBUcmFjZVN0YXRlS2V5W1wiQXBwSWRcIl0gPSBcImlubmdlc3RAYXBwXCI7XG4gICAgVHJhY2VTdGF0ZUtleVtcIkZ1bmN0aW9uSWRcIl0gPSBcImlubmdlc3RAZm5cIjtcbn0pKFRyYWNlU3RhdGVLZXkgfHwgKGV4cG9ydHMuVHJhY2VTdGF0ZUtleSA9IFRyYWNlU3RhdGVLZXkgPSB7fSkpO1xudmFyIEF0dHJpYnV0ZTtcbihmdW5jdGlvbiAoQXR0cmlidXRlKSB7XG4gICAgQXR0cmlidXRlW1wiSW5uZ2VzdFRyYWNlcGFyZW50XCJdID0gXCJpbm5nZXN0LnRyYWNlcGFyZW50XCI7XG4gICAgQXR0cmlidXRlW1wiSW5uZ2VzdFJ1bklkXCJdID0gXCJzZGsucnVuLmlkXCI7XG4gICAgQXR0cmlidXRlW1wiSW5uZ2VzdEFwcElkMVwiXSA9IFwic2RrLmFwcC5pZFwiO1xuICAgIEF0dHJpYnV0ZVtcIklubmdlc3RBcHBJZDJcIl0gPSBcInN5cy5hcHAuaWRcIjtcbiAgICBBdHRyaWJ1dGVbXCJJbm5nZXN0RnVuY3Rpb25JZFwiXSA9IFwic3lzLmZ1bmN0aW9uLmlkXCI7XG59KShBdHRyaWJ1dGUgfHwgKGV4cG9ydHMuQXR0cmlidXRlID0gQXR0cmlidXRlID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0cy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/execution/otel/consts.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/execution/otel/middleware.js":
/*!**********************************************************************!*\
  !*** ./node_modules/inngest/components/execution/otel/middleware.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _InngestOtelDiagLogger_logger;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.otelMiddleware = void 0;\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\"));\nconst version_js_1 = __webpack_require__(/*! ../../../version.js */ \"(rsc)/./node_modules/inngest/version.js\");\nconst InngestMiddleware_js_1 = __webpack_require__(/*! ../../InngestMiddleware.js */ \"(rsc)/./node_modules/inngest/components/InngestMiddleware.js\");\nconst access_js_1 = __webpack_require__(/*! ./access.js */ \"(rsc)/./node_modules/inngest/components/execution/otel/access.js\");\nconst consts_js_1 = __webpack_require__(/*! ./consts.js */ \"(rsc)/./node_modules/inngest/components/execution/otel/consts.js\");\nconst util_js_1 = __webpack_require__(/*! ./util.js */ \"(rsc)/./node_modules/inngest/components/execution/otel/util.js\");\nconst debug = (0, debug_1.default)(`${consts_js_1.debugPrefix}:middleware`);\nclass InngestOtelDiagLogger {\n    constructor() {\n        _InngestOtelDiagLogger_logger.set(this, (0, debug_1.default)(`${consts_js_1.debugPrefix}:diag`));\n        this.debug = __classPrivateFieldGet(this, _InngestOtelDiagLogger_logger, \"f\");\n        this.error = __classPrivateFieldGet(this, _InngestOtelDiagLogger_logger, \"f\");\n        this.info = __classPrivateFieldGet(this, _InngestOtelDiagLogger_logger, \"f\");\n        this.verbose = __classPrivateFieldGet(this, _InngestOtelDiagLogger_logger, \"f\");\n        this.warn = __classPrivateFieldGet(this, _InngestOtelDiagLogger_logger, \"f\");\n    }\n}\n_InngestOtelDiagLogger_logger = new WeakMap();\n/**\n * Middleware the captures and exports spans relevant to Inngest runs using\n * OTel.\n *\n * This can be used to attach additional spans and data to the existing traces\n * in your Inngest dashboard (or Dev Server).\n */\nconst otelMiddleware = ({ behaviour = \"auto\", instrumentations, logLevel = api_1.DiagLogLevel.ERROR, } = {}) => {\n    debug(\"behaviour:\", behaviour);\n    let processor;\n    switch (behaviour) {\n        case \"auto\": {\n            const extended = (0, util_js_1.extendProvider)(behaviour);\n            if (extended.success) {\n                debug(\"extended existing provider\");\n                processor = extended.processor;\n                break;\n            }\n            const created = (0, util_js_1.createProvider)(behaviour, instrumentations);\n            if (created.success) {\n                debug(\"created new provider\");\n                processor = created.processor;\n                break;\n            }\n            console.warn(\"no provider found to extend and unable to create one\");\n            break;\n        }\n        case \"createProvider\": {\n            const created = (0, util_js_1.createProvider)(behaviour, instrumentations);\n            if (created.success) {\n                debug(\"created new provider\");\n                processor = created.processor;\n                break;\n            }\n            console.warn(\"unable to create provider, OTel middleware will not work\");\n            break;\n        }\n        case \"extendProvider\": {\n            const extended = (0, util_js_1.extendProvider)(behaviour);\n            if (extended.success) {\n                debug(\"extended existing provider\");\n                processor = extended.processor;\n                break;\n            }\n            console.warn('unable to extend provider, OTel middleware will not work. Either allow the middleware to create a provider by setting `behaviour: \"createProvider\"` or `behaviour: \"auto\"`, or make sure that the provider is created and imported before the middleware is used.');\n            break;\n        }\n        case \"off\": {\n            break;\n        }\n        default: {\n            // unknown\n            console.warn(`unknown behaviour ${JSON.stringify(behaviour)}, defaulting to \"off\"`);\n        }\n    }\n    return new InngestMiddleware_js_1.InngestMiddleware({\n        name: \"Inngest: OTel\",\n        init({ client }) {\n            // Set the logger for our otel processors and exporters.\n            // If this is called multiple times (for example by the user in some other\n            // custom code), then only the first call is set, so we don't have to\n            // worry about overwriting it here accidentally.\n            //\n            debug(\"set otel diagLogger:\", api_1.diag.setLogger(new InngestOtelDiagLogger(), logLevel));\n            if (processor) {\n                access_js_1.clientProcessorMap.set(client, processor);\n            }\n            return {\n                onFunctionRun() {\n                    return {\n                        transformInput() {\n                            return {\n                                ctx: {\n                                    /**\n                                     * A tracer that can be used to create spans within a step\n                                     * that will be displayed on the Inngest dashboard (or Dev\n                                     * Server).\n                                     *\n                                     * Note that creating spans outside of steps when the function\n                                     * contains `step.*()` calls is not currently supported.\n                                     */\n                                    tracer: api_1.trace.getTracer(\"inngest\", version_js_1.version),\n                                },\n                            };\n                        },\n                        async beforeResponse() {\n                            // Should this be awaited? And is it fine to flush after every\n                            // execution?\n                            await (processor === null || processor === void 0 ? void 0 : processor.forceFlush());\n                        },\n                    };\n                },\n            };\n        },\n    });\n};\nexports.otelMiddleware = otelMiddleware;\n//# sourceMappingURL=middleware.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/execution/otel/middleware.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/execution/otel/processor.js":
/*!*********************************************************************!*\
  !*** ./node_modules/inngest/components/execution/otel/processor.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _InngestSpanProcessor_batcher, _InngestSpanProcessor_spansToExport, _InngestSpanProcessor_traceParents, _InngestSpanProcessor_spanCleanup;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PublicInngestSpanProcessor = exports.InngestSpanProcessor = void 0;\nconst exporter_trace_otlp_http_1 = __webpack_require__(/*! @opentelemetry/exporter-trace-otlp-http */ \"(rsc)/./node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/index.js\");\nconst resources_1 = __webpack_require__(/*! @opentelemetry/resources */ \"(rsc)/./node_modules/@opentelemetry/resources/build/esm/index.js\");\nconst sdk_trace_base_1 = __webpack_require__(/*! @opentelemetry/sdk-trace-base */ \"(rsc)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/index.js\");\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\"));\nconst consts_js_1 = __webpack_require__(/*! ../../../helpers/consts.js */ \"(rsc)/./node_modules/inngest/helpers/consts.js\");\nconst devserver_js_1 = __webpack_require__(/*! ../../../helpers/devserver.js */ \"(rsc)/./node_modules/inngest/helpers/devserver.js\");\nconst env_js_1 = __webpack_require__(/*! ../../../helpers/env.js */ \"(rsc)/./node_modules/inngest/helpers/env.js\");\nconst als_js_1 = __webpack_require__(/*! ../als.js */ \"(rsc)/./node_modules/inngest/components/execution/als.js\");\nconst access_js_1 = __webpack_require__(/*! ./access.js */ \"(rsc)/./node_modules/inngest/components/execution/otel/access.js\");\nconst consts_js_2 = __webpack_require__(/*! ./consts.js */ \"(rsc)/./node_modules/inngest/components/execution/otel/consts.js\");\nconst processorDebug = (0, debug_1.default)(`${consts_js_2.debugPrefix}:InngestSpanProcessor`);\n/**\n * A set of resource attributes that are used to identify the Inngest app and\n *  the function that is being executed. This is used to store the resource\n * attributes for the spans that are exported to the Inngest endpoint, and cache\n *  them for later use.\n */\nlet _resourceAttributes;\n/**\n * An OTel span processor that is used to export spans to the Inngest endpoint.\n * This is used to track spans that are created within an Inngest run and export\n * them to the Inngest endpoint for tracing.\n *\n * It's careful to only pick relevant spans to export and will not send any\n * irrelevant spans to the Inngest endpoint.\n *\n * THIS IS THE INTERNAL IMPLEMENTATION OF THE SPAN PROCESSOR AND SHOULD NOT BE\n * USED BY USERS DIRECTLY. USE THE {@link PublicInngestSpanProcessor} CLASS\n * INSTEAD.\n */\nclass InngestSpanProcessor {\n    /**\n     * An OTel span processor that is used to export spans to the Inngest endpoint.\n     * This is used to track spans that are created within an Inngest run and export\n     * them to the Inngest endpoint for tracing.\n     *\n     * It's careful to only pick relevant spans to export and will not send any\n     * irrelevant spans to the Inngest endpoint.\n     */\n    constructor(\n    /**\n     * The app that this span processor is associated with. This is used to\n     * determine the Inngest endpoint to export spans to.\n     *\n     * It is optional here as this is the private constructor and only used\n     * internally; we set `app` elsewhere as when we create the processor (as\n     * early as possible when the process starts) we don't necessarily have the\n     * app available yet.\n     *\n     * So, internally we can delay setting ths until later.\n     */\n    app) {\n        /**\n         * A `BatchSpanProcessor` that is used to export spans to the Inngest\n         * endpoint. This is created lazily to avoid creating it until the Inngest App\n         * has been initialized and has had a chance to receive environment variables,\n         * which may be from an incoming request.\n         */\n        _InngestSpanProcessor_batcher.set(this, void 0);\n        /**\n         * A set of spans used to track spans that we care about, so that we can\n         * export them to the OTel endpoint.\n         *\n         * If a span falls out of reference, it will be removed from this set as we'll\n         * never get a chance to export it or remove it anyway.\n         */\n        _InngestSpanProcessor_spansToExport.set(this, new WeakSet());\n        /**\n         * A map of span IDs to their parent state, which includes a block of\n         * information that can be used and pushed back to the Inngest endpoint to\n         * ingest spans.\n         */\n        _InngestSpanProcessor_traceParents.set(this, new Map());\n        /**\n         * A registry used to clean up items from the `traceParents` map when spans\n         * fall out of reference. This is used to avoid memory leaks in the case where\n         * a span is not exported, remains unended, and is left in memory before being\n         * GC'd.\n         */\n        _InngestSpanProcessor_spanCleanup.set(this, new FinalizationRegistry((spanId) => {\n            if (spanId) {\n                __classPrivateFieldGet(this, _InngestSpanProcessor_traceParents, \"f\").delete(spanId);\n            }\n        }));\n        if (app) {\n            access_js_1.clientProcessorMap.set(app, this);\n        }\n    }\n    /**\n     * In order to only capture a subset of spans, we need to declare the initial\n     * span that we care about and then export its children.\n     *\n     * Call this method (ideally just before execution starts) with that initial\n     * span to trigger capturing all following children as well as initialize the\n     * batcher.\n     */\n    declareStartingSpan({ span, runId, traceparent, tracestate, }) {\n        // Upsert the batcher ready for later. We do this here to bootstrap it with\n        // the correct async context as soon as we can. As this method is only\n        // called just before execution, we know we're all set up.\n        //\n        // Waiting to call this until we actually need the batcher would mean that\n        // we might not have the correct async context set up, as we'd likely be in\n        // some span lifecycle method that doesn't have the same chain of execution.\n        void this.ensureBatcherInitialized();\n        // If we don't have a traceparent, then we can't track this span. This is\n        // likely a span that we don't care about, so we can ignore it.\n        if (!traceparent) {\n            return processorDebug(\"no traceparent found for span\", span.spanContext().spanId, \"so skipping it\");\n        }\n        // We also attempt to use `tracestate`. The values we fetch from these\n        // should be optional, as it's likely the Executor won't need us to parrot\n        // them back in later versions.\n        let appId;\n        let functionId;\n        if (tracestate) {\n            try {\n                const entries = Object.fromEntries(tracestate.split(\",\").map((kv) => kv.split(\"=\")));\n                appId = entries[consts_js_2.TraceStateKey.AppId];\n                functionId = entries[consts_js_2.TraceStateKey.FunctionId];\n            }\n            catch (err) {\n                processorDebug(\"failed to parse tracestate\", tracestate, \"so skipping it;\", err);\n            }\n        }\n        // This is a span that we care about, so let's make sure it and its\n        // children are exported.\n        processorDebug.extend(\"declareStartingSpan\")(\"declaring:\", span.spanContext().spanId, \"for traceparent\", traceparent);\n        // Set a load of attributes on this span so that we can nicely identify\n        // runtime, paths, etc. Only this span will have these attributes.\n        span.setAttributes(InngestSpanProcessor.resourceAttributes.attributes);\n        this.trackSpan({\n            appId,\n            functionId,\n            runId,\n            traceparent,\n        }, span);\n    }\n    /**\n     * A getter for retrieving resource attributes for the current process. This\n     * is used to set the resource attributes for the spans that are exported to\n     * the Inngest endpoint, and cache them for later use.\n     */\n    static get resourceAttributes() {\n        if (!_resourceAttributes) {\n            _resourceAttributes = (0, resources_1.detectResourcesSync)({\n                detectors: [\n                    resources_1.osDetectorSync,\n                    resources_1.envDetectorSync,\n                    resources_1.hostDetectorSync,\n                    resources_1.processDetectorSync,\n                    resources_1.serviceInstanceIdDetectorSync,\n                ],\n            });\n        }\n        return _resourceAttributes;\n    }\n    /**\n     * The batcher is a singleton that is used to export spans to the OTel\n     * endpoint. It is created lazily to avoid creating it until the Inngest App\n     * has been initialized and has had a chance to receive environment variables,\n     * which may be from an incoming request.\n     *\n     * The batcher is only referenced once we've found a span we're interested in,\n     * so this should always have everything it needs on the app by then.\n     */\n    ensureBatcherInitialized() {\n        if (!__classPrivateFieldGet(this, _InngestSpanProcessor_batcher, \"f\")) {\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises, no-async-promise-executor\n            __classPrivateFieldSet(this, _InngestSpanProcessor_batcher, new Promise(async (resolve, reject) => {\n                var _a;\n                try {\n                    // We retrieve the app from the async context, so we must make sure\n                    // that this function is called from the correct chain.\n                    const store = await (0, als_js_1.getAsyncCtx)();\n                    if (!store) {\n                        throw new Error(\"No async context found; cannot create batcher to export traces\");\n                    }\n                    const app = store.app;\n                    // Fetch the URL for the Inngest endpoint using the app's config.\n                    let url;\n                    const path = \"/v1/traces/userland\";\n                    if (app.apiBaseUrl) {\n                        url = new URL(path, app.apiBaseUrl);\n                    }\n                    else {\n                        url = new URL(path, consts_js_1.defaultInngestApiBaseUrl);\n                        if (app[\"mode\"] && app[\"mode\"].isDev && app[\"mode\"].isInferred) {\n                            const devHost = (0, env_js_1.devServerHost)() || consts_js_1.defaultDevServerHost;\n                            const hasDevServer = await (0, devserver_js_1.devServerAvailable)(devHost, app[\"fetch\"]);\n                            if (hasDevServer) {\n                                url = new URL(path, devHost);\n                            }\n                        }\n                        else if ((_a = app[\"mode\"]) === null || _a === void 0 ? void 0 : _a.explicitDevUrl) {\n                            url = new URL(path, app[\"mode\"].explicitDevUrl.href);\n                        }\n                    }\n                    processorDebug(\"batcher lazily accessed; creating new batcher with URL\", url);\n                    const exporter = new exporter_trace_otlp_http_1.OTLPTraceExporter({\n                        url: url.href,\n                        headers: {\n                            Authorization: `Bearer ${app[\"inngestApi\"][\"signingKey\"]}`,\n                        },\n                    });\n                    resolve(new sdk_trace_base_1.BatchSpanProcessor(exporter));\n                }\n                catch (err) {\n                    reject(err);\n                }\n            }), \"f\");\n        }\n        return __classPrivateFieldGet(this, _InngestSpanProcessor_batcher, \"f\");\n    }\n    /**\n     * Mark a span as being tracked by this processor, meaning it will be exported\n     * to the Inggest endpoint when it ends.\n     */\n    trackSpan(parentState, span) {\n        const spanId = span.spanContext().spanId;\n        __classPrivateFieldGet(this, _InngestSpanProcessor_spanCleanup, \"f\").register(span, spanId, span);\n        __classPrivateFieldGet(this, _InngestSpanProcessor_spansToExport, \"f\").add(span);\n        __classPrivateFieldGet(this, _InngestSpanProcessor_traceParents, \"f\").set(spanId, parentState);\n        span.setAttribute(consts_js_2.Attribute.InngestTraceparent, parentState.traceparent);\n        span.setAttribute(consts_js_2.Attribute.InngestRunId, parentState.runId);\n        // Setting app ID is optional; it's likely in future versions of the\n        // Executor that we don't need to parrot this back.\n        if (parentState.appId) {\n            span.setAttribute(consts_js_2.Attribute.InngestAppId1, parentState.appId);\n            span.setAttribute(consts_js_2.Attribute.InngestAppId2, parentState.appId);\n        }\n        // Setting function ID is optional; it's likely in future versions of the\n        // Executor that we don't need to parrot this back.\n        if (parentState.functionId) {\n            span.setAttribute(consts_js_2.Attribute.InngestFunctionId, parentState.functionId);\n        }\n    }\n    /**\n     * Clean up any references to a span that has ended. This is used to avoid\n     * memory leaks in the case where a span is not exported, remains unended, and\n     * is left in memory before being GC'd.\n     */\n    cleanupSpan(span) {\n        const spanId = span.spanContext().spanId;\n        // This span is no longer in use, so we can remove it from the cleanup\n        // registry.\n        __classPrivateFieldGet(this, _InngestSpanProcessor_spanCleanup, \"f\").unregister(span);\n        __classPrivateFieldGet(this, _InngestSpanProcessor_spansToExport, \"f\").delete(span);\n        __classPrivateFieldGet(this, _InngestSpanProcessor_traceParents, \"f\").delete(spanId);\n    }\n    /**\n     * An implementation of the `onStart` method from the `SpanProcessor`\n     * interface. This is called when a span is started, and is used to track\n     * spans that are children of spans we care about.\n     */\n    onStart(span) {\n        const debug = processorDebug.extend(\"onStart\");\n        const spanId = span.spanContext().spanId;\n        // 🤫 It seems to work\n        const parentSpanId = span.parentSpanId;\n        // The root span isn't captured here, but we can capture children of it\n        // here.\n        if (!parentSpanId) {\n            // All spans that Inngest cares about will have a parent, so ignore this\n            debug(\"no parent span ID for\", spanId, \"so skipping it\");\n            return;\n        }\n        const parentState = __classPrivateFieldGet(this, _InngestSpanProcessor_traceParents, \"f\").get(parentSpanId);\n        if (parentState) {\n            // This span is a child of a span we care about, so add it to the list of\n            // tracked spans so that we also capture its children\n            debug(\"found traceparent\", parentState, \"in span ID\", parentSpanId, \"so adding\", spanId);\n            this.trackSpan(parentState, span);\n        }\n    }\n    /**\n     * An implementation of the `onEnd` method from the `SpanProcessor` interface.\n     * This is called when a span ends, and is used to export spans to the Inngest\n     * endpoint.\n     */\n    onEnd(span) {\n        const debug = processorDebug.extend(\"onEnd\");\n        const spanId = span.spanContext().spanId;\n        try {\n            if (__classPrivateFieldGet(this, _InngestSpanProcessor_spansToExport, \"f\").has(span)) {\n                if (!__classPrivateFieldGet(this, _InngestSpanProcessor_batcher, \"f\")) {\n                    return debug(\"batcher not initialized, so failed exporting span\", spanId);\n                }\n                debug(\"exporting span\", spanId);\n                return void __classPrivateFieldGet(this, _InngestSpanProcessor_batcher, \"f\").then((batcher) => batcher.onEnd(span));\n            }\n            debug(\"not exporting span\", spanId, \"as we don't care about it\");\n        }\n        finally {\n            this.cleanupSpan(span);\n        }\n    }\n    /**\n     * An implementation of the `forceFlush` method from the `SpanProcessor`\n     * interface. This is called to force the processor to flush any spans that\n     * are currently in the batcher. This is used to ensure that spans are\n     * exported to the Inngest endpoint before the process exits.\n     *\n     * Notably, we call this in the `beforeResponse` middleware hook to ensure\n     * that spans for a run as exported as soon as possible and before the\n     * serverless process is killed.\n     */\n    async forceFlush() {\n        var _a;\n        const flushDebug = processorDebug.extend(\"forceFlush\");\n        flushDebug(\"force flushing batcher\");\n        return (_a = __classPrivateFieldGet(this, _InngestSpanProcessor_batcher, \"f\")) === null || _a === void 0 ? void 0 : _a.then((batcher) => batcher.forceFlush()).catch((err) => {\n            flushDebug(\"error flushing batcher\", err, \"ignoring\");\n        });\n    }\n    async shutdown() {\n        var _a;\n        processorDebug.extend(\"shutdown\")(\"shutting down batcher\");\n        return (_a = __classPrivateFieldGet(this, _InngestSpanProcessor_batcher, \"f\")) === null || _a === void 0 ? void 0 : _a.then((batcher) => batcher.shutdown());\n    }\n}\nexports.InngestSpanProcessor = InngestSpanProcessor;\n_InngestSpanProcessor_batcher = new WeakMap(), _InngestSpanProcessor_spansToExport = new WeakMap(), _InngestSpanProcessor_traceParents = new WeakMap(), _InngestSpanProcessor_spanCleanup = new WeakMap();\n/**\n * An OTel span processor that is used to export spans to the Inngest endpoint.\n * This is used to track spans that are created within an Inngest run and export\n * them to the Inngest endpoint for tracing.\n *\n * It's careful to only pick relevant spans to export and will not send any\n * irrelevant spans to the Inngest endpoint.\n */\nclass PublicInngestSpanProcessor extends InngestSpanProcessor {\n    constructor(\n    /**\n     * The app that this span processor is associated with. This is used to\n     * determine the Inngest endpoint to export spans to.\n     */\n    app) {\n        super(app);\n    }\n}\nexports.PublicInngestSpanProcessor = PublicInngestSpanProcessor;\n//# sourceMappingURL=processor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/execution/otel/processor.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/execution/otel/util.js":
/*!****************************************************************!*\
  !*** ./node_modules/inngest/components/execution/otel/util.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.extendProvider = exports.createProvider = void 0;\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst auto_instrumentations_node_1 = __webpack_require__(/*! @opentelemetry/auto-instrumentations-node */ \"(rsc)/./node_modules/@opentelemetry/auto-instrumentations-node/build/src/index.js\");\nconst context_async_hooks_1 = __webpack_require__(/*! @opentelemetry/context-async-hooks */ \"(rsc)/./node_modules/@opentelemetry/context-async-hooks/build/src/index.js\");\nconst instrumentation_1 = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(rsc)/./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst sdk_trace_base_1 = __webpack_require__(/*! @opentelemetry/sdk-trace-base */ \"(rsc)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/index.js\");\nconst processor_js_1 = __webpack_require__(/*! ./processor.js */ \"(rsc)/./node_modules/inngest/components/execution/otel/processor.js\");\nconst createProvider = (behaviour, instrumentations = []) => {\n    // TODO Check if there's an existing provider\n    const processor = new processor_js_1.InngestSpanProcessor();\n    const p = new sdk_trace_base_1.BasicTracerProvider({\n        spanProcessors: [processor],\n    });\n    const instrList = [\n        ...instrumentations,\n        ...(0, auto_instrumentations_node_1.getNodeAutoInstrumentations)(),\n    ];\n    (0, instrumentation_1.registerInstrumentations)({\n        instrumentations: instrList,\n    });\n    p.register({\n        contextManager: new context_async_hooks_1.AsyncHooksContextManager().enable(),\n    });\n    return { success: true, processor };\n};\nexports.createProvider = createProvider;\n/**\n * Attempts to extend the existing OTel provider with our processor. Returns true\n * if the provider was extended, false if it was not.\n */\nconst extendProvider = (behaviour) => {\n    // Attempt to add our processor and export to the existing provider\n    const existingProvider = api_1.trace.getTracerProvider();\n    if (!existingProvider) {\n        if (behaviour !== \"auto\") {\n            console.warn('No existing OTel provider found and behaviour is \"extendProvider\". Inngest\\'s OTel middleware will not work. Either allow the middleware to create a provider by setting `behaviour: \"createProvider\"` or `behaviour: \"auto\"`, or make sure that the provider is created and imported before the middleware is used.');\n        }\n        return { success: false };\n    }\n    if (!(\"addSpanProcessor\" in existingProvider) ||\n        typeof existingProvider.addSpanProcessor !== \"function\") {\n        // TODO Could we also add a function the user can provide that takes the\n        // processor and adds it? That way they could support many different\n        // providers.\n        if (behaviour !== \"auto\") {\n            console.warn(\"Existing OTel provider is not a BasicTracerProvider. Inngest's OTel middleware will not work, as it can only extend an existing processor if it's a BasicTracerProvider.\");\n        }\n        return { success: false };\n    }\n    const processor = new processor_js_1.InngestSpanProcessor();\n    existingProvider.addSpanProcessor(processor);\n    return { success: true, processor };\n};\nexports.extendProvider = extendProvider;\n//# sourceMappingURL=util.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9jb21wb25lbnRzL2V4ZWN1dGlvbi9vdGVsL3V0aWwuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0JBQXNCLEdBQUcsc0JBQXNCO0FBQy9DLGNBQWMsbUJBQU8sQ0FBQyxzRkFBb0I7QUFDMUMscUNBQXFDLG1CQUFPLENBQUMsb0lBQTJDO0FBQ3hGLDhCQUE4QixtQkFBTyxDQUFDLHNIQUFvQztBQUMxRSwwQkFBMEIsbUJBQU8sQ0FBQyw4R0FBZ0M7QUFDbEUseUJBQXlCLG1CQUFPLENBQUMsNEdBQStCO0FBQ2hFLHVCQUF1QixtQkFBTyxDQUFDLDJGQUFnQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMLGFBQWE7QUFDYjtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxzQkFBc0I7QUFDdEIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9oYXJzaHNocml2YXN0YXYvRGVza3RvcC9Db2RpbmcgUHJvamVjdHMvSm9iLUFzc2lzdGFudC1BZ2VudC9ub2RlX21vZHVsZXMvaW5uZ2VzdC9jb21wb25lbnRzL2V4ZWN1dGlvbi9vdGVsL3V0aWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmV4dGVuZFByb3ZpZGVyID0gZXhwb3J0cy5jcmVhdGVQcm92aWRlciA9IHZvaWQgMDtcbmNvbnN0IGFwaV8xID0gcmVxdWlyZShcIkBvcGVudGVsZW1ldHJ5L2FwaVwiKTtcbmNvbnN0IGF1dG9faW5zdHJ1bWVudGF0aW9uc19ub2RlXzEgPSByZXF1aXJlKFwiQG9wZW50ZWxlbWV0cnkvYXV0by1pbnN0cnVtZW50YXRpb25zLW5vZGVcIik7XG5jb25zdCBjb250ZXh0X2FzeW5jX2hvb2tzXzEgPSByZXF1aXJlKFwiQG9wZW50ZWxlbWV0cnkvY29udGV4dC1hc3luYy1ob29rc1wiKTtcbmNvbnN0IGluc3RydW1lbnRhdGlvbl8xID0gcmVxdWlyZShcIkBvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvblwiKTtcbmNvbnN0IHNka190cmFjZV9iYXNlXzEgPSByZXF1aXJlKFwiQG9wZW50ZWxlbWV0cnkvc2RrLXRyYWNlLWJhc2VcIik7XG5jb25zdCBwcm9jZXNzb3JfanNfMSA9IHJlcXVpcmUoXCIuL3Byb2Nlc3Nvci5qc1wiKTtcbmNvbnN0IGNyZWF0ZVByb3ZpZGVyID0gKGJlaGF2aW91ciwgaW5zdHJ1bWVudGF0aW9ucyA9IFtdKSA9PiB7XG4gICAgLy8gVE9ETyBDaGVjayBpZiB0aGVyZSdzIGFuIGV4aXN0aW5nIHByb3ZpZGVyXG4gICAgY29uc3QgcHJvY2Vzc29yID0gbmV3IHByb2Nlc3Nvcl9qc18xLklubmdlc3RTcGFuUHJvY2Vzc29yKCk7XG4gICAgY29uc3QgcCA9IG5ldyBzZGtfdHJhY2VfYmFzZV8xLkJhc2ljVHJhY2VyUHJvdmlkZXIoe1xuICAgICAgICBzcGFuUHJvY2Vzc29yczogW3Byb2Nlc3Nvcl0sXG4gICAgfSk7XG4gICAgY29uc3QgaW5zdHJMaXN0ID0gW1xuICAgICAgICAuLi5pbnN0cnVtZW50YXRpb25zLFxuICAgICAgICAuLi4oMCwgYXV0b19pbnN0cnVtZW50YXRpb25zX25vZGVfMS5nZXROb2RlQXV0b0luc3RydW1lbnRhdGlvbnMpKCksXG4gICAgXTtcbiAgICAoMCwgaW5zdHJ1bWVudGF0aW9uXzEucmVnaXN0ZXJJbnN0cnVtZW50YXRpb25zKSh7XG4gICAgICAgIGluc3RydW1lbnRhdGlvbnM6IGluc3RyTGlzdCxcbiAgICB9KTtcbiAgICBwLnJlZ2lzdGVyKHtcbiAgICAgICAgY29udGV4dE1hbmFnZXI6IG5ldyBjb250ZXh0X2FzeW5jX2hvb2tzXzEuQXN5bmNIb29rc0NvbnRleHRNYW5hZ2VyKCkuZW5hYmxlKCksXG4gICAgfSk7XG4gICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgcHJvY2Vzc29yIH07XG59O1xuZXhwb3J0cy5jcmVhdGVQcm92aWRlciA9IGNyZWF0ZVByb3ZpZGVyO1xuLyoqXG4gKiBBdHRlbXB0cyB0byBleHRlbmQgdGhlIGV4aXN0aW5nIE9UZWwgcHJvdmlkZXIgd2l0aCBvdXIgcHJvY2Vzc29yLiBSZXR1cm5zIHRydWVcbiAqIGlmIHRoZSBwcm92aWRlciB3YXMgZXh0ZW5kZWQsIGZhbHNlIGlmIGl0IHdhcyBub3QuXG4gKi9cbmNvbnN0IGV4dGVuZFByb3ZpZGVyID0gKGJlaGF2aW91cikgPT4ge1xuICAgIC8vIEF0dGVtcHQgdG8gYWRkIG91ciBwcm9jZXNzb3IgYW5kIGV4cG9ydCB0byB0aGUgZXhpc3RpbmcgcHJvdmlkZXJcbiAgICBjb25zdCBleGlzdGluZ1Byb3ZpZGVyID0gYXBpXzEudHJhY2UuZ2V0VHJhY2VyUHJvdmlkZXIoKTtcbiAgICBpZiAoIWV4aXN0aW5nUHJvdmlkZXIpIHtcbiAgICAgICAgaWYgKGJlaGF2aW91ciAhPT0gXCJhdXRvXCIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignTm8gZXhpc3RpbmcgT1RlbCBwcm92aWRlciBmb3VuZCBhbmQgYmVoYXZpb3VyIGlzIFwiZXh0ZW5kUHJvdmlkZXJcIi4gSW5uZ2VzdFxcJ3MgT1RlbCBtaWRkbGV3YXJlIHdpbGwgbm90IHdvcmsuIEVpdGhlciBhbGxvdyB0aGUgbWlkZGxld2FyZSB0byBjcmVhdGUgYSBwcm92aWRlciBieSBzZXR0aW5nIGBiZWhhdmlvdXI6IFwiY3JlYXRlUHJvdmlkZXJcImAgb3IgYGJlaGF2aW91cjogXCJhdXRvXCJgLCBvciBtYWtlIHN1cmUgdGhhdCB0aGUgcHJvdmlkZXIgaXMgY3JlYXRlZCBhbmQgaW1wb3J0ZWQgYmVmb3JlIHRoZSBtaWRkbGV3YXJlIGlzIHVzZWQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UgfTtcbiAgICB9XG4gICAgaWYgKCEoXCJhZGRTcGFuUHJvY2Vzc29yXCIgaW4gZXhpc3RpbmdQcm92aWRlcikgfHxcbiAgICAgICAgdHlwZW9mIGV4aXN0aW5nUHJvdmlkZXIuYWRkU3BhblByb2Nlc3NvciAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIC8vIFRPRE8gQ291bGQgd2UgYWxzbyBhZGQgYSBmdW5jdGlvbiB0aGUgdXNlciBjYW4gcHJvdmlkZSB0aGF0IHRha2VzIHRoZVxuICAgICAgICAvLyBwcm9jZXNzb3IgYW5kIGFkZHMgaXQ/IFRoYXQgd2F5IHRoZXkgY291bGQgc3VwcG9ydCBtYW55IGRpZmZlcmVudFxuICAgICAgICAvLyBwcm92aWRlcnMuXG4gICAgICAgIGlmIChiZWhhdmlvdXIgIT09IFwiYXV0b1wiKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJFeGlzdGluZyBPVGVsIHByb3ZpZGVyIGlzIG5vdCBhIEJhc2ljVHJhY2VyUHJvdmlkZXIuIElubmdlc3QncyBPVGVsIG1pZGRsZXdhcmUgd2lsbCBub3Qgd29yaywgYXMgaXQgY2FuIG9ubHkgZXh0ZW5kIGFuIGV4aXN0aW5nIHByb2Nlc3NvciBpZiBpdCdzIGEgQmFzaWNUcmFjZXJQcm92aWRlci5cIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UgfTtcbiAgICB9XG4gICAgY29uc3QgcHJvY2Vzc29yID0gbmV3IHByb2Nlc3Nvcl9qc18xLklubmdlc3RTcGFuUHJvY2Vzc29yKCk7XG4gICAgZXhpc3RpbmdQcm92aWRlci5hZGRTcGFuUHJvY2Vzc29yKHByb2Nlc3Nvcik7XG4gICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgcHJvY2Vzc29yIH07XG59O1xuZXhwb3J0cy5leHRlbmRQcm92aWRlciA9IGV4dGVuZFByb3ZpZGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/execution/otel/util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/execution/v0.js":
/*!*********************************************************!*\
  !*** ./node_modules/inngest/components/execution/v0.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports._internals = exports.V0InngestExecution = exports.createV0InngestExecution = void 0;\nconst canonicalize_1 = __importDefault(__webpack_require__(/*! canonicalize */ \"(rsc)/./node_modules/canonicalize/lib/canonicalize.js\"));\nconst hash_js_1 = __webpack_require__(/*! hash.js */ \"(rsc)/./node_modules/hash.js/lib/hash.js\");\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nconst errors_js_1 = __webpack_require__(/*! ../../helpers/errors.js */ \"(rsc)/./node_modules/inngest/helpers/errors.js\");\nconst functions_js_1 = __webpack_require__(/*! ../../helpers/functions.js */ \"(rsc)/./node_modules/inngest/helpers/functions.js\");\nconst promises_js_1 = __webpack_require__(/*! ../../helpers/promises.js */ \"(rsc)/./node_modules/inngest/helpers/promises.js\");\nconst types_js_1 = __webpack_require__(/*! ../../types.js */ \"(rsc)/./node_modules/inngest/types.js\");\nconst InngestMiddleware_js_1 = __webpack_require__(/*! ../InngestMiddleware.js */ \"(rsc)/./node_modules/inngest/components/InngestMiddleware.js\");\nconst InngestStepTools_js_1 = __webpack_require__(/*! ../InngestStepTools.js */ \"(rsc)/./node_modules/inngest/components/InngestStepTools.js\");\nconst NonRetriableError_js_1 = __webpack_require__(/*! ../NonRetriableError.js */ \"(rsc)/./node_modules/inngest/components/NonRetriableError.js\");\nconst RetryAfterError_js_1 = __webpack_require__(/*! ../RetryAfterError.js */ \"(rsc)/./node_modules/inngest/components/RetryAfterError.js\");\nconst InngestExecution_js_1 = __webpack_require__(/*! ./InngestExecution.js */ \"(rsc)/./node_modules/inngest/components/execution/InngestExecution.js\");\nconst createV0InngestExecution = (options) => {\n    return new V0InngestExecution(options);\n};\nexports.createV0InngestExecution = createV0InngestExecution;\nclass V0InngestExecution extends InngestExecution_js_1.InngestExecution {\n    constructor(options) {\n        super(options);\n        this.userFnToRun = this.getUserFnToRun();\n        this.state = this.createExecutionState();\n        this.fnArg = this.createFnArg();\n    }\n    start() {\n        var _a;\n        this.debug(\"starting V0 execution\");\n        return ((_a = this.execution) !== null && _a !== void 0 ? _a : (this.execution = this._start().then((result) => {\n            this.debug(\"result:\", result);\n            return result;\n        })));\n    }\n    async _start() {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x;\n        this.state.hooks = await this.initializeMiddleware();\n        try {\n            await this.transformInput();\n            await ((_b = (_a = this.state.hooks).beforeMemoization) === null || _b === void 0 ? void 0 : _b.call(_a));\n            if (this.state.opStack.length === 0 && !this.options.requestedRunStep) {\n                await ((_d = (_c = this.state.hooks).afterMemoization) === null || _d === void 0 ? void 0 : _d.call(_c));\n                await ((_f = (_e = this.state.hooks).beforeExecution) === null || _f === void 0 ? void 0 : _f.call(_e));\n            }\n            const userFnPromise = (0, promises_js_1.runAsPromise)(() => this.userFnToRun(this.fnArg));\n            let pos = -1;\n            do {\n                if (pos >= 0) {\n                    if (!this.options.requestedRunStep &&\n                        pos === this.state.opStack.length - 1) {\n                        await ((_h = (_g = this.state.hooks).afterMemoization) === null || _h === void 0 ? void 0 : _h.call(_g));\n                        await ((_k = (_j = this.state.hooks).beforeExecution) === null || _k === void 0 ? void 0 : _k.call(_j));\n                    }\n                    this.state.tickOps = {};\n                    const incomingOp = this.state.opStack[pos];\n                    this.state.currentOp = this.state.allFoundOps[incomingOp.id];\n                    if (!this.state.currentOp) {\n                        /**\n                         * We're trying to resume the function, but we can't find where to go.\n                         *\n                         * This means that either the function has changed or there are async\n                         * actions in-between steps that we haven't noticed in previous\n                         * executions.\n                         *\n                         * Whichever the case, this is bad and we can't continue in this\n                         * undefined state.\n                         */\n                        throw new NonRetriableError_js_1.NonRetriableError((0, errors_js_1.prettyError)({\n                            whatHappened: \" Your function was stopped from running\",\n                            why: \"We couldn't resume your function's state because it may have changed since the run started or there are async actions in-between steps that we haven't noticed in previous executions.\",\n                            consequences: \"Continuing to run the function may result in unexpected behaviour, so we've stopped your function to ensure nothing unexpected happened!\",\n                            toFixNow: \"Ensure that your function is either entirely step-based or entirely non-step-based, by either wrapping all asynchronous logic in `step.run()` calls or by removing all `step.*()` calls.\",\n                            otherwise: \"For more information on why step functions work in this manner, see https://www.inngest.com/docs/functions/multi-step#gotchas\",\n                            stack: true,\n                            code: errors_js_1.ErrCode.NON_DETERMINISTIC_FUNCTION,\n                        }));\n                    }\n                    this.state.currentOp.fulfilled = true;\n                    if (typeof incomingOp.data !== \"undefined\") {\n                        this.state.currentOp.resolve(incomingOp.data);\n                    }\n                    else {\n                        this.state.currentOp.reject(incomingOp.error);\n                    }\n                }\n                await (0, promises_js_1.resolveAfterPending)();\n                this.state.reset();\n                pos++;\n            } while (pos < this.state.opStack.length);\n            await ((_m = (_l = this.state.hooks).afterMemoization) === null || _m === void 0 ? void 0 : _m.call(_l));\n            const discoveredOps = Object.values(this.state.tickOps).map(tickOpToOutgoing);\n            const runStep = this.options.requestedRunStep ||\n                this.getEarlyExecRunStep(discoveredOps);\n            if (runStep) {\n                const userFnOp = this.state.allFoundOps[runStep];\n                const stepToRun = userFnOp === null || userFnOp === void 0 ? void 0 : userFnOp.fn;\n                if (!stepToRun) {\n                    throw new Error(`Bad stack; executor requesting to run unknown step \"${runStep}\"`);\n                }\n                const outgoingUserFnOp = Object.assign(Object.assign({}, tickOpToOutgoing(userFnOp)), { op: types_js_1.StepOpCode.Step });\n                await ((_p = (_o = this.state.hooks).beforeExecution) === null || _p === void 0 ? void 0 : _p.call(_o));\n                this.state.executingStep = true;\n                const result = await (0, promises_js_1.runAsPromise)(stepToRun)\n                    .finally(() => {\n                    this.state.executingStep = false;\n                })\n                    .catch(async (error) => {\n                    return await this.transformOutput({ error }, outgoingUserFnOp);\n                })\n                    .then(async (data) => {\n                    var _a, _b;\n                    await ((_b = (_a = this.state.hooks) === null || _a === void 0 ? void 0 : _a.afterExecution) === null || _b === void 0 ? void 0 : _b.call(_a));\n                    return await this.transformOutput({ data }, outgoingUserFnOp);\n                });\n                const { type: _type } = result, rest = __rest(result, [\"type\"]);\n                return {\n                    type: \"step-ran\",\n                    ctx: this.fnArg,\n                    ops: this.ops,\n                    step: Object.assign(Object.assign({}, outgoingUserFnOp), rest),\n                };\n            }\n            if (!discoveredOps.length) {\n                const fnRet = await Promise.race([\n                    userFnPromise.then((data) => ({ type: \"complete\", data })),\n                    (0, promises_js_1.resolveNextTick)().then(() => ({ type: \"incomplete\" })),\n                ]);\n                if (fnRet.type === \"complete\") {\n                    await ((_r = (_q = this.state.hooks).afterExecution) === null || _r === void 0 ? void 0 : _r.call(_q));\n                    const allOpsFulfilled = Object.values(this.state.allFoundOps).every((op) => {\n                        return op.fulfilled;\n                    });\n                    if (allOpsFulfilled) {\n                        return await this.transformOutput({ data: fnRet.data });\n                    }\n                }\n                else if (!this.state.hasUsedTools) {\n                    this.state.nonStepFnDetected = true;\n                    const data = await userFnPromise;\n                    await ((_t = (_s = this.state.hooks).afterExecution) === null || _t === void 0 ? void 0 : _t.call(_s));\n                    return await this.transformOutput({ data });\n                }\n                else {\n                    const hasOpsPending = Object.values(this.state.allFoundOps).some((op) => {\n                        return op.fulfilled === false;\n                    });\n                    if (!hasOpsPending) {\n                        throw new NonRetriableError_js_1.NonRetriableError((0, errors_js_1.functionStoppedRunningErr)(errors_js_1.ErrCode.ASYNC_DETECTED_AFTER_MEMOIZATION));\n                    }\n                }\n            }\n            await ((_v = (_u = this.state.hooks).afterExecution) === null || _v === void 0 ? void 0 : _v.call(_u));\n            return {\n                type: \"steps-found\",\n                ctx: this.fnArg,\n                ops: this.ops,\n                steps: discoveredOps,\n            };\n        }\n        catch (error) {\n            return await this.transformOutput({ error });\n        }\n        finally {\n            await ((_x = (_w = this.state.hooks).beforeResponse) === null || _x === void 0 ? void 0 : _x.call(_w));\n        }\n    }\n    async initializeMiddleware() {\n        const ctx = this.options.data;\n        const hooks = await (0, InngestMiddleware_js_1.getHookStack)(this.options.fn[\"middleware\"], \"onFunctionRun\", {\n            ctx,\n            fn: this.options.fn,\n            steps: Object.values(this.options.stepState),\n            reqArgs: this.options.reqArgs,\n        }, {\n            transformInput: (prev, output) => {\n                return {\n                    ctx: Object.assign(Object.assign({}, prev.ctx), output === null || output === void 0 ? void 0 : output.ctx),\n                    fn: this.options.fn,\n                    steps: prev.steps.map((step, i) => {\n                        var _a;\n                        return (Object.assign(Object.assign({}, step), (_a = output === null || output === void 0 ? void 0 : output.steps) === null || _a === void 0 ? void 0 : _a[i]));\n                    }),\n                    reqArgs: prev.reqArgs,\n                };\n            },\n            transformOutput: (prev, output) => {\n                return {\n                    result: Object.assign(Object.assign({}, prev.result), output === null || output === void 0 ? void 0 : output.result),\n                    step: prev.step,\n                };\n            },\n        });\n        return hooks;\n    }\n    createExecutionState() {\n        const state = {\n            allFoundOps: {},\n            tickOps: {},\n            tickOpHashes: {},\n            currentOp: undefined,\n            hasUsedTools: false,\n            reset: () => {\n                state.tickOpHashes = {};\n                state.allFoundOps = Object.assign(Object.assign({}, state.allFoundOps), state.tickOps);\n            },\n            nonStepFnDetected: false,\n            executingStep: false,\n            opStack: this.options.stepCompletionOrder.reduce((acc, stepId) => {\n                const stepState = this.options.stepState[stepId];\n                if (!stepState) {\n                    return acc;\n                }\n                return [...acc, stepState];\n            }, []),\n        };\n        return state;\n    }\n    get ops() {\n        return Object.fromEntries(Object.entries(this.state.allFoundOps).map(([id, op]) => [\n            id,\n            {\n                id: op.id,\n                rawArgs: op.rawArgs,\n                data: op.data,\n                error: op.error,\n                fulfilled: op.fulfilled,\n                seen: true,\n            },\n        ]));\n    }\n    getUserFnToRun() {\n        if (!this.options.isFailureHandler) {\n            return this.options.fn[\"fn\"];\n        }\n        if (!this.options.fn[\"onFailureFn\"]) {\n            /**\n             * Somehow, we've ended up detecting that this is a failure handler but\n             * doesn't have an `onFailure` function. This should never happen.\n             */\n            throw new Error(\"Cannot find function `onFailure` handler\");\n        }\n        // TODO: Review; inferred types results in an `any` here!\n        return this.options.fn[\"onFailureFn\"];\n    }\n    createFnArg() {\n        var _a, _b, _c, _d;\n        // Start referencing everything\n        this.state.tickOps = this.state.allFoundOps;\n        /**\n         * Create a unique hash of an operation using only a subset of the operation's\n         * properties; will never use `data` and will guarantee the order of the\n         * object so we don't rely on individual tools for that.\n         *\n         * If the operation already contains an ID, the current ID will be used\n         * instead, so that users can provide their own IDs.\n         */\n        const hashOp = (\n        /**\n         * The op to generate a hash from. We only use a subset of the op's\n         * properties when creating the hash.\n         */\n        op) => {\n            var _a, _b, _c, _d;\n            /**\n             * It's difficult for v0 to understand whether or not an op has\n             * historically contained a custom ID, as all step usage now require them.\n             *\n             * For this reason, we make the assumption that steps in v0 do not have a\n             * custom ID and generate one for them as we would in all recommendations\n             * and examples.\n             */\n            const obj = {\n                parent: (_b = (_a = this.state.currentOp) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : null,\n                op: op.op,\n                name: op.name,\n                // Historically, no v0 runs could have options for `step.run()` call,\n                // but this object can be specified in future versions.\n                //\n                // For this purpose, we change this to always use `null` if the op is\n                // that of a `step.run()`.\n                opts: op.op === types_js_1.StepOpCode.StepPlanned ? null : (_c = op.opts) !== null && _c !== void 0 ? _c : null,\n            };\n            const collisionHash = exports._internals.hashData(obj);\n            const pos = (this.state.tickOpHashes[collisionHash] =\n                ((_d = this.state.tickOpHashes[collisionHash]) !== null && _d !== void 0 ? _d : -1) + 1);\n            return Object.assign(Object.assign({}, op), { id: exports._internals.hashData(Object.assign({ pos }, obj)) });\n        };\n        const stepHandler = ({ args, matchOp, opts }) => {\n            if (this.state.nonStepFnDetected) {\n                throw new NonRetriableError_js_1.NonRetriableError((0, errors_js_1.functionStoppedRunningErr)(errors_js_1.ErrCode.STEP_USED_AFTER_ASYNC));\n            }\n            if (this.state.executingStep) {\n                throw new NonRetriableError_js_1.NonRetriableError((0, errors_js_1.prettyError)({\n                    whatHappened: \"Your function was stopped from running\",\n                    why: \"We detected that you have nested `step.*` tooling.\",\n                    consequences: \"Nesting `step.*` tooling is not supported.\",\n                    stack: true,\n                    toFixNow: \"Make sure you're not using `step.*` tooling inside of other `step.*` tooling. If you need to compose steps together, you can create a new async function and call it from within your step function, or use promise chaining.\",\n                    otherwise: \"For more information on step functions with Inngest, see https://www.inngest.com/docs/functions/multi-step\",\n                    code: errors_js_1.ErrCode.NESTING_STEPS,\n                }));\n            }\n            this.state.hasUsedTools = true;\n            const stepOptions = (0, InngestStepTools_js_1.getStepOptions)(args[0]);\n            const opId = hashOp(matchOp(stepOptions, ...args.slice(1)));\n            return new Promise((resolve, reject) => {\n                this.state.tickOps[opId.id] = Object.assign(Object.assign(Object.assign({}, opId), ((opts === null || opts === void 0 ? void 0 : opts.fn) ? { fn: () => { var _a; return (_a = opts.fn) === null || _a === void 0 ? void 0 : _a.call(opts, ...args); } } : {})), { rawArgs: args, resolve,\n                    reject, fulfilled: false });\n            });\n        };\n        const step = (0, InngestStepTools_js_1.createStepTools)(this.options.client, this, stepHandler);\n        let fnArg = Object.assign(Object.assign({}, this.options.data), { step });\n        if (this.options.isFailureHandler) {\n            const eventData = zod_1.z\n                .object({ error: types_js_1.jsonErrorSchema })\n                .parse((_a = fnArg.event) === null || _a === void 0 ? void 0 : _a.data);\n            fnArg = Object.assign(Object.assign({}, fnArg), { error: (0, errors_js_1.deserializeError)(eventData.error) });\n        }\n        return (_d = (_c = (_b = this.options).transformCtx) === null || _c === void 0 ? void 0 : _c.call(_b, fnArg)) !== null && _d !== void 0 ? _d : fnArg;\n    }\n    /**\n     * Using middleware, transform input before running.\n     */\n    async transformInput() {\n        var _a, _b;\n        const inputMutations = await ((_b = (_a = this.state.hooks) === null || _a === void 0 ? void 0 : _a.transformInput) === null || _b === void 0 ? void 0 : _b.call(_a, {\n            ctx: Object.assign({}, this.fnArg),\n            steps: Object.values(this.options.stepState),\n            fn: this.options.fn,\n            reqArgs: this.options.reqArgs,\n        }));\n        if (inputMutations === null || inputMutations === void 0 ? void 0 : inputMutations.ctx) {\n            this.fnArg = inputMutations.ctx;\n        }\n        if (inputMutations === null || inputMutations === void 0 ? void 0 : inputMutations.steps) {\n            this.state.opStack = [...inputMutations.steps];\n        }\n    }\n    getEarlyExecRunStep(ops) {\n        if (ops.length !== 1)\n            return;\n        const op = ops[0];\n        if (op &&\n            op.op === types_js_1.StepOpCode.StepPlanned\n        // TODO We must individually check properties here that we do not want to\n        // execute on, such as retry counts. Nothing exists here that falls in to\n        // this case, but should be accounted for when we add them.\n        // && typeof op.opts === \"undefined\"\n        ) {\n            return op.id;\n        }\n    }\n    /**\n     * Using middleware, transform output before returning.\n     */\n    async transformOutput(dataOrError, step) {\n        var _a, _b, _c, _d;\n        const output = Object.assign({}, dataOrError);\n        if (typeof output.error !== \"undefined\") {\n            output.data = (0, errors_js_1.serializeError)(output.error);\n        }\n        const transformedOutput = await ((_b = (_a = this.state.hooks) === null || _a === void 0 ? void 0 : _a.transformOutput) === null || _b === void 0 ? void 0 : _b.call(_a, {\n            result: Object.assign({}, output),\n            step,\n        }));\n        const { data, error } = Object.assign(Object.assign({}, output), transformedOutput === null || transformedOutput === void 0 ? void 0 : transformedOutput.result);\n        if (!step) {\n            await ((_d = (_c = this.state.hooks) === null || _c === void 0 ? void 0 : _c.finished) === null || _d === void 0 ? void 0 : _d.call(_c, {\n                result: Object.assign({}, (typeof error !== \"undefined\" ? { error } : { data })),\n            }));\n        }\n        if (typeof error !== \"undefined\") {\n            /**\n             * Ensure we give middleware the chance to decide on retriable behaviour\n             * by looking at the error returned from output transformation.\n             */\n            let retriable = !(error instanceof NonRetriableError_js_1.NonRetriableError);\n            if (retriable && error instanceof RetryAfterError_js_1.RetryAfterError) {\n                retriable = error.retryAfter;\n            }\n            const serializedError = (0, errors_js_1.serializeError)(error);\n            return {\n                type: \"function-rejected\",\n                ctx: this.fnArg,\n                ops: this.ops,\n                error: serializedError,\n                retriable,\n            };\n        }\n        return {\n            type: \"function-resolved\",\n            ctx: this.fnArg,\n            ops: this.ops,\n            data: (0, functions_js_1.undefinedToNull)(data),\n        };\n    }\n}\nexports.V0InngestExecution = V0InngestExecution;\nconst tickOpToOutgoing = (op) => {\n    return {\n        op: op.op,\n        id: op.id,\n        name: op.name,\n        opts: op.opts,\n    };\n};\nconst hashData = (op) => {\n    return (0, hash_js_1.sha1)().update((0, canonicalize_1.default)(op)).digest(\"hex\");\n};\n/**\n * Exported for testing.\n */\nexports._internals = { hashData };\n//# sourceMappingURL=v0.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/execution/v0.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/execution/v1.js":
/*!*********************************************************!*\
  !*** ./node_modules/inngest/components/execution/v1.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __asyncValues = (this && this.__asyncValues) || function (o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n};\nvar __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }\nvar __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n    function fulfill(value) { resume(\"next\", value); }\n    function reject(value) { resume(\"throw\", value); }\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports._internals = exports.createV1InngestExecution = void 0;\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst hash_js_1 = __webpack_require__(/*! hash.js */ \"(rsc)/./node_modules/hash.js/lib/hash.js\");\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nconst consts_js_1 = __webpack_require__(/*! ../../helpers/consts.js */ \"(rsc)/./node_modules/inngest/helpers/consts.js\");\nconst errors_js_1 = __webpack_require__(/*! ../../helpers/errors.js */ \"(rsc)/./node_modules/inngest/helpers/errors.js\");\nconst functions_js_1 = __webpack_require__(/*! ../../helpers/functions.js */ \"(rsc)/./node_modules/inngest/helpers/functions.js\");\nconst promises_js_1 = __webpack_require__(/*! ../../helpers/promises.js */ \"(rsc)/./node_modules/inngest/helpers/promises.js\");\nconst types_js_1 = __webpack_require__(/*! ../../types.js */ \"(rsc)/./node_modules/inngest/types.js\");\nconst version_js_1 = __webpack_require__(/*! ../../version.js */ \"(rsc)/./node_modules/inngest/version.js\");\nconst InngestMiddleware_js_1 = __webpack_require__(/*! ../InngestMiddleware.js */ \"(rsc)/./node_modules/inngest/components/InngestMiddleware.js\");\nconst InngestStepTools_js_1 = __webpack_require__(/*! ../InngestStepTools.js */ \"(rsc)/./node_modules/inngest/components/InngestStepTools.js\");\nconst NonRetriableError_js_1 = __webpack_require__(/*! ../NonRetriableError.js */ \"(rsc)/./node_modules/inngest/components/NonRetriableError.js\");\nconst RetryAfterError_js_1 = __webpack_require__(/*! ../RetryAfterError.js */ \"(rsc)/./node_modules/inngest/components/RetryAfterError.js\");\nconst StepError_js_1 = __webpack_require__(/*! ../StepError.js */ \"(rsc)/./node_modules/inngest/components/StepError.js\");\nconst InngestExecution_js_1 = __webpack_require__(/*! ./InngestExecution.js */ \"(rsc)/./node_modules/inngest/components/execution/InngestExecution.js\");\nconst als_js_1 = __webpack_require__(/*! ./als.js */ \"(rsc)/./node_modules/inngest/components/execution/als.js\");\nconst access_js_1 = __webpack_require__(/*! ./otel/access.js */ \"(rsc)/./node_modules/inngest/components/execution/otel/access.js\");\nconst createV1InngestExecution = (options) => {\n    return new V1InngestExecution(options);\n};\nexports.createV1InngestExecution = createV1InngestExecution;\nclass V1InngestExecution extends InngestExecution_js_1.InngestExecution {\n    constructor(options) {\n        super(options);\n        this.timeoutDuration = 1000 * 10;\n        this.userFnToRun = this.getUserFnToRun();\n        this.state = this.createExecutionState();\n        this.fnArg = this.createFnArg();\n        this.checkpointHandlers = this.createCheckpointHandlers();\n        this.initializeTimer(this.state);\n        this.debug(\"created new V1 execution for run;\", this.options.requestedRunStep\n            ? `wanting to run step \"${this.options.requestedRunStep}\"`\n            : \"discovering steps\");\n        this.debug(\"existing state keys:\", Object.keys(this.state.stepState));\n    }\n    /**\n     * Idempotently start the execution of the user's function.\n     */\n    start() {\n        if (!this.execution) {\n            this.debug(\"starting V1 execution\");\n            const tracer = api_1.trace.getTracer(\"inngest\", version_js_1.version);\n            this.execution = (0, als_js_1.getAsyncLocalStorage)().then((als) => {\n                return als.run({ app: this.options.client, ctx: this.fnArg }, async () => {\n                    return tracer.startActiveSpan(\"inngest.execution\", (span) => {\n                        var _a;\n                        (_a = access_js_1.clientProcessorMap.get(this.options.client)) === null || _a === void 0 ? void 0 : _a.declareStartingSpan({\n                            span,\n                            runId: this.options.runId,\n                            traceparent: this.options.headers[consts_js_1.headerKeys.TraceParent],\n                            tracestate: this.options.headers[consts_js_1.headerKeys.TraceState],\n                        });\n                        return this._start()\n                            .then((result) => {\n                            this.debug(\"result:\", result);\n                            return result;\n                        })\n                            .finally(() => {\n                            span.end();\n                        });\n                    });\n                });\n            });\n        }\n        return this.execution;\n    }\n    /**\n     * Starts execution of the user's function and the core loop.\n     */\n    async _start() {\n        var _a, e_1, _b, _c;\n        var _d, _e;\n        try {\n            const allCheckpointHandler = this.getCheckpointHandler(\"\");\n            this.state.hooks = await this.initializeMiddleware();\n            await this.startExecution();\n            try {\n                for (var _f = true, _g = __asyncValues(this.state.loop), _h; _h = await _g.next(), _a = _h.done, !_a; _f = true) {\n                    _c = _h.value;\n                    _f = false;\n                    const checkpoint = _c;\n                    await allCheckpointHandler(checkpoint);\n                    const handler = this.getCheckpointHandler(checkpoint.type);\n                    const result = await handler(checkpoint);\n                    if (result) {\n                        return result;\n                    }\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (!_f && !_a && (_b = _g.return)) await _b.call(_g);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        }\n        catch (error) {\n            return await this.transformOutput({ error });\n        }\n        finally {\n            void this.state.loop.return();\n            await ((_e = (_d = this.state.hooks) === null || _d === void 0 ? void 0 : _d.beforeResponse) === null || _e === void 0 ? void 0 : _e.call(_d));\n        }\n        /**\n         * If we're here, the generator somehow finished without returning a value.\n         * This should never happen.\n         */\n        throw new Error(\"Core loop finished without returning a value\");\n    }\n    /**\n     * Creates a handler for every checkpoint type, defining what to do when we\n     * reach that checkpoint in the core loop.\n     */\n    createCheckpointHandlers() {\n        return {\n            /**\n             * Run for all checkpoints. Best used for logging or common actions.\n             * Use other handlers to return values and interrupt the core loop.\n             */\n            \"\": (checkpoint) => {\n                this.debug(\"checkpoint:\", checkpoint);\n            },\n            /**\n             * The user's function has completed and returned a value.\n             */\n            \"function-resolved\": async (checkpoint) => {\n                return await this.transformOutput({ data: checkpoint.data });\n            },\n            /**\n             * The user's function has thrown an error.\n             */\n            \"function-rejected\": async (checkpoint) => {\n                return await this.transformOutput({ error: checkpoint.error });\n            },\n            /**\n             * We've found one or more steps. Here we may want to run a step or report\n             * them back to Inngest.\n             */\n            \"steps-found\": async ({ steps }) => {\n                const stepResult = await this.tryExecuteStep(steps);\n                if (stepResult) {\n                    const transformResult = await this.transformOutput(stepResult);\n                    /**\n                     * Transforming output will always return either function rejection or\n                     * resolution. In most cases, this can be immediately returned, but in\n                     * this particular case we want to handle it differently.\n                     */\n                    if (transformResult.type === \"function-resolved\") {\n                        return {\n                            type: \"step-ran\",\n                            ctx: transformResult.ctx,\n                            ops: transformResult.ops,\n                            step: exports._internals.hashOp(Object.assign(Object.assign({}, stepResult), { data: transformResult.data })),\n                        };\n                    }\n                    else if (transformResult.type === \"function-rejected\") {\n                        return {\n                            type: \"step-ran\",\n                            ctx: transformResult.ctx,\n                            ops: transformResult.ops,\n                            step: exports._internals.hashOp(Object.assign(Object.assign({}, stepResult), { error: transformResult.error })),\n                            retriable: transformResult.retriable,\n                        };\n                    }\n                    return transformResult;\n                }\n                const newSteps = await this.filterNewSteps(Array.from(this.state.steps.values()));\n                if (newSteps) {\n                    return {\n                        type: \"steps-found\",\n                        ctx: this.fnArg,\n                        ops: this.ops,\n                        steps: newSteps,\n                    };\n                }\n            },\n            /**\n             * While trying to find a step that Inngest has told us to run, we've\n             * timed out or have otherwise decided that it doesn't exist.\n             */\n            \"step-not-found\": ({ step }) => {\n                return { type: \"step-not-found\", ctx: this.fnArg, ops: this.ops, step };\n            },\n        };\n    }\n    getCheckpointHandler(type) {\n        return this.checkpointHandlers[type];\n    }\n    async tryExecuteStep(steps) {\n        var _a;\n        const hashedStepIdToRun = this.options.requestedRunStep || this.getEarlyExecRunStep(steps);\n        if (!hashedStepIdToRun) {\n            return;\n        }\n        const step = steps.find((step) => step.hashedId === hashedStepIdToRun && step.fn);\n        if (step) {\n            return await this.executeStep(step);\n        }\n        /**\n         * Ensure we reset the timeout if we have a requested run step but couldn't\n         * find it, but also that we don't reset if we found and executed it.\n         */\n        void ((_a = this.timeout) === null || _a === void 0 ? void 0 : _a.reset());\n    }\n    /**\n     * Given a list of outgoing ops, decide if we can execute an op early and\n     * return the ID of the step to execute if we can.\n     */\n    getEarlyExecRunStep(steps) {\n        /**\n         * We may have been disabled due to parallelism, in which case we can't\n         * immediately execute unless explicitly requested.\n         */\n        if (this.options.disableImmediateExecution)\n            return;\n        const unfulfilledSteps = steps.filter((step) => !step.fulfilled);\n        if (unfulfilledSteps.length !== 1)\n            return;\n        const op = unfulfilledSteps[0];\n        if (op &&\n            op.op === types_js_1.StepOpCode.StepPlanned\n        // TODO We must individually check properties here that we do not want to\n        // execute on, such as retry counts. Nothing exists here that falls in to\n        // this case, but should be accounted for when we add them.\n        // && typeof op.opts === \"undefined\"\n        ) {\n            return op.hashedId;\n        }\n    }\n    async filterNewSteps(foundSteps) {\n        var _a, _b, _c, _d, _e, _f;\n        if (this.options.requestedRunStep) {\n            return;\n        }\n        /**\n         * Gather any steps that aren't memoized and report them.\n         */\n        const newSteps = foundSteps.filter((step) => !step.fulfilled);\n        if (!newSteps.length) {\n            return;\n        }\n        /**\n         * Warn if we've found new steps but haven't yet seen all previous\n         * steps. This may indicate that step presence isn't determinate.\n         */\n        let knownSteps = 0;\n        for (const step of foundSteps) {\n            if (step.fulfilled) {\n                knownSteps++;\n            }\n        }\n        const foundAllCompletedSteps = this.state.stepsToFulfill === knownSteps;\n        if (!foundAllCompletedSteps) {\n            // TODO Tag\n            console.warn((0, errors_js_1.prettyError)({\n                type: \"warn\",\n                whatHappened: \"Function may be indeterminate\",\n                why: \"We found new steps before seeing all previous steps, which may indicate that the function is non-deterministic.\",\n                consequences: \"This may cause unexpected behaviour as Inngest executes your function.\",\n                reassurance: \"This is expected if a function is updated in the middle of a run, but may indicate a bug if not.\",\n            }));\n        }\n        /**\n         * We're finishing up; let's trigger the last of the hooks.\n         */\n        await ((_b = (_a = this.state.hooks) === null || _a === void 0 ? void 0 : _a.afterMemoization) === null || _b === void 0 ? void 0 : _b.call(_a));\n        await ((_d = (_c = this.state.hooks) === null || _c === void 0 ? void 0 : _c.beforeExecution) === null || _d === void 0 ? void 0 : _d.call(_c));\n        await ((_f = (_e = this.state.hooks) === null || _e === void 0 ? void 0 : _e.afterExecution) === null || _f === void 0 ? void 0 : _f.call(_e));\n        const stepList = newSteps.map((step) => ({\n            displayName: step.displayName,\n            op: step.op,\n            id: step.hashedId,\n            name: step.name,\n            opts: step.opts,\n        }));\n        /**\n         * We also run `onSendEvent` middleware hooks against `step.invoke()` steps\n         * to ensure that their `data` is transformed correctly.\n         */\n        return await this.transformNewSteps(stepList);\n    }\n    /**\n     * Using middleware, transform any newly-found steps before returning them to\n     * an Inngest Server.\n     */\n    async transformNewSteps(steps) {\n        return Promise.all(steps.map(async (step) => {\n            var _a, _b, _c, _d, _e, _f, _g;\n            if (step.op !== types_js_1.StepOpCode.InvokeFunction) {\n                return step;\n            }\n            const onSendEventHooks = await (0, InngestMiddleware_js_1.getHookStack)(this.options.fn[\"middleware\"], \"onSendEvent\", undefined, {\n                transformInput: (prev, output) => {\n                    return Object.assign(Object.assign({}, prev), output);\n                },\n                transformOutput: (prev, output) => {\n                    return {\n                        result: Object.assign(Object.assign({}, prev.result), output === null || output === void 0 ? void 0 : output.result),\n                    };\n                },\n            });\n            /**\n             * For each event being sent, create a new `onSendEvent` hook stack to\n             * process it. We do this as middleware hooks are intended to run once\n             * during each lifecycle (onFunctionRun or onSendEvent) and here, a hook\n             * is run for every single event.\n             *\n             * This is done because a developer can use this hook to filter out\n             * events entirely; if we batch all of the events together, we can't\n             * tell which ones were filtered out if we're processing >1 invocation\n             * here.\n             */\n            const transformedPayload = await ((_a = onSendEventHooks.transformInput) === null || _a === void 0 ? void 0 : _a.call(onSendEventHooks, {\n                payloads: [\n                    Object.assign(Object.assign({}, ((_c = (_b = step.opts) === null || _b === void 0 ? void 0 : _b.payload) !== null && _c !== void 0 ? _c : {})), { name: consts_js_1.internalEvents.FunctionInvoked }),\n                ],\n            }));\n            const newPayload = InngestStepTools_js_1.invokePayloadSchema.parse((_e = (_d = transformedPayload === null || transformedPayload === void 0 ? void 0 : transformedPayload.payloads) === null || _d === void 0 ? void 0 : _d[0]) !== null && _e !== void 0 ? _e : {});\n            return Object.assign(Object.assign({}, step), { opts: Object.assign(Object.assign({}, step.opts), { payload: Object.assign(Object.assign({}, ((_g = (_f = step.opts) === null || _f === void 0 ? void 0 : _f.payload) !== null && _g !== void 0 ? _g : {})), newPayload) }) });\n        }));\n    }\n    async executeStep({ id, name, opts, fn, displayName, }) {\n        var _a, _b, _c, _d, _e;\n        (_a = this.timeout) === null || _a === void 0 ? void 0 : _a.clear();\n        await ((_c = (_b = this.state.hooks) === null || _b === void 0 ? void 0 : _b.afterMemoization) === null || _c === void 0 ? void 0 : _c.call(_b));\n        await ((_e = (_d = this.state.hooks) === null || _d === void 0 ? void 0 : _d.beforeExecution) === null || _e === void 0 ? void 0 : _e.call(_d));\n        const outgoingOp = {\n            id,\n            op: types_js_1.StepOpCode.StepRun,\n            name,\n            opts,\n            displayName,\n        };\n        this.state.executingStep = outgoingOp;\n        const store = await (0, als_js_1.getAsyncCtx)();\n        if (store) {\n            store.executingStep = {\n                id,\n                name: displayName,\n            };\n        }\n        this.debug(`executing step \"${id}\"`);\n        return ((0, promises_js_1.runAsPromise)(fn)\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\n            .finally(async () => {\n            var _a, _b;\n            if (store) {\n                delete store.executingStep;\n            }\n            await ((_b = (_a = this.state.hooks) === null || _a === void 0 ? void 0 : _a.afterExecution) === null || _b === void 0 ? void 0 : _b.call(_a));\n        })\n            .then((data) => {\n            return Object.assign(Object.assign({}, outgoingOp), { data });\n        })\n            .catch((error) => {\n            return Object.assign(Object.assign({}, outgoingOp), { op: types_js_1.StepOpCode.StepError, \n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                error });\n        }));\n    }\n    /**\n     * Starts execution of the user's function, including triggering checkpoints\n     * and middleware hooks where appropriate.\n     */\n    async startExecution() {\n        var _a, _b, _c, _d, _e, _f, _g;\n        /**\n         * Mutate input as neccessary based on middleware.\n         */\n        await this.transformInput();\n        /**\n         * Start the timer to time out the run if needed.\n         */\n        void ((_a = this.timeout) === null || _a === void 0 ? void 0 : _a.start());\n        await ((_c = (_b = this.state.hooks) === null || _b === void 0 ? void 0 : _b.beforeMemoization) === null || _c === void 0 ? void 0 : _c.call(_b));\n        /**\n         * If we had no state to begin with, immediately end the memoization phase.\n         */\n        if (this.state.allStateUsed()) {\n            await ((_e = (_d = this.state.hooks) === null || _d === void 0 ? void 0 : _d.afterMemoization) === null || _e === void 0 ? void 0 : _e.call(_d));\n            await ((_g = (_f = this.state.hooks) === null || _f === void 0 ? void 0 : _f.beforeExecution) === null || _g === void 0 ? void 0 : _g.call(_f));\n        }\n        /**\n         * Trigger the user's function.\n         */\n        (0, promises_js_1.runAsPromise)(() => this.userFnToRun(this.fnArg))\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\n            .finally(async () => {\n            var _a, _b, _c, _d, _e, _f;\n            await ((_b = (_a = this.state.hooks) === null || _a === void 0 ? void 0 : _a.afterMemoization) === null || _b === void 0 ? void 0 : _b.call(_a));\n            await ((_d = (_c = this.state.hooks) === null || _c === void 0 ? void 0 : _c.beforeExecution) === null || _d === void 0 ? void 0 : _d.call(_c));\n            await ((_f = (_e = this.state.hooks) === null || _e === void 0 ? void 0 : _e.afterExecution) === null || _f === void 0 ? void 0 : _f.call(_e));\n        })\n            .then((data) => {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            this.state.setCheckpoint({ type: \"function-resolved\", data });\n        })\n            .catch((error) => {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            this.state.setCheckpoint({ type: \"function-rejected\", error });\n        });\n    }\n    /**\n     * Using middleware, transform input before running.\n     */\n    async transformInput() {\n        var _a, _b;\n        const inputMutations = await ((_b = (_a = this.state.hooks) === null || _a === void 0 ? void 0 : _a.transformInput) === null || _b === void 0 ? void 0 : _b.call(_a, {\n            ctx: Object.assign({}, this.fnArg),\n            steps: Object.values(this.state.stepState),\n            fn: this.options.fn,\n            reqArgs: this.options.reqArgs,\n        }));\n        if (inputMutations === null || inputMutations === void 0 ? void 0 : inputMutations.ctx) {\n            this.fnArg = inputMutations.ctx;\n        }\n        if (inputMutations === null || inputMutations === void 0 ? void 0 : inputMutations.steps) {\n            this.state.stepState = Object.fromEntries(inputMutations.steps.map((step) => [step.id, step]));\n        }\n    }\n    /**\n     * Using middleware, transform output before returning.\n     */\n    async transformOutput(dataOrError) {\n        var _a, _b, _c, _d;\n        const output = Object.assign({}, dataOrError);\n        /**\n         * If we've been given an error and it's one that we just threw from a step,\n         * we should return a `NonRetriableError` to stop execution.\n         */\n        if (typeof output.error !== \"undefined\") {\n            output.data = (0, errors_js_1.serializeError)(output.error);\n        }\n        const isStepExecution = Boolean(this.state.executingStep);\n        const transformedOutput = await ((_b = (_a = this.state.hooks) === null || _a === void 0 ? void 0 : _a.transformOutput) === null || _b === void 0 ? void 0 : _b.call(_a, {\n            result: Object.assign({}, output),\n            step: this.state.executingStep,\n        }));\n        const { data, error } = Object.assign(Object.assign({}, output), transformedOutput === null || transformedOutput === void 0 ? void 0 : transformedOutput.result);\n        if (!isStepExecution) {\n            await ((_d = (_c = this.state.hooks) === null || _c === void 0 ? void 0 : _c.finished) === null || _d === void 0 ? void 0 : _d.call(_c, {\n                result: Object.assign({}, (typeof error !== \"undefined\" ? { error } : { data })),\n            }));\n        }\n        if (typeof error !== \"undefined\") {\n            /**\n             * Ensure we give middleware the chance to decide on retriable behaviour\n             * by looking at the error returned from output transformation.\n             */\n            let retriable = !(error instanceof NonRetriableError_js_1.NonRetriableError || error instanceof StepError_js_1.StepError);\n            if (retriable && error instanceof RetryAfterError_js_1.RetryAfterError) {\n                retriable = error.retryAfter;\n            }\n            const serializedError = (0, errors_js_1.minifyPrettyError)((0, errors_js_1.serializeError)(error));\n            return {\n                type: \"function-rejected\",\n                ctx: this.fnArg,\n                ops: this.ops,\n                error: serializedError,\n                retriable,\n            };\n        }\n        return {\n            type: \"function-resolved\",\n            ctx: this.fnArg,\n            ops: this.ops,\n            data: (0, functions_js_1.undefinedToNull)(data),\n        };\n    }\n    createExecutionState() {\n        const d = (0, promises_js_1.createDeferredPromiseWithStack)();\n        let checkpointResolve = d.deferred.resolve;\n        const checkpointResults = d.results;\n        const loop = (function (cleanUp) {\n            return __asyncGenerator(this, arguments, function* () {\n                try {\n                    while (true) {\n                        const res = (yield __await(checkpointResults.next())).value;\n                        if (res) {\n                            yield yield __await(res);\n                        }\n                    }\n                }\n                finally {\n                    cleanUp === null || cleanUp === void 0 ? void 0 : cleanUp();\n                }\n            });\n        })(() => {\n            var _a;\n            (_a = this.timeout) === null || _a === void 0 ? void 0 : _a.clear();\n            void checkpointResults.return();\n        });\n        const stepsToFulfill = Object.keys(this.options.stepState).length;\n        const state = {\n            stepState: this.options.stepState,\n            stepsToFulfill,\n            steps: new Map(),\n            loop,\n            hasSteps: Boolean(stepsToFulfill),\n            stepCompletionOrder: [...this.options.stepCompletionOrder],\n            remainingStepsToBeSeen: new Set(this.options.stepCompletionOrder),\n            setCheckpoint: (checkpoint) => {\n                ({ resolve: checkpointResolve } = checkpointResolve(checkpoint));\n            },\n            allStateUsed: () => {\n                return this.state.remainingStepsToBeSeen.size === 0;\n            },\n        };\n        return state;\n    }\n    get ops() {\n        return Object.fromEntries(this.state.steps);\n    }\n    createFnArg() {\n        var _a, _b, _c, _d;\n        const step = this.createStepTools();\n        let fnArg = Object.assign(Object.assign({}, this.options.data), { step });\n        /**\n         * Handle use of the `onFailure` option by deserializing the error.\n         */\n        if (this.options.isFailureHandler) {\n            const eventData = zod_1.z\n                .object({ error: types_js_1.jsonErrorSchema })\n                .parse((_a = fnArg.event) === null || _a === void 0 ? void 0 : _a.data);\n            fnArg = Object.assign(Object.assign({}, fnArg), { error: (0, errors_js_1.deserializeError)(eventData.error) });\n        }\n        return (_d = (_c = (_b = this.options).transformCtx) === null || _c === void 0 ? void 0 : _c.call(_b, fnArg)) !== null && _d !== void 0 ? _d : fnArg;\n    }\n    createStepTools() {\n        /**\n         * A list of steps that have been found and are being rolled up before being\n         * reported to the core loop.\n         */\n        const foundStepsToReport = new Map();\n        /**\n         * A map of the subset of found steps to report that have not yet been\n         * handled. Used for fast access to steps that need to be handled in order.\n         */\n        const unhandledFoundStepsToReport = new Map();\n        /**\n         * A map of the latest sequential step indexes found for each step ID. Used\n         * to ensure that we don't index steps in parallel.\n         *\n         * Note that these must be sequential; if we've seen or assigned `a:1`,\n         * `a:2` and `a:4`, the latest sequential step index is `2`.\n         *\n         */\n        const expectedNextStepIndexes = new Map();\n        /**\n         * An ordered list of step IDs that have yet to be handled in this\n         * execution. Used to ensure that we handle steps in the order they were\n         * found and based on the `stepCompletionOrder` in this execution's state.\n         */\n        const remainingStepCompletionOrder = this.state.stepCompletionOrder.slice();\n        /**\n         * A promise that's used to ensure that step reporting cannot be run more than\n         * once in a given asynchronous time span.\n         */\n        let foundStepsReportPromise;\n        /**\n         * A promise that's used to represent middleware hooks running before\n         * execution.\n         */\n        let beforeExecHooksPromise;\n        /**\n         * A flag used to ensure that we only warn about parallel indexing once per\n         * execution to avoid spamming the console.\n         */\n        let warnOfParallelIndexing = false;\n        /**\n         * Counts the number of times we've extended this tick.\n         */\n        let tickExtensionCount = 0;\n        /**\n         * Given a colliding step ID, maybe warn the user about parallel indexing.\n         */\n        const maybeWarnOfParallelIndexing = (collisionId) => {\n            if (warnOfParallelIndexing) {\n                return;\n            }\n            const stepExists = this.state.steps.has(collisionId);\n            if (stepExists) {\n                const stepFoundThisTick = foundStepsToReport.has(collisionId);\n                if (!stepFoundThisTick) {\n                    warnOfParallelIndexing = true;\n                    console.warn((0, errors_js_1.prettyError)({\n                        type: \"warn\",\n                        whatHappened: \"We detected that you have multiple steps with the same ID.\",\n                        code: errors_js_1.ErrCode.AUTOMATIC_PARALLEL_INDEXING,\n                        why: `This can happen if you're using the same ID for multiple steps across different chains of parallel work. We found the issue with step \"${collisionId}\".`,\n                        reassurance: \"Your function is still running, though it may exhibit unexpected behaviour.\",\n                        consequences: \"Using the same IDs across parallel chains of work can cause unexpected behaviour.\",\n                        toFixNow: \"We recommend using a unique ID for each step, especially those happening in parallel.\",\n                    }));\n                }\n            }\n        };\n        /**\n         * A helper used to report steps to the core loop. Used after adding an item\n         * to `foundStepsToReport`.\n         */\n        const reportNextTick = () => {\n            // Being explicit instead of using `??=` to appease TypeScript.\n            if (foundStepsReportPromise) {\n                return;\n            }\n            let extensionPromise;\n            if (++tickExtensionCount >= 10) {\n                tickExtensionCount = 0;\n                extensionPromise = new Promise((resolve) => setTimeout(resolve));\n            }\n            else {\n                extensionPromise = (0, promises_js_1.resolveAfterPending)();\n            }\n            foundStepsReportPromise = extensionPromise\n                /**\n                 * Ensure that we wait for this promise to resolve before continuing.\n                 *\n                 * The groups in which steps are reported can affect how we detect some\n                 * more complex determinism issues like parallel indexing. This promise\n                 * can represent middleware hooks being run early, in the middle of\n                 * ingesting steps to report.\n                 *\n                 * Because of this, it's important we wait for this middleware to resolve\n                 * before continuing to report steps to ensure that all steps have a\n                 * chance to be reported throughout this asynchronous action.\n                 */\n                .then(() => beforeExecHooksPromise)\n                .then(() => {\n                var _a;\n                foundStepsReportPromise = undefined;\n                for (let i = 0; i < remainingStepCompletionOrder.length; i++) {\n                    const nextStepId = remainingStepCompletionOrder[i];\n                    if (!nextStepId) {\n                        // Strange - skip this empty index\n                        continue;\n                    }\n                    const handled = (_a = unhandledFoundStepsToReport\n                        .get(nextStepId)) === null || _a === void 0 ? void 0 : _a.handle();\n                    if (handled) {\n                        remainingStepCompletionOrder.splice(i, 1);\n                        unhandledFoundStepsToReport.delete(nextStepId);\n                        return void reportNextTick();\n                    }\n                }\n                // If we've handled no steps in this \"tick,\" roll up everything we've\n                // found and report it.\n                const steps = [...foundStepsToReport.values()];\n                foundStepsToReport.clear();\n                unhandledFoundStepsToReport.clear();\n                return void this.state.setCheckpoint({\n                    type: \"steps-found\",\n                    steps: steps,\n                });\n            });\n        };\n        /**\n         * A helper used to push a step to the list of steps to report.\n         */\n        const pushStepToReport = (step) => {\n            foundStepsToReport.set(step.id, step);\n            unhandledFoundStepsToReport.set(step.hashedId, step);\n            reportNextTick();\n        };\n        const stepHandler = async ({ args, matchOp, opts, }) => {\n            var _a, _b, _c, _d;\n            await beforeExecHooksPromise;\n            const stepOptions = (0, InngestStepTools_js_1.getStepOptions)(args[0]);\n            const opId = matchOp(stepOptions, ...args.slice(1));\n            if (this.state.executingStep) {\n                /**\n                 * If a step is found after asynchronous actions during another step's\n                 * execution, everything is fine. The problem here is if we've found\n                 * that a step nested inside another a step, which is something we don't\n                 * support at the time of writing.\n                 *\n                 * In this case, we could use something like Async Hooks to understand\n                 * how the step is being triggered, though this isn't available in all\n                 * environments.\n                 *\n                 * Therefore, we'll only show a warning here to indicate that this is\n                 * potentially an issue.\n                 */\n                console.warn((0, errors_js_1.prettyError)({\n                    whatHappened: `We detected that you have nested \\`step.*\\` tooling in \\`${(_a = opId.displayName) !== null && _a !== void 0 ? _a : opId.id}\\``,\n                    consequences: \"Nesting `step.*` tooling is not supported.\",\n                    type: \"warn\",\n                    reassurance: \"It's possible to see this warning if steps are separated by regular asynchronous calls, which is fine.\",\n                    stack: true,\n                    toFixNow: \"Make sure you're not using `step.*` tooling inside of other `step.*` tooling. If you need to compose steps together, you can create a new async function and call it from within your step function, or use promise chaining.\",\n                    code: errors_js_1.ErrCode.NESTING_STEPS,\n                }));\n            }\n            if (this.state.steps.has(opId.id)) {\n                const originalId = opId.id;\n                maybeWarnOfParallelIndexing(originalId);\n                const expectedNextIndex = (_b = expectedNextStepIndexes.get(originalId)) !== null && _b !== void 0 ? _b : 1;\n                for (let i = expectedNextIndex;; i++) {\n                    const newId = originalId + InngestStepTools_js_1.STEP_INDEXING_SUFFIX + i;\n                    if (!this.state.steps.has(newId)) {\n                        expectedNextStepIndexes.set(originalId, i + 1);\n                        opId.id = newId;\n                        break;\n                    }\n                }\n            }\n            const { promise, resolve, reject } = (0, promises_js_1.createDeferredPromise)();\n            const hashedId = exports._internals.hashId(opId.id);\n            const stepState = this.state.stepState[hashedId];\n            let isFulfilled = false;\n            if (stepState) {\n                stepState.seen = true;\n                this.state.remainingStepsToBeSeen.delete(hashedId);\n                if (typeof stepState.input === \"undefined\") {\n                    isFulfilled = true;\n                }\n            }\n            let extraOpts;\n            let fnArgs = [...args];\n            if (typeof (stepState === null || stepState === void 0 ? void 0 : stepState.input) !== \"undefined\" &&\n                Array.isArray(stepState.input)) {\n                switch (opId.op) {\n                    // `step.run()` has its function input affected\n                    case types_js_1.StepOpCode.StepPlanned: {\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                        fnArgs = [...args.slice(0, 2), ...stepState.input];\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                        extraOpts = { input: [...stepState.input] };\n                        break;\n                    }\n                    // `step.ai.infer()` has its body affected\n                    case types_js_1.StepOpCode.AiGateway: {\n                        extraOpts = {\n                            body: Object.assign(Object.assign({}, (typeof ((_c = opId.opts) === null || _c === void 0 ? void 0 : _c.body) === \"object\"\n                                ? Object.assign({}, opId.opts.body) : {})), stepState.input[0]),\n                        };\n                        break;\n                    }\n                }\n            }\n            const step = Object.assign(Object.assign({}, opId), { opts: Object.assign(Object.assign({}, opId.opts), extraOpts), rawArgs: fnArgs, // TODO What is the right value here? Should this be raw args without affected input?\n                hashedId, input: stepState === null || stepState === void 0 ? void 0 : stepState.input, \n                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n                fn: (opts === null || opts === void 0 ? void 0 : opts.fn) ? () => { var _a; return (_a = opts.fn) === null || _a === void 0 ? void 0 : _a.call(opts, ...fnArgs); } : undefined, promise, fulfilled: isFulfilled, hasStepState: Boolean(stepState), displayName: (_d = opId.displayName) !== null && _d !== void 0 ? _d : opId.id, handled: false, handle: () => {\n                    if (step.handled) {\n                        return false;\n                    }\n                    step.handled = true;\n                    if (isFulfilled && stepState) {\n                        stepState.fulfilled = true;\n                        // For some execution scenarios such as testing, `data`, `error`,\n                        // and `input` may be `Promises`. This could also be the case for\n                        // future middleware applications. For this reason, we'll make sure\n                        // the values are fully resolved before continuing.\n                        void Promise.all([\n                            stepState.data,\n                            stepState.error,\n                            stepState.input,\n                        ]).then(() => {\n                            if (typeof stepState.data !== \"undefined\") {\n                                resolve(stepState.data);\n                            }\n                            else {\n                                this.state.recentlyRejectedStepError = new StepError_js_1.StepError(opId.id, stepState.error);\n                                reject(this.state.recentlyRejectedStepError);\n                            }\n                        });\n                    }\n                    return true;\n                } });\n            this.state.steps.set(opId.id, step);\n            this.state.hasSteps = true;\n            pushStepToReport(step);\n            /**\n             * If this is the last piece of state we had, we've now finished\n             * memoizing.\n             */\n            if (!beforeExecHooksPromise && this.state.allStateUsed()) {\n                await (beforeExecHooksPromise = (async () => {\n                    var _a, _b, _c, _d;\n                    await ((_b = (_a = this.state.hooks) === null || _a === void 0 ? void 0 : _a.afterMemoization) === null || _b === void 0 ? void 0 : _b.call(_a));\n                    await ((_d = (_c = this.state.hooks) === null || _c === void 0 ? void 0 : _c.beforeExecution) === null || _d === void 0 ? void 0 : _d.call(_c));\n                })());\n            }\n            return promise;\n        };\n        return (0, InngestStepTools_js_1.createStepTools)(this.options.client, this, stepHandler);\n    }\n    getUserFnToRun() {\n        if (!this.options.isFailureHandler) {\n            return this.options.fn[\"fn\"];\n        }\n        if (!this.options.fn[\"onFailureFn\"]) {\n            /**\n             * Somehow, we've ended up detecting that this is a failure handler but\n             * doesn't have an `onFailure` function. This should never happen.\n             */\n            throw new Error(\"Cannot find function `onFailure` handler\");\n        }\n        return this.options.fn[\"onFailureFn\"];\n    }\n    initializeTimer(state) {\n        if (!this.options.requestedRunStep) {\n            return;\n        }\n        this.timeout = (0, promises_js_1.createTimeoutPromise)(this.timeoutDuration);\n        void this.timeout.then(async () => {\n            var _a, _b, _c, _d, _e, _f;\n            await ((_b = (_a = this.state.hooks) === null || _a === void 0 ? void 0 : _a.afterMemoization) === null || _b === void 0 ? void 0 : _b.call(_a));\n            await ((_d = (_c = this.state.hooks) === null || _c === void 0 ? void 0 : _c.beforeExecution) === null || _d === void 0 ? void 0 : _d.call(_c));\n            await ((_f = (_e = this.state.hooks) === null || _e === void 0 ? void 0 : _e.afterExecution) === null || _f === void 0 ? void 0 : _f.call(_e));\n            state.setCheckpoint({\n                type: \"step-not-found\",\n                step: {\n                    id: this.options.requestedRunStep,\n                    op: types_js_1.StepOpCode.StepNotFound,\n                },\n            });\n        });\n    }\n    async initializeMiddleware() {\n        const ctx = this.options.data;\n        const hooks = await (0, InngestMiddleware_js_1.getHookStack)(this.options.fn[\"middleware\"], \"onFunctionRun\", {\n            ctx,\n            fn: this.options.fn,\n            steps: Object.values(this.options.stepState),\n            reqArgs: this.options.reqArgs,\n        }, {\n            transformInput: (prev, output) => {\n                return {\n                    ctx: Object.assign(Object.assign({}, prev.ctx), output === null || output === void 0 ? void 0 : output.ctx),\n                    fn: this.options.fn,\n                    steps: prev.steps.map((step, i) => {\n                        var _a;\n                        return (Object.assign(Object.assign({}, step), (_a = output === null || output === void 0 ? void 0 : output.steps) === null || _a === void 0 ? void 0 : _a[i]));\n                    }),\n                    reqArgs: prev.reqArgs,\n                };\n            },\n            transformOutput: (prev, output) => {\n                return {\n                    result: Object.assign(Object.assign({}, prev.result), output === null || output === void 0 ? void 0 : output.result),\n                    step: prev.step,\n                };\n            },\n        });\n        return hooks;\n    }\n}\nconst hashId = (id) => {\n    return (0, hash_js_1.sha1)().update(id).digest(\"hex\");\n};\nconst hashOp = (op) => {\n    return Object.assign(Object.assign({}, op), { id: hashId(op.id) });\n};\n/**\n * Exported for testing.\n */\nexports._internals = { hashOp, hashId };\n//# sourceMappingURL=v1.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/execution/v1.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/execution/v2.js":
/*!*********************************************************!*\
  !*** ./node_modules/inngest/components/execution/v2.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __asyncValues = (this && this.__asyncValues) || function (o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n};\nvar __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }\nvar __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n    function fulfill(value) { resume(\"next\", value); }\n    function reject(value) { resume(\"throw\", value); }\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports._internals = exports.createV2InngestExecution = void 0;\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst hash_js_1 = __webpack_require__(/*! hash.js */ \"(rsc)/./node_modules/hash.js/lib/hash.js\");\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nconst consts_js_1 = __webpack_require__(/*! ../../helpers/consts.js */ \"(rsc)/./node_modules/inngest/helpers/consts.js\");\nconst errors_js_1 = __webpack_require__(/*! ../../helpers/errors.js */ \"(rsc)/./node_modules/inngest/helpers/errors.js\");\nconst functions_js_1 = __webpack_require__(/*! ../../helpers/functions.js */ \"(rsc)/./node_modules/inngest/helpers/functions.js\");\nconst promises_js_1 = __webpack_require__(/*! ../../helpers/promises.js */ \"(rsc)/./node_modules/inngest/helpers/promises.js\");\nconst types_js_1 = __webpack_require__(/*! ../../types.js */ \"(rsc)/./node_modules/inngest/types.js\");\nconst version_js_1 = __webpack_require__(/*! ../../version.js */ \"(rsc)/./node_modules/inngest/version.js\");\nconst InngestMiddleware_js_1 = __webpack_require__(/*! ../InngestMiddleware.js */ \"(rsc)/./node_modules/inngest/components/InngestMiddleware.js\");\nconst InngestStepTools_js_1 = __webpack_require__(/*! ../InngestStepTools.js */ \"(rsc)/./node_modules/inngest/components/InngestStepTools.js\");\nconst NonRetriableError_js_1 = __webpack_require__(/*! ../NonRetriableError.js */ \"(rsc)/./node_modules/inngest/components/NonRetriableError.js\");\nconst RetryAfterError_js_1 = __webpack_require__(/*! ../RetryAfterError.js */ \"(rsc)/./node_modules/inngest/components/RetryAfterError.js\");\nconst StepError_js_1 = __webpack_require__(/*! ../StepError.js */ \"(rsc)/./node_modules/inngest/components/StepError.js\");\nconst InngestExecution_js_1 = __webpack_require__(/*! ./InngestExecution.js */ \"(rsc)/./node_modules/inngest/components/execution/InngestExecution.js\");\nconst als_js_1 = __webpack_require__(/*! ./als.js */ \"(rsc)/./node_modules/inngest/components/execution/als.js\");\nconst access_js_1 = __webpack_require__(/*! ./otel/access.js */ \"(rsc)/./node_modules/inngest/components/execution/otel/access.js\");\nconst createV2InngestExecution = (options) => {\n    return new V2InngestExecution(options);\n};\nexports.createV2InngestExecution = createV2InngestExecution;\nclass V2InngestExecution extends InngestExecution_js_1.InngestExecution {\n    constructor(options) {\n        super(options);\n        this.timeoutDuration = 1000 * 10;\n        this.userFnToRun = this.getUserFnToRun();\n        this.state = this.createExecutionState();\n        this.fnArg = this.createFnArg();\n        this.checkpointHandlers = this.createCheckpointHandlers();\n        this.initializeTimer(this.state);\n        this.debug(\"created new V2 execution for run;\", this.options.requestedRunStep\n            ? `wanting to run step \"${this.options.requestedRunStep}\"`\n            : \"discovering steps\");\n        this.debug(\"existing state keys:\", Object.keys(this.state.stepState));\n    }\n    /**\n     * Idempotently start the execution of the user's function.\n     */\n    start() {\n        if (!this.execution) {\n            this.debug(\"starting V2 execution\");\n            const tracer = api_1.trace.getTracer(\"inngest\", version_js_1.version);\n            this.execution = (0, als_js_1.getAsyncLocalStorage)().then((als) => {\n                return als.run({ app: this.options.client, ctx: this.fnArg }, async () => {\n                    return tracer.startActiveSpan(\"inngest.execution\", (span) => {\n                        var _a;\n                        (_a = access_js_1.clientProcessorMap.get(this.options.client)) === null || _a === void 0 ? void 0 : _a.declareStartingSpan({\n                            span,\n                            runId: this.options.runId,\n                            traceparent: this.options.headers[consts_js_1.headerKeys.TraceParent],\n                            tracestate: this.options.headers[consts_js_1.headerKeys.TraceState],\n                        });\n                        return this._start()\n                            .then((result) => {\n                            this.debug(\"result:\", result);\n                            return result;\n                        })\n                            .finally(() => {\n                            span.end();\n                        });\n                    });\n                });\n            });\n        }\n        return this.execution;\n    }\n    /**\n     * Starts execution of the user's function and the core loop.\n     */\n    async _start() {\n        var _a, e_1, _b, _c;\n        var _d, _e;\n        try {\n            const allCheckpointHandler = this.getCheckpointHandler(\"\");\n            this.state.hooks = await this.initializeMiddleware();\n            await this.startExecution();\n            try {\n                for (var _f = true, _g = __asyncValues(this.state.loop), _h; _h = await _g.next(), _a = _h.done, !_a; _f = true) {\n                    _c = _h.value;\n                    _f = false;\n                    const checkpoint = _c;\n                    await allCheckpointHandler(checkpoint);\n                    const handler = this.getCheckpointHandler(checkpoint.type);\n                    const result = await handler(checkpoint);\n                    if (result) {\n                        return result;\n                    }\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (!_f && !_a && (_b = _g.return)) await _b.call(_g);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        }\n        catch (error) {\n            return await this.transformOutput({ error });\n        }\n        finally {\n            void this.state.loop.return();\n            await ((_e = (_d = this.state.hooks) === null || _d === void 0 ? void 0 : _d.beforeResponse) === null || _e === void 0 ? void 0 : _e.call(_d));\n        }\n        /**\n         * If we're here, the generator somehow finished without returning a value.\n         * This should never happen.\n         */\n        throw new Error(\"Core loop finished without returning a value\");\n    }\n    /**\n     * Creates a handler for every checkpoint type, defining what to do when we\n     * reach that checkpoint in the core loop.\n     */\n    createCheckpointHandlers() {\n        return {\n            /**\n             * Run for all checkpoints. Best used for logging or common actions.\n             * Use other handlers to return values and interrupt the core loop.\n             */\n            \"\": (checkpoint) => {\n                this.debug(\"checkpoint:\", checkpoint);\n            },\n            /**\n             * The user's function has completed and returned a value.\n             */\n            \"function-resolved\": async (checkpoint) => {\n                return await this.transformOutput({ data: checkpoint.data });\n            },\n            /**\n             * The user's function has thrown an error.\n             */\n            \"function-rejected\": async (checkpoint) => {\n                return await this.transformOutput({ error: checkpoint.error });\n            },\n            /**\n             * We've found one or more steps. Here we may want to run a step or report\n             * them back to Inngest.\n             */\n            \"steps-found\": async ({ steps }) => {\n                const stepResult = await this.tryExecuteStep(steps);\n                if (stepResult) {\n                    const transformResult = await this.transformOutput(stepResult);\n                    /**\n                     * Transforming output will always return either function rejection or\n                     * resolution. In most cases, this can be immediately returned, but in\n                     * this particular case we want to handle it differently.\n                     */\n                    if (transformResult.type === \"function-resolved\") {\n                        return {\n                            type: \"step-ran\",\n                            ctx: transformResult.ctx,\n                            ops: transformResult.ops,\n                            step: exports._internals.hashOp(Object.assign(Object.assign({}, stepResult), { data: transformResult.data })),\n                        };\n                    }\n                    else if (transformResult.type === \"function-rejected\") {\n                        return {\n                            type: \"step-ran\",\n                            ctx: transformResult.ctx,\n                            ops: transformResult.ops,\n                            step: exports._internals.hashOp(Object.assign(Object.assign({}, stepResult), { error: transformResult.error })),\n                            retriable: transformResult.retriable,\n                        };\n                    }\n                    return transformResult;\n                }\n                const newSteps = await this.filterNewSteps(Array.from(this.state.steps.values()));\n                if (newSteps) {\n                    return {\n                        type: \"steps-found\",\n                        ctx: this.fnArg,\n                        ops: this.ops,\n                        steps: newSteps,\n                    };\n                }\n            },\n            /**\n             * While trying to find a step that Inngest has told us to run, we've\n             * timed out or have otherwise decided that it doesn't exist.\n             */\n            \"step-not-found\": ({ step }) => {\n                return { type: \"step-not-found\", ctx: this.fnArg, ops: this.ops, step };\n            },\n        };\n    }\n    getCheckpointHandler(type) {\n        return this.checkpointHandlers[type];\n    }\n    async tryExecuteStep(steps) {\n        var _a;\n        const hashedStepIdToRun = this.options.requestedRunStep || this.getEarlyExecRunStep(steps);\n        if (!hashedStepIdToRun) {\n            return;\n        }\n        const step = steps.find((step) => step.hashedId === hashedStepIdToRun && step.fn);\n        if (step) {\n            return await this.executeStep(step);\n        }\n        /**\n         * Ensure we reset the timeout if we have a requested run step but couldn't\n         * find it, but also that we don't reset if we found and executed it.\n         */\n        void ((_a = this.timeout) === null || _a === void 0 ? void 0 : _a.reset());\n    }\n    /**\n     * Given a list of outgoing ops, decide if we can execute an op early and\n     * return the ID of the step to execute if we can.\n     */\n    getEarlyExecRunStep(steps) {\n        /**\n         * We may have been disabled due to parallelism, in which case we can't\n         * immediately execute unless explicitly requested.\n         */\n        if (this.options.disableImmediateExecution)\n            return;\n        const unfulfilledSteps = steps.filter((step) => !step.fulfilled);\n        if (unfulfilledSteps.length !== 1)\n            return;\n        const op = unfulfilledSteps[0];\n        if (op &&\n            op.op === types_js_1.StepOpCode.StepPlanned\n        // TODO We must individually check properties here that we do not want to\n        // execute on, such as retry counts. Nothing exists here that falls in to\n        // this case, but should be accounted for when we add them.\n        // && typeof op.opts === \"undefined\"\n        ) {\n            return op.hashedId;\n        }\n    }\n    async filterNewSteps(foundSteps) {\n        var _a, _b, _c, _d, _e, _f;\n        if (this.options.requestedRunStep) {\n            return;\n        }\n        /**\n         * Gather any steps that aren't memoized and report them.\n         */\n        const newSteps = foundSteps.filter((step) => !step.fulfilled);\n        if (!newSteps.length) {\n            return;\n        }\n        /**\n         * Warn if we've found new steps but haven't yet seen all previous\n         * steps. This may indicate that step presence isn't determinate.\n         */\n        let knownSteps = 0;\n        for (const step of foundSteps) {\n            if (step.fulfilled) {\n                knownSteps++;\n            }\n        }\n        const foundAllCompletedSteps = this.state.stepsToFulfill === knownSteps;\n        if (!foundAllCompletedSteps) {\n            // TODO Tag\n            console.warn((0, errors_js_1.prettyError)({\n                type: \"warn\",\n                whatHappened: \"Function may be indeterminate\",\n                why: \"We found new steps before seeing all previous steps, which may indicate that the function is non-deterministic.\",\n                consequences: \"This may cause unexpected behaviour as Inngest executes your function.\",\n                reassurance: \"This is expected if a function is updated in the middle of a run, but may indicate a bug if not.\",\n            }));\n        }\n        /**\n         * We're finishing up; let's trigger the last of the hooks.\n         */\n        await ((_b = (_a = this.state.hooks) === null || _a === void 0 ? void 0 : _a.afterMemoization) === null || _b === void 0 ? void 0 : _b.call(_a));\n        await ((_d = (_c = this.state.hooks) === null || _c === void 0 ? void 0 : _c.beforeExecution) === null || _d === void 0 ? void 0 : _d.call(_c));\n        await ((_f = (_e = this.state.hooks) === null || _e === void 0 ? void 0 : _e.afterExecution) === null || _f === void 0 ? void 0 : _f.call(_e));\n        const stepList = newSteps.map((step) => ({\n            displayName: step.displayName,\n            op: step.op,\n            id: step.hashedId,\n            name: step.name,\n            opts: step.opts,\n        }));\n        /**\n         * We also run `onSendEvent` middleware hooks against `step.invoke()` steps\n         * to ensure that their `data` is transformed correctly.\n         */\n        return await this.transformNewSteps(stepList);\n    }\n    /**\n     * Using middleware, transform any newly-found steps before returning them to\n     * an Inngest Server.\n     */\n    async transformNewSteps(steps) {\n        return Promise.all(steps.map(async (step) => {\n            var _a, _b, _c, _d, _e, _f, _g;\n            if (step.op !== types_js_1.StepOpCode.InvokeFunction) {\n                return step;\n            }\n            const onSendEventHooks = await (0, InngestMiddleware_js_1.getHookStack)(this.options.fn[\"middleware\"], \"onSendEvent\", undefined, {\n                transformInput: (prev, output) => {\n                    return Object.assign(Object.assign({}, prev), output);\n                },\n                transformOutput: (prev, output) => {\n                    return {\n                        result: Object.assign(Object.assign({}, prev.result), output === null || output === void 0 ? void 0 : output.result),\n                    };\n                },\n            });\n            /**\n             * For each event being sent, create a new `onSendEvent` hook stack to\n             * process it. We do this as middleware hooks are intended to run once\n             * during each lifecycle (onFunctionRun or onSendEvent) and here, a hook\n             * is run for every single event.\n             *\n             * This is done because a developer can use this hook to filter out\n             * events entirely; if we batch all of the events together, we can't\n             * tell which ones were filtered out if we're processing >1 invocation\n             * here.\n             */\n            const transformedPayload = await ((_a = onSendEventHooks.transformInput) === null || _a === void 0 ? void 0 : _a.call(onSendEventHooks, {\n                payloads: [\n                    Object.assign(Object.assign({}, ((_c = (_b = step.opts) === null || _b === void 0 ? void 0 : _b.payload) !== null && _c !== void 0 ? _c : {})), { name: consts_js_1.internalEvents.FunctionInvoked }),\n                ],\n            }));\n            const newPayload = InngestStepTools_js_1.invokePayloadSchema.parse((_e = (_d = transformedPayload === null || transformedPayload === void 0 ? void 0 : transformedPayload.payloads) === null || _d === void 0 ? void 0 : _d[0]) !== null && _e !== void 0 ? _e : {});\n            return Object.assign(Object.assign({}, step), { opts: Object.assign(Object.assign({}, step.opts), { payload: Object.assign(Object.assign({}, ((_g = (_f = step.opts) === null || _f === void 0 ? void 0 : _f.payload) !== null && _g !== void 0 ? _g : {})), newPayload) }) });\n        }));\n    }\n    async executeStep({ id, name, opts, fn, displayName, }) {\n        var _a, _b, _c, _d, _e;\n        (_a = this.timeout) === null || _a === void 0 ? void 0 : _a.clear();\n        await ((_c = (_b = this.state.hooks) === null || _b === void 0 ? void 0 : _b.afterMemoization) === null || _c === void 0 ? void 0 : _c.call(_b));\n        await ((_e = (_d = this.state.hooks) === null || _d === void 0 ? void 0 : _d.beforeExecution) === null || _e === void 0 ? void 0 : _e.call(_d));\n        const outgoingOp = {\n            id,\n            op: types_js_1.StepOpCode.StepRun,\n            name,\n            opts,\n            displayName,\n        };\n        this.state.executingStep = outgoingOp;\n        const store = await (0, als_js_1.getAsyncCtx)();\n        if (store) {\n            store.executingStep = {\n                id,\n                name: displayName,\n            };\n        }\n        this.debug(`executing step \"${id}\"`);\n        return ((0, promises_js_1.runAsPromise)(fn)\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\n            .finally(async () => {\n            var _a, _b;\n            if (store) {\n                delete store.executingStep;\n            }\n            await ((_b = (_a = this.state.hooks) === null || _a === void 0 ? void 0 : _a.afterExecution) === null || _b === void 0 ? void 0 : _b.call(_a));\n        })\n            .then((data) => {\n            return Object.assign(Object.assign({}, outgoingOp), { data });\n        })\n            .catch((error) => {\n            return Object.assign(Object.assign({}, outgoingOp), { op: types_js_1.StepOpCode.StepError, \n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                error });\n        }));\n    }\n    /**\n     * Starts execution of the user's function, including triggering checkpoints\n     * and middleware hooks where appropriate.\n     */\n    async startExecution() {\n        var _a, _b, _c, _d, _e, _f, _g;\n        /**\n         * Mutate input as neccessary based on middleware.\n         */\n        await this.transformInput();\n        /**\n         * Start the timer to time out the run if needed.\n         */\n        void ((_a = this.timeout) === null || _a === void 0 ? void 0 : _a.start());\n        await ((_c = (_b = this.state.hooks) === null || _b === void 0 ? void 0 : _b.beforeMemoization) === null || _c === void 0 ? void 0 : _c.call(_b));\n        /**\n         * If we had no state to begin with, immediately end the memoization phase.\n         */\n        if (this.state.allStateUsed()) {\n            await ((_e = (_d = this.state.hooks) === null || _d === void 0 ? void 0 : _d.afterMemoization) === null || _e === void 0 ? void 0 : _e.call(_d));\n            await ((_g = (_f = this.state.hooks) === null || _f === void 0 ? void 0 : _f.beforeExecution) === null || _g === void 0 ? void 0 : _g.call(_f));\n        }\n        /**\n         * Trigger the user's function.\n         */\n        (0, promises_js_1.runAsPromise)(() => this.userFnToRun(this.fnArg))\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\n            .finally(async () => {\n            var _a, _b, _c, _d, _e, _f;\n            await ((_b = (_a = this.state.hooks) === null || _a === void 0 ? void 0 : _a.afterMemoization) === null || _b === void 0 ? void 0 : _b.call(_a));\n            await ((_d = (_c = this.state.hooks) === null || _c === void 0 ? void 0 : _c.beforeExecution) === null || _d === void 0 ? void 0 : _d.call(_c));\n            await ((_f = (_e = this.state.hooks) === null || _e === void 0 ? void 0 : _e.afterExecution) === null || _f === void 0 ? void 0 : _f.call(_e));\n        })\n            .then((data) => {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            this.state.setCheckpoint({ type: \"function-resolved\", data });\n        })\n            .catch((error) => {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            this.state.setCheckpoint({ type: \"function-rejected\", error });\n        });\n    }\n    /**\n     * Using middleware, transform input before running.\n     */\n    async transformInput() {\n        var _a, _b;\n        const inputMutations = await ((_b = (_a = this.state.hooks) === null || _a === void 0 ? void 0 : _a.transformInput) === null || _b === void 0 ? void 0 : _b.call(_a, {\n            ctx: Object.assign({}, this.fnArg),\n            steps: Object.values(this.state.stepState),\n            fn: this.options.fn,\n            reqArgs: this.options.reqArgs,\n        }));\n        if (inputMutations === null || inputMutations === void 0 ? void 0 : inputMutations.ctx) {\n            this.fnArg = inputMutations.ctx;\n        }\n        if (inputMutations === null || inputMutations === void 0 ? void 0 : inputMutations.steps) {\n            this.state.stepState = Object.fromEntries(inputMutations.steps.map((step) => [step.id, step]));\n        }\n    }\n    /**\n     * Using middleware, transform output before returning.\n     */\n    async transformOutput(dataOrError) {\n        var _a, _b, _c, _d;\n        const output = Object.assign({}, dataOrError);\n        /**\n         * If we've been given an error and it's one that we just threw from a step,\n         * we should return a `NonRetriableError` to stop execution.\n         */\n        if (typeof output.error !== \"undefined\") {\n            output.data = (0, errors_js_1.serializeError)(output.error);\n        }\n        const isStepExecution = Boolean(this.state.executingStep);\n        const transformedOutput = await ((_b = (_a = this.state.hooks) === null || _a === void 0 ? void 0 : _a.transformOutput) === null || _b === void 0 ? void 0 : _b.call(_a, {\n            result: Object.assign({}, output),\n            step: this.state.executingStep,\n        }));\n        const { data, error } = Object.assign(Object.assign({}, output), transformedOutput === null || transformedOutput === void 0 ? void 0 : transformedOutput.result);\n        if (!isStepExecution) {\n            await ((_d = (_c = this.state.hooks) === null || _c === void 0 ? void 0 : _c.finished) === null || _d === void 0 ? void 0 : _d.call(_c, {\n                result: Object.assign({}, (typeof error !== \"undefined\" ? { error } : { data })),\n            }));\n        }\n        if (typeof error !== \"undefined\") {\n            /**\n             * Ensure we give middleware the chance to decide on retriable behaviour\n             * by looking at the error returned from output transformation.\n             */\n            let retriable = !(error instanceof NonRetriableError_js_1.NonRetriableError || error instanceof StepError_js_1.StepError);\n            if (retriable && error instanceof RetryAfterError_js_1.RetryAfterError) {\n                retriable = error.retryAfter;\n            }\n            const serializedError = (0, errors_js_1.minifyPrettyError)((0, errors_js_1.serializeError)(error));\n            return {\n                type: \"function-rejected\",\n                ctx: this.fnArg,\n                ops: this.ops,\n                error: serializedError,\n                retriable,\n            };\n        }\n        return {\n            type: \"function-resolved\",\n            ctx: this.fnArg,\n            ops: this.ops,\n            data: (0, functions_js_1.undefinedToNull)(data),\n        };\n    }\n    createExecutionState() {\n        const d = (0, promises_js_1.createDeferredPromiseWithStack)();\n        let checkpointResolve = d.deferred.resolve;\n        const checkpointResults = d.results;\n        const loop = (function (cleanUp) {\n            return __asyncGenerator(this, arguments, function* () {\n                try {\n                    while (true) {\n                        const res = (yield __await(checkpointResults.next())).value;\n                        if (res) {\n                            yield yield __await(res);\n                        }\n                    }\n                }\n                finally {\n                    cleanUp === null || cleanUp === void 0 ? void 0 : cleanUp();\n                }\n            });\n        })(() => {\n            var _a;\n            (_a = this.timeout) === null || _a === void 0 ? void 0 : _a.clear();\n            void checkpointResults.return();\n        });\n        const stepsToFulfill = Object.keys(this.options.stepState).length;\n        const state = {\n            stepState: this.options.stepState,\n            stepsToFulfill,\n            steps: new Map(),\n            loop,\n            hasSteps: Boolean(stepsToFulfill),\n            stepCompletionOrder: [...this.options.stepCompletionOrder],\n            remainingStepsToBeSeen: new Set(this.options.stepCompletionOrder),\n            setCheckpoint: (checkpoint) => {\n                ({ resolve: checkpointResolve } = checkpointResolve(checkpoint));\n            },\n            allStateUsed: () => {\n                return this.state.remainingStepsToBeSeen.size === 0;\n            },\n        };\n        return state;\n    }\n    get ops() {\n        return Object.fromEntries(this.state.steps);\n    }\n    createFnArg() {\n        var _a, _b, _c, _d;\n        const step = this.createStepTools();\n        let fnArg = Object.assign(Object.assign({}, this.options.data), { step });\n        /**\n         * Handle use of the `onFailure` option by deserializing the error.\n         */\n        if (this.options.isFailureHandler) {\n            const eventData = zod_1.z\n                .object({ error: types_js_1.jsonErrorSchema })\n                .parse((_a = fnArg.event) === null || _a === void 0 ? void 0 : _a.data);\n            fnArg = Object.assign(Object.assign({}, fnArg), { error: (0, errors_js_1.deserializeError)(eventData.error) });\n        }\n        return (_d = (_c = (_b = this.options).transformCtx) === null || _c === void 0 ? void 0 : _c.call(_b, fnArg)) !== null && _d !== void 0 ? _d : fnArg;\n    }\n    createStepTools() {\n        /**\n         * A list of steps that have been found and are being rolled up before being\n         * reported to the core loop.\n         */\n        const foundStepsToReport = new Map();\n        /**\n         * A map of the subset of found steps to report that have not yet been\n         * handled. Used for fast access to steps that need to be handled in order.\n         */\n        const unhandledFoundStepsToReport = new Map();\n        /**\n         * A map of the latest sequential step indexes found for each step ID. Used\n         * to ensure that we don't index steps in parallel.\n         *\n         * Note that these must be sequential; if we've seen or assigned `a:1`,\n         * `a:2` and `a:4`, the latest sequential step index is `2`.\n         *\n         */\n        const expectedNextStepIndexes = new Map();\n        /**\n         * A promise that's used to ensure that step reporting cannot be run more than\n         * once in a given asynchronous time span.\n         */\n        let foundStepsReportPromise;\n        /**\n         * A promise that's used to represent middleware hooks running before\n         * execution.\n         */\n        let beforeExecHooksPromise;\n        /**\n         * A helper used to report steps to the core loop. Used after adding an item\n         * to `foundStepsToReport`.\n         */\n        const reportNextTick = () => {\n            // Being explicit instead of using `??=` to appease TypeScript.\n            if (foundStepsReportPromise) {\n                return;\n            }\n            foundStepsReportPromise = new Promise((resolve) => setImmediate(resolve))\n                /**\n                 * Ensure that we wait for this promise to resolve before continuing.\n                 *\n                 * The groups in which steps are reported can affect how we detect some\n                 * more complex determinism issues like parallel indexing. This promise\n                 * can represent middleware hooks being run early, in the middle of\n                 * ingesting steps to report.\n                 *\n                 * Because of this, it's important we wait for this middleware to resolve\n                 * before continuing to report steps to ensure that all steps have a\n                 * chance to be reported throughout this asynchronous action.\n                 */\n                .then(() => beforeExecHooksPromise)\n                .then(() => {\n                foundStepsReportPromise = undefined;\n                for (const [hashedId, step] of unhandledFoundStepsToReport) {\n                    if (step.handle()) {\n                        unhandledFoundStepsToReport.delete(hashedId);\n                        if (step.fulfilled) {\n                            foundStepsToReport.delete(step.id);\n                        }\n                    }\n                }\n                if (foundStepsToReport.size) {\n                    const steps = [...foundStepsToReport.values()];\n                    foundStepsToReport.clear();\n                    return void this.state.setCheckpoint({\n                        type: \"steps-found\",\n                        steps: steps,\n                    });\n                }\n            });\n        };\n        /**\n         * A helper used to push a step to the list of steps to report.\n         */\n        const pushStepToReport = (step) => {\n            foundStepsToReport.set(step.id, step);\n            unhandledFoundStepsToReport.set(step.hashedId, step);\n            reportNextTick();\n        };\n        const stepHandler = async ({ args, matchOp, opts, }) => {\n            var _a, _b, _c, _d;\n            await beforeExecHooksPromise;\n            const stepOptions = (0, InngestStepTools_js_1.getStepOptions)(args[0]);\n            const opId = matchOp(stepOptions, ...args.slice(1));\n            if (this.state.executingStep) {\n                /**\n                 * If a step is found after asynchronous actions during another step's\n                 * execution, everything is fine. The problem here is if we've found\n                 * that a step nested inside another a step, which is something we don't\n                 * support at the time of writing.\n                 *\n                 * In this case, we could use something like Async Hooks to understand\n                 * how the step is being triggered, though this isn't available in all\n                 * environments.\n                 *\n                 * Therefore, we'll only show a warning here to indicate that this is\n                 * potentially an issue.\n                 */\n                console.warn((0, errors_js_1.prettyError)({\n                    whatHappened: `We detected that you have nested \\`step.*\\` tooling in \\`${(_a = opId.displayName) !== null && _a !== void 0 ? _a : opId.id}\\``,\n                    consequences: \"Nesting `step.*` tooling is not supported.\",\n                    type: \"warn\",\n                    reassurance: \"It's possible to see this warning if steps are separated by regular asynchronous calls, which is fine.\",\n                    stack: true,\n                    toFixNow: \"Make sure you're not using `step.*` tooling inside of other `step.*` tooling. If you need to compose steps together, you can create a new async function and call it from within your step function, or use promise chaining.\",\n                    code: errors_js_1.ErrCode.NESTING_STEPS,\n                }));\n            }\n            if (this.state.steps.has(opId.id)) {\n                const originalId = opId.id;\n                const expectedNextIndex = (_b = expectedNextStepIndexes.get(originalId)) !== null && _b !== void 0 ? _b : 1;\n                for (let i = expectedNextIndex;; i++) {\n                    const newId = originalId + InngestStepTools_js_1.STEP_INDEXING_SUFFIX + i;\n                    if (!this.state.steps.has(newId)) {\n                        expectedNextStepIndexes.set(originalId, i + 1);\n                        opId.id = newId;\n                        break;\n                    }\n                }\n            }\n            const { promise, resolve, reject } = (0, promises_js_1.createDeferredPromise)();\n            const hashedId = exports._internals.hashId(opId.id);\n            const stepState = this.state.stepState[hashedId];\n            let isFulfilled = false;\n            if (stepState) {\n                stepState.seen = true;\n                this.state.remainingStepsToBeSeen.delete(hashedId);\n                if (typeof stepState.input === \"undefined\") {\n                    isFulfilled = true;\n                }\n            }\n            let extraOpts;\n            let fnArgs = [...args];\n            if (typeof (stepState === null || stepState === void 0 ? void 0 : stepState.input) !== \"undefined\" &&\n                Array.isArray(stepState.input)) {\n                switch (opId.op) {\n                    // `step.run()` has its function input affected\n                    case types_js_1.StepOpCode.StepPlanned: {\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                        fnArgs = [...args.slice(0, 2), ...stepState.input];\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                        extraOpts = { input: [...stepState.input] };\n                        break;\n                    }\n                    // `step.ai.infer()` has its body affected\n                    case types_js_1.StepOpCode.AiGateway: {\n                        extraOpts = {\n                            body: Object.assign(Object.assign({}, (typeof ((_c = opId.opts) === null || _c === void 0 ? void 0 : _c.body) === \"object\"\n                                ? Object.assign({}, opId.opts.body) : {})), stepState.input[0]),\n                        };\n                        break;\n                    }\n                }\n            }\n            const step = Object.assign(Object.assign({}, opId), { opts: Object.assign(Object.assign({}, opId.opts), extraOpts), rawArgs: fnArgs, // TODO What is the right value here? Should this be raw args without affected input?\n                hashedId, input: stepState === null || stepState === void 0 ? void 0 : stepState.input, \n                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n                fn: (opts === null || opts === void 0 ? void 0 : opts.fn) ? () => { var _a; return (_a = opts.fn) === null || _a === void 0 ? void 0 : _a.call(opts, ...fnArgs); } : undefined, promise, fulfilled: isFulfilled, hasStepState: Boolean(stepState), displayName: (_d = opId.displayName) !== null && _d !== void 0 ? _d : opId.id, handled: false, handle: () => {\n                    if (step.handled) {\n                        return false;\n                    }\n                    step.handled = true;\n                    if (isFulfilled && stepState) {\n                        stepState.fulfilled = true;\n                        // For some execution scenarios such as testing, `data`, `error`,\n                        // and `input` may be `Promises`. This could also be the case for\n                        // future middleware applications. For this reason, we'll make sure\n                        // the values are fully resolved before continuing.\n                        void Promise.all([\n                            stepState.data,\n                            stepState.error,\n                            stepState.input,\n                        ]).then(() => {\n                            if (typeof stepState.data !== \"undefined\") {\n                                resolve(stepState.data);\n                            }\n                            else {\n                                this.state.recentlyRejectedStepError = new StepError_js_1.StepError(opId.id, stepState.error);\n                                reject(this.state.recentlyRejectedStepError);\n                            }\n                        });\n                    }\n                    return true;\n                } });\n            this.state.steps.set(opId.id, step);\n            this.state.hasSteps = true;\n            pushStepToReport(step);\n            /**\n             * If this is the last piece of state we had, we've now finished\n             * memoizing.\n             */\n            if (!beforeExecHooksPromise && this.state.allStateUsed()) {\n                await (beforeExecHooksPromise = (async () => {\n                    var _a, _b, _c, _d;\n                    await ((_b = (_a = this.state.hooks) === null || _a === void 0 ? void 0 : _a.afterMemoization) === null || _b === void 0 ? void 0 : _b.call(_a));\n                    await ((_d = (_c = this.state.hooks) === null || _c === void 0 ? void 0 : _c.beforeExecution) === null || _d === void 0 ? void 0 : _d.call(_c));\n                })());\n            }\n            return promise;\n        };\n        return (0, InngestStepTools_js_1.createStepTools)(this.options.client, this, stepHandler);\n    }\n    getUserFnToRun() {\n        if (!this.options.isFailureHandler) {\n            return this.options.fn[\"fn\"];\n        }\n        if (!this.options.fn[\"onFailureFn\"]) {\n            /**\n             * Somehow, we've ended up detecting that this is a failure handler but\n             * doesn't have an `onFailure` function. This should never happen.\n             */\n            throw new Error(\"Cannot find function `onFailure` handler\");\n        }\n        return this.options.fn[\"onFailureFn\"];\n    }\n    initializeTimer(state) {\n        if (!this.options.requestedRunStep) {\n            return;\n        }\n        this.timeout = (0, promises_js_1.createTimeoutPromise)(this.timeoutDuration);\n        void this.timeout.then(async () => {\n            var _a, _b, _c, _d, _e, _f;\n            await ((_b = (_a = this.state.hooks) === null || _a === void 0 ? void 0 : _a.afterMemoization) === null || _b === void 0 ? void 0 : _b.call(_a));\n            await ((_d = (_c = this.state.hooks) === null || _c === void 0 ? void 0 : _c.beforeExecution) === null || _d === void 0 ? void 0 : _d.call(_c));\n            await ((_f = (_e = this.state.hooks) === null || _e === void 0 ? void 0 : _e.afterExecution) === null || _f === void 0 ? void 0 : _f.call(_e));\n            state.setCheckpoint({\n                type: \"step-not-found\",\n                step: {\n                    id: this.options.requestedRunStep,\n                    op: types_js_1.StepOpCode.StepNotFound,\n                },\n            });\n        });\n    }\n    async initializeMiddleware() {\n        const ctx = this.options.data;\n        const hooks = await (0, InngestMiddleware_js_1.getHookStack)(this.options.fn[\"middleware\"], \"onFunctionRun\", {\n            ctx,\n            fn: this.options.fn,\n            steps: Object.values(this.options.stepState),\n            reqArgs: this.options.reqArgs,\n        }, {\n            transformInput: (prev, output) => {\n                return {\n                    ctx: Object.assign(Object.assign({}, prev.ctx), output === null || output === void 0 ? void 0 : output.ctx),\n                    fn: this.options.fn,\n                    steps: prev.steps.map((step, i) => {\n                        var _a;\n                        return (Object.assign(Object.assign({}, step), (_a = output === null || output === void 0 ? void 0 : output.steps) === null || _a === void 0 ? void 0 : _a[i]));\n                    }),\n                    reqArgs: prev.reqArgs,\n                };\n            },\n            transformOutput: (prev, output) => {\n                return {\n                    result: Object.assign(Object.assign({}, prev.result), output === null || output === void 0 ? void 0 : output.result),\n                    step: prev.step,\n                };\n            },\n        });\n        return hooks;\n    }\n}\nconst hashId = (id) => {\n    return (0, hash_js_1.sha1)().update(id).digest(\"hex\");\n};\nconst hashOp = (op) => {\n    return Object.assign(Object.assign({}, op), { id: hashId(op.id) });\n};\n/**\n * Exported for testing.\n */\nexports._internals = { hashOp, hashId };\n//# sourceMappingURL=v2.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/execution/v2.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/experimental.js":
/*!**********************************************!*\
  !*** ./node_modules/inngest/experimental.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.InngestSpanProcessor = exports.otelMiddleware = exports.getAsyncCtx = void 0;\n// AsyncLocalStorage\nvar als_js_1 = __webpack_require__(/*! ./components/execution/als.js */ \"(rsc)/./node_modules/inngest/components/execution/als.js\");\nObject.defineProperty(exports, \"getAsyncCtx\", ({ enumerable: true, get: function () { return als_js_1.getAsyncCtx; } }));\n// OpenTelemetry\nvar middleware_js_1 = __webpack_require__(/*! ./components/execution/otel/middleware.js */ \"(rsc)/./node_modules/inngest/components/execution/otel/middleware.js\");\nObject.defineProperty(exports, \"otelMiddleware\", ({ enumerable: true, get: function () { return middleware_js_1.otelMiddleware; } }));\nvar processor_js_1 = __webpack_require__(/*! ./components/execution/otel/processor.js */ \"(rsc)/./node_modules/inngest/components/execution/otel/processor.js\");\nObject.defineProperty(exports, \"InngestSpanProcessor\", ({ enumerable: true, get: function () { return processor_js_1.PublicInngestSpanProcessor; } }));\n//# sourceMappingURL=experimental.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9leHBlcmltZW50YWwuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNEJBQTRCLEdBQUcsc0JBQXNCLEdBQUcsbUJBQW1CO0FBQzNFO0FBQ0EsZUFBZSxtQkFBTyxDQUFDLCtGQUErQjtBQUN0RCwrQ0FBOEMsRUFBRSxxQ0FBcUMsZ0NBQWdDLEVBQUM7QUFDdEg7QUFDQSxzQkFBc0IsbUJBQU8sQ0FBQyx1SEFBMkM7QUFDekUsa0RBQWlELEVBQUUscUNBQXFDLDBDQUEwQyxFQUFDO0FBQ25JLHFCQUFxQixtQkFBTyxDQUFDLHFIQUEwQztBQUN2RSx3REFBdUQsRUFBRSxxQ0FBcUMscURBQXFELEVBQUM7QUFDcEoiLCJzb3VyY2VzIjpbIi9Vc2Vycy9oYXJzaHNocml2YXN0YXYvRGVza3RvcC9Db2RpbmcgUHJvamVjdHMvSm9iLUFzc2lzdGFudC1BZ2VudC9ub2RlX21vZHVsZXMvaW5uZ2VzdC9leHBlcmltZW50YWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLklubmdlc3RTcGFuUHJvY2Vzc29yID0gZXhwb3J0cy5vdGVsTWlkZGxld2FyZSA9IGV4cG9ydHMuZ2V0QXN5bmNDdHggPSB2b2lkIDA7XG4vLyBBc3luY0xvY2FsU3RvcmFnZVxudmFyIGFsc19qc18xID0gcmVxdWlyZShcIi4vY29tcG9uZW50cy9leGVjdXRpb24vYWxzLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0QXN5bmNDdHhcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFsc19qc18xLmdldEFzeW5jQ3R4OyB9IH0pO1xuLy8gT3BlblRlbGVtZXRyeVxudmFyIG1pZGRsZXdhcmVfanNfMSA9IHJlcXVpcmUoXCIuL2NvbXBvbmVudHMvZXhlY3V0aW9uL290ZWwvbWlkZGxld2FyZS5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIm90ZWxNaWRkbGV3YXJlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtaWRkbGV3YXJlX2pzXzEub3RlbE1pZGRsZXdhcmU7IH0gfSk7XG52YXIgcHJvY2Vzc29yX2pzXzEgPSByZXF1aXJlKFwiLi9jb21wb25lbnRzL2V4ZWN1dGlvbi9vdGVsL3Byb2Nlc3Nvci5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIklubmdlc3RTcGFuUHJvY2Vzc29yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm9jZXNzb3JfanNfMS5QdWJsaWNJbm5nZXN0U3BhblByb2Nlc3NvcjsgfSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV4cGVyaW1lbnRhbC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/experimental.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/helpers/ServerTiming.js":
/*!******************************************************!*\
  !*** ./node_modules/inngest/helpers/ServerTiming.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ServerTiming = void 0;\nconst promises_js_1 = __webpack_require__(/*! ./promises.js */ \"(rsc)/./node_modules/inngest/helpers/promises.js\");\n/**\n * A class to manage timing functions and arbitrary periods of time before\n * generating a `Server-Timing` header for use in HTTP responses.\n *\n * This is a very simple implementation that does not support nested timings or\n * fractions of a millisecond.\n */\nclass ServerTiming {\n    constructor() {\n        this.timings = {};\n    }\n    /**\n     * Start a timing. Returns a function that, when called, will stop the timing\n     * and add it to the header.\n     */\n    start(name, description) {\n        if (!this.timings[name]) {\n            this.timings[name] = {\n                description: description !== null && description !== void 0 ? description : \"\",\n                timers: [],\n            };\n        }\n        const index = this.timings[name].timers.push({ start: Date.now() }) - 1;\n        return () => {\n            const target = this.timings[name];\n            if (!target) {\n                return console.warn(`Timing \"${name}\" does not exist`);\n            }\n            const timer = target.timers[index];\n            if (!timer) {\n                return console.warn(`Timer ${index} for timing \"${name}\" does not exist`);\n            }\n            timer.end = Date.now();\n        };\n    }\n    /**\n     * Add a piece of arbitrary, untimed information to the header. Common use\n     * cases would be cache misses.\n     *\n     * @example\n     * ```\n     * timer.append(\"cache\", \"miss\");\n     * ```\n     */\n    append(key, value) {\n        this.timings[key] = {\n            description: value,\n            timers: [],\n        };\n    }\n    /**\n     * Wrap a function in a timing. The timing will be stopped and added to the\n     * header when the function resolves or rejects.\n     *\n     * The return value of the function will be returned from this function.\n     */\n    async wrap(name, fn, description) {\n        const stop = this.start(name, description);\n        try {\n            return (await (0, promises_js_1.runAsPromise)(fn));\n        }\n        finally {\n            stop();\n        }\n    }\n    /**\n     * Generate the `Server-Timing` header.\n     */\n    getHeader() {\n        const entries = Object.entries(this.timings).reduce((acc, [name, { description, timers }]) => {\n            /**\n             * Ignore timers that had no end.\n             */\n            const hasTimersWithEnd = timers.some((timer) => timer.end);\n            if (!hasTimersWithEnd) {\n                return acc;\n            }\n            const dur = timers.reduce((acc, { start, end }) => {\n                if (!start || !end)\n                    return acc;\n                return acc + (end - start);\n            }, 0);\n            const entry = [\n                name,\n                description ? `desc=\"${description}\"` : \"\",\n                dur ? `dur=${dur}` : \"\",\n            ]\n                .filter(Boolean)\n                .join(\";\");\n            return [...acc, entry];\n        }, []);\n        return entries.join(\", \");\n    }\n}\nexports.ServerTiming = ServerTiming;\n//# sourceMappingURL=ServerTiming.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9oZWxwZXJzL1NlcnZlclRpbWluZy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0I7QUFDcEIsc0JBQXNCLG1CQUFPLENBQUMsdUVBQWU7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQsbUJBQW1CO0FBQzFFO0FBQ0E7QUFDQTtBQUNBLCtDQUErQyxLQUFLO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxPQUFPLGNBQWMsS0FBSztBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkVBQTJFLHFCQUFxQjtBQUNoRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QyxZQUFZO0FBQzFEO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsdUNBQXVDLFlBQVk7QUFDbkQsNkJBQTZCLElBQUk7QUFDakM7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9oYXJzaHNocml2YXN0YXYvRGVza3RvcC9Db2RpbmcgUHJvamVjdHMvSm9iLUFzc2lzdGFudC1BZ2VudC9ub2RlX21vZHVsZXMvaW5uZ2VzdC9oZWxwZXJzL1NlcnZlclRpbWluZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU2VydmVyVGltaW5nID0gdm9pZCAwO1xuY29uc3QgcHJvbWlzZXNfanNfMSA9IHJlcXVpcmUoXCIuL3Byb21pc2VzLmpzXCIpO1xuLyoqXG4gKiBBIGNsYXNzIHRvIG1hbmFnZSB0aW1pbmcgZnVuY3Rpb25zIGFuZCBhcmJpdHJhcnkgcGVyaW9kcyBvZiB0aW1lIGJlZm9yZVxuICogZ2VuZXJhdGluZyBhIGBTZXJ2ZXItVGltaW5nYCBoZWFkZXIgZm9yIHVzZSBpbiBIVFRQIHJlc3BvbnNlcy5cbiAqXG4gKiBUaGlzIGlzIGEgdmVyeSBzaW1wbGUgaW1wbGVtZW50YXRpb24gdGhhdCBkb2VzIG5vdCBzdXBwb3J0IG5lc3RlZCB0aW1pbmdzIG9yXG4gKiBmcmFjdGlvbnMgb2YgYSBtaWxsaXNlY29uZC5cbiAqL1xuY2xhc3MgU2VydmVyVGltaW5nIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy50aW1pbmdzID0ge307XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0YXJ0IGEgdGltaW5nLiBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsIHdpbGwgc3RvcCB0aGUgdGltaW5nXG4gICAgICogYW5kIGFkZCBpdCB0byB0aGUgaGVhZGVyLlxuICAgICAqL1xuICAgIHN0YXJ0KG5hbWUsIGRlc2NyaXB0aW9uKSB7XG4gICAgICAgIGlmICghdGhpcy50aW1pbmdzW25hbWVdKSB7XG4gICAgICAgICAgICB0aGlzLnRpbWluZ3NbbmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uICE9PSBudWxsICYmIGRlc2NyaXB0aW9uICE9PSB2b2lkIDAgPyBkZXNjcmlwdGlvbiA6IFwiXCIsXG4gICAgICAgICAgICAgICAgdGltZXJzOiBbXSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLnRpbWluZ3NbbmFtZV0udGltZXJzLnB1c2goeyBzdGFydDogRGF0ZS5ub3coKSB9KSAtIDE7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSB0aGlzLnRpbWluZ3NbbmFtZV07XG4gICAgICAgICAgICBpZiAoIXRhcmdldCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb25zb2xlLndhcm4oYFRpbWluZyBcIiR7bmFtZX1cIiBkb2VzIG5vdCBleGlzdGApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdGltZXIgPSB0YXJnZXQudGltZXJzW2luZGV4XTtcbiAgICAgICAgICAgIGlmICghdGltZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29uc29sZS53YXJuKGBUaW1lciAke2luZGV4fSBmb3IgdGltaW5nIFwiJHtuYW1lfVwiIGRvZXMgbm90IGV4aXN0YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aW1lci5lbmQgPSBEYXRlLm5vdygpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGQgYSBwaWVjZSBvZiBhcmJpdHJhcnksIHVudGltZWQgaW5mb3JtYXRpb24gdG8gdGhlIGhlYWRlci4gQ29tbW9uIHVzZVxuICAgICAqIGNhc2VzIHdvdWxkIGJlIGNhY2hlIG1pc3Nlcy5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgXG4gICAgICogdGltZXIuYXBwZW5kKFwiY2FjaGVcIiwgXCJtaXNzXCIpO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGFwcGVuZChrZXksIHZhbHVlKSB7XG4gICAgICAgIHRoaXMudGltaW5nc1trZXldID0ge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IHZhbHVlLFxuICAgICAgICAgICAgdGltZXJzOiBbXSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV3JhcCBhIGZ1bmN0aW9uIGluIGEgdGltaW5nLiBUaGUgdGltaW5nIHdpbGwgYmUgc3RvcHBlZCBhbmQgYWRkZWQgdG8gdGhlXG4gICAgICogaGVhZGVyIHdoZW4gdGhlIGZ1bmN0aW9uIHJlc29sdmVzIG9yIHJlamVjdHMuXG4gICAgICpcbiAgICAgKiBUaGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBmdW5jdGlvbiB3aWxsIGJlIHJldHVybmVkIGZyb20gdGhpcyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBhc3luYyB3cmFwKG5hbWUsIGZuLCBkZXNjcmlwdGlvbikge1xuICAgICAgICBjb25zdCBzdG9wID0gdGhpcy5zdGFydChuYW1lLCBkZXNjcmlwdGlvbik7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gKGF3YWl0ICgwLCBwcm9taXNlc19qc18xLnJ1bkFzUHJvbWlzZSkoZm4pKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHN0b3AoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZSB0aGUgYFNlcnZlci1UaW1pbmdgIGhlYWRlci5cbiAgICAgKi9cbiAgICBnZXRIZWFkZXIoKSB7XG4gICAgICAgIGNvbnN0IGVudHJpZXMgPSBPYmplY3QuZW50cmllcyh0aGlzLnRpbWluZ3MpLnJlZHVjZSgoYWNjLCBbbmFtZSwgeyBkZXNjcmlwdGlvbiwgdGltZXJzIH1dKSA9PiB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElnbm9yZSB0aW1lcnMgdGhhdCBoYWQgbm8gZW5kLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjb25zdCBoYXNUaW1lcnNXaXRoRW5kID0gdGltZXJzLnNvbWUoKHRpbWVyKSA9PiB0aW1lci5lbmQpO1xuICAgICAgICAgICAgaWYgKCFoYXNUaW1lcnNXaXRoRW5kKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGR1ciA9IHRpbWVycy5yZWR1Y2UoKGFjYywgeyBzdGFydCwgZW5kIH0pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXN0YXJ0IHx8ICFlbmQpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjYyArIChlbmQgLSBzdGFydCk7XG4gICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgIGNvbnN0IGVudHJ5ID0gW1xuICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb24gPyBgZGVzYz1cIiR7ZGVzY3JpcHRpb259XCJgIDogXCJcIixcbiAgICAgICAgICAgICAgICBkdXIgPyBgZHVyPSR7ZHVyfWAgOiBcIlwiLFxuICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIC5maWx0ZXIoQm9vbGVhbilcbiAgICAgICAgICAgICAgICAuam9pbihcIjtcIik7XG4gICAgICAgICAgICByZXR1cm4gWy4uLmFjYywgZW50cnldO1xuICAgICAgICB9LCBbXSk7XG4gICAgICAgIHJldHVybiBlbnRyaWVzLmpvaW4oXCIsIFwiKTtcbiAgICB9XG59XG5leHBvcnRzLlNlcnZlclRpbWluZyA9IFNlcnZlclRpbWluZztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNlcnZlclRpbWluZy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/helpers/ServerTiming.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/helpers/consts.js":
/*!************************************************!*\
  !*** ./node_modules/inngest/helpers/consts.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.syncKind = exports.serverKind = exports.dummyEventKey = exports.debugPrefix = exports.logPrefix = exports.internalEvents = exports.defaultDevServerHost = exports.defaultInngestEventBaseUrl = exports.defaultInngestApiBaseUrl = exports.headerKeys = exports.envKeys = exports.probe = exports.queryKeys = void 0;\nconst chalk_1 = __importDefault(__webpack_require__(/*! chalk */ \"(rsc)/./node_modules/chalk/source/index.js\"));\n/**\n * Keys for accessing query parameters included in requests from Inngest to run\n * functions.\n *\n * Used internally to create handlers using `InngestCommHandler`, but can be\n * imported to be used if creating a custom handler outside of the package.\n *\n * @public\n */\nvar queryKeys;\n(function (queryKeys) {\n    queryKeys[\"DeployId\"] = \"deployId\";\n    queryKeys[\"FnId\"] = \"fnId\";\n    queryKeys[\"Probe\"] = \"probe\";\n    queryKeys[\"StepId\"] = \"stepId\";\n})(queryKeys || (exports.queryKeys = queryKeys = {}));\nvar probe;\n(function (probe) {\n    probe[\"Trust\"] = \"trust\";\n})(probe || (exports.probe = probe = {}));\nvar envKeys;\n(function (envKeys) {\n    envKeys[\"InngestSigningKey\"] = \"INNGEST_SIGNING_KEY\";\n    envKeys[\"InngestSigningKeyFallback\"] = \"INNGEST_SIGNING_KEY_FALLBACK\";\n    envKeys[\"InngestEventKey\"] = \"INNGEST_EVENT_KEY\";\n    /**\n     * @deprecated Removed in v3. Use {@link InngestBaseUrl} instead.\n     */\n    envKeys[\"InngestDevServerUrl\"] = \"INNGEST_DEVSERVER_URL\";\n    envKeys[\"InngestEnvironment\"] = \"INNGEST_ENV\";\n    envKeys[\"InngestBaseUrl\"] = \"INNGEST_BASE_URL\";\n    envKeys[\"InngestEventApiBaseUrl\"] = \"INNGEST_EVENT_API_BASE_URL\";\n    envKeys[\"InngestApiBaseUrl\"] = \"INNGEST_API_BASE_URL\";\n    envKeys[\"InngestServeHost\"] = \"INNGEST_SERVE_HOST\";\n    envKeys[\"InngestServePath\"] = \"INNGEST_SERVE_PATH\";\n    envKeys[\"InngestLogLevel\"] = \"INNGEST_LOG_LEVEL\";\n    envKeys[\"InngestStreaming\"] = \"INNGEST_STREAMING\";\n    envKeys[\"InngestDevMode\"] = \"INNGEST_DEV\";\n    envKeys[\"InngestAllowInBandSync\"] = \"INNGEST_ALLOW_IN_BAND_SYNC\";\n    /**\n     * @deprecated It's unknown what this env var was used for, but we do not\n     * provide explicit support for it. Prefer using `INNGEST_ENV` instead.\n     */\n    envKeys[\"BranchName\"] = \"BRANCH_NAME\";\n    /**\n     * The git branch of the commit the deployment was triggered by. Example:\n     * `improve-about-page`.\n     *\n     * {@link https://vercel.com/docs/concepts/projects/environment-variables/system-environment-variables#system-environment-variables}\n     */\n    envKeys[\"VercelBranch\"] = \"VERCEL_GIT_COMMIT_REF\";\n    /**\n     * Expected to be `\"1\"` if defined.\n     */\n    envKeys[\"IsVercel\"] = \"VERCEL\";\n    /**\n     * The branch name of the current deployment. May only be accessible at build\n     * time, but included here just in case.\n     *\n     * {@link https://developers.cloudflare.com/pages/platform/build-configuration/#environment-variables}\n     */\n    envKeys[\"CloudflarePagesBranch\"] = \"CF_PAGES_BRANCH\";\n    /**\n     * Expected to be `\"1\"` if defined.\n     */\n    envKeys[\"IsCloudflarePages\"] = \"CF_PAGES\";\n    /**\n     * The branch name of the deployment from Git to Netlify, if available.\n     *\n     * {@link https://docs.netlify.com/configure-builds/environment-variables/#git-metadata}\n     */\n    envKeys[\"NetlifyBranch\"] = \"BRANCH\";\n    /**\n     * Expected to be `\"true\"` if defined.\n     */\n    envKeys[\"IsNetlify\"] = \"NETLIFY\";\n    /**\n     * The Git branch for a service or deploy.\n     *\n     * {@link https://render.com/docs/environment-variables#all-services}\n     */\n    envKeys[\"RenderBranch\"] = \"RENDER_GIT_BRANCH\";\n    /**\n     * Expected to be `\"true\"` if defined.\n     */\n    envKeys[\"IsRender\"] = \"RENDER\";\n    /**\n     * The branch that triggered the deployment. Example: `main`\n     *\n     * {@link https://docs.railway.app/develop/variables#railway-provided-variables}\n     */\n    envKeys[\"RailwayBranch\"] = \"RAILWAY_GIT_BRANCH\";\n    /**\n     * The railway environment for the deployment. Example: `production`\n     *\n     * {@link https://docs.railway.app/develop/variables#railway-provided-variables}\n     */\n    envKeys[\"RailwayEnvironment\"] = \"RAILWAY_ENVIRONMENT\";\n    envKeys[\"VercelEnvKey\"] = \"VERCEL_ENV\";\n    envKeys[\"OpenAiApiKey\"] = \"OPENAI_API_KEY\";\n    envKeys[\"GeminiApiKey\"] = \"GEMINI_API_KEY\";\n    envKeys[\"AnthropicApiKey\"] = \"ANTHROPIC_API_KEY\";\n})(envKeys || (exports.envKeys = envKeys = {}));\n/**\n * Keys for accessing headers included in requests from Inngest to run\n * functions.\n *\n * Used internally to create handlers using `InngestCommHandler`, but can be\n * imported to be used if creating a custom handler outside of the package.\n *\n * @public\n */\nvar headerKeys;\n(function (headerKeys) {\n    headerKeys[\"ContentLength\"] = \"content-length\";\n    headerKeys[\"Signature\"] = \"x-inngest-signature\";\n    headerKeys[\"SdkVersion\"] = \"x-inngest-sdk\";\n    headerKeys[\"Environment\"] = \"x-inngest-env\";\n    headerKeys[\"Platform\"] = \"x-inngest-platform\";\n    headerKeys[\"Framework\"] = \"x-inngest-framework\";\n    headerKeys[\"NoRetry\"] = \"x-inngest-no-retry\";\n    headerKeys[\"RequestVersion\"] = \"x-inngest-req-version\";\n    headerKeys[\"RetryAfter\"] = \"retry-after\";\n    headerKeys[\"InngestServerKind\"] = \"x-inngest-server-kind\";\n    headerKeys[\"InngestExpectedServerKind\"] = \"x-inngest-expected-server-kind\";\n    headerKeys[\"InngestSyncKind\"] = \"x-inngest-sync-kind\";\n    headerKeys[\"EventIdSeed\"] = \"x-inngest-event-id-seed\";\n    headerKeys[\"TraceParent\"] = \"traceparent\";\n    headerKeys[\"TraceState\"] = \"tracestate\";\n})(headerKeys || (exports.headerKeys = headerKeys = {}));\nexports.defaultInngestApiBaseUrl = \"https://api.inngest.com/\";\nexports.defaultInngestEventBaseUrl = \"https://inn.gs/\";\nexports.defaultDevServerHost = \"http://localhost:8288/\";\n/**\n * Events that Inngest may send internally that can be used to trigger\n * functions.\n *\n * @public\n */\nvar internalEvents;\n(function (internalEvents) {\n    /**\n     * A function has failed after exhausting all available retries. This event\n     * will contain the original event and the error that caused the failure.\n     */\n    internalEvents[\"FunctionFailed\"] = \"inngest/function.failed\";\n    internalEvents[\"FunctionInvoked\"] = \"inngest/function.invoked\";\n    internalEvents[\"FunctionFinished\"] = \"inngest/function.finished\";\n    internalEvents[\"FunctionCancelled\"] = \"inngest/function.cancelled\";\n    internalEvents[\"ScheduledTimer\"] = \"inngest/scheduled.timer\";\n})(internalEvents || (exports.internalEvents = internalEvents = {}));\nexports.logPrefix = chalk_1.default.magenta.bold(\"[Inngest]\");\nexports.debugPrefix = \"inngest\";\nexports.dummyEventKey = \"NO_EVENT_KEY_SET\";\nvar serverKind;\n(function (serverKind) {\n    serverKind[\"Dev\"] = \"dev\";\n    serverKind[\"Cloud\"] = \"cloud\";\n})(serverKind || (exports.serverKind = serverKind = {}));\nvar syncKind;\n(function (syncKind) {\n    syncKind[\"InBand\"] = \"in_band\";\n    syncKind[\"OutOfBand\"] = \"out_of_band\";\n})(syncKind || (exports.syncKind = syncKind = {}));\n//# sourceMappingURL=consts.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/helpers/consts.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/helpers/crypto.js":
/*!************************************************!*\
  !*** ./node_modules/inngest/helpers/crypto.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createEntropy = createEntropy;\n/**\n * Create a cryptographically secure random value.\n *\n * @throws {Error} If the crypto module is not available.\n */\nfunction createEntropy(byteLength) {\n    const bytes = new Uint8Array(byteLength);\n    // https://developer.mozilla.org/en-US/docs/Web/API/Crypto#browser_compatibility\n    const { crypto } = globalThis;\n    if (!crypto) {\n        // This should only happen in Node <19.\n        throw new Error(\"missing crypto module\");\n    }\n    if (!crypto.getRandomValues) {\n        throw new Error(\"missing crypto.getRandomValues\");\n    }\n    crypto.getRandomValues(bytes);\n    return bytes;\n}\n//# sourceMappingURL=crypto.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9oZWxwZXJzL2NyeXB0by5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0EsWUFBWSxPQUFPO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxTQUFTO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9oYXJzaHNocml2YXN0YXYvRGVza3RvcC9Db2RpbmcgUHJvamVjdHMvSm9iLUFzc2lzdGFudC1BZ2VudC9ub2RlX21vZHVsZXMvaW5uZ2VzdC9oZWxwZXJzL2NyeXB0by5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY3JlYXRlRW50cm9weSA9IGNyZWF0ZUVudHJvcHk7XG4vKipcbiAqIENyZWF0ZSBhIGNyeXB0b2dyYXBoaWNhbGx5IHNlY3VyZSByYW5kb20gdmFsdWUuXG4gKlxuICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBjcnlwdG8gbW9kdWxlIGlzIG5vdCBhdmFpbGFibGUuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUVudHJvcHkoYnl0ZUxlbmd0aCkge1xuICAgIGNvbnN0IGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYnl0ZUxlbmd0aCk7XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0NyeXB0byNicm93c2VyX2NvbXBhdGliaWxpdHlcbiAgICBjb25zdCB7IGNyeXB0byB9ID0gZ2xvYmFsVGhpcztcbiAgICBpZiAoIWNyeXB0bykge1xuICAgICAgICAvLyBUaGlzIHNob3VsZCBvbmx5IGhhcHBlbiBpbiBOb2RlIDwxOS5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibWlzc2luZyBjcnlwdG8gbW9kdWxlXCIpO1xuICAgIH1cbiAgICBpZiAoIWNyeXB0by5nZXRSYW5kb21WYWx1ZXMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibWlzc2luZyBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzXCIpO1xuICAgIH1cbiAgICBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKGJ5dGVzKTtcbiAgICByZXR1cm4gYnl0ZXM7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcnlwdG8uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/helpers/crypto.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/helpers/devserver.js":
/*!***************************************************!*\
  !*** ./node_modules/inngest/helpers/devserver.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.devServerHost = exports.devServerUrl = exports.devServerAvailable = void 0;\nconst consts_js_1 = __webpack_require__(/*! ./consts.js */ \"(rsc)/./node_modules/inngest/helpers/consts.js\");\nconst env_js_1 = __webpack_require__(/*! ./env.js */ \"(rsc)/./node_modules/inngest/helpers/env.js\");\n/**\n * Attempts to contact the dev server, returning a boolean indicating whether or\n * not it was successful.\n *\n * @example devServerUrl(process.env[envKeys.DevServerUrl], \"/your-path\")\n */\nconst devServerAvailable = async (\n/**\n * The host of the dev server. You should pass in an environment variable as\n * this parameter.\n */\nhost = consts_js_1.defaultDevServerHost, \n/**\n * The fetch implementation to use to communicate with the dev server.\n */\nfetch) => {\n    try {\n        const url = (0, exports.devServerUrl)(host, \"/dev\");\n        const result = await fetch(url.toString());\n        await result.json();\n        return true;\n    }\n    catch (e) {\n        return false;\n    }\n};\nexports.devServerAvailable = devServerAvailable;\n/**\n * devServerUrl returns a full URL for the given path name.\n *\n * Because Cloudflare/V8 platforms don't allow process.env, you are expected\n * to pass in the host from the dev server env key:\n *\n * @example devServerUrl(processEnv(envKeys.DevServerUrl), \"/your-path\")\n * @example devServerUrl(\"http://localhost:8288/\", \"/your-path\")\n */\nconst devServerUrl = (host = (0, exports.devServerHost)(), pathname = \"\") => {\n    return new URL(pathname, host.includes(\"://\") ? host : `http://${host}`);\n};\nexports.devServerUrl = devServerUrl;\n/**\n * devServerHost exports the development server's domain by inspecting env\n * variables, or returns the default development server URL.\n *\n * This guarantees a specific URL as a string, as opposed to the env export\n * which only returns a value of the env var is set.\n */\nconst devServerHost = () => (0, env_js_1.devServerHost)() || consts_js_1.defaultDevServerHost;\nexports.devServerHost = devServerHost;\n//# sourceMappingURL=devserver.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9oZWxwZXJzL2RldnNlcnZlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUIsR0FBRyxvQkFBb0IsR0FBRywwQkFBMEI7QUFDekUsb0JBQW9CLG1CQUFPLENBQUMsbUVBQWE7QUFDekMsaUJBQWlCLG1CQUFPLENBQUMsNkRBQVU7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFFQUFxRSxLQUFLO0FBQzFFO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9oYXJzaHNocml2YXN0YXYvRGVza3RvcC9Db2RpbmcgUHJvamVjdHMvSm9iLUFzc2lzdGFudC1BZ2VudC9ub2RlX21vZHVsZXMvaW5uZ2VzdC9oZWxwZXJzL2RldnNlcnZlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGV2U2VydmVySG9zdCA9IGV4cG9ydHMuZGV2U2VydmVyVXJsID0gZXhwb3J0cy5kZXZTZXJ2ZXJBdmFpbGFibGUgPSB2b2lkIDA7XG5jb25zdCBjb25zdHNfanNfMSA9IHJlcXVpcmUoXCIuL2NvbnN0cy5qc1wiKTtcbmNvbnN0IGVudl9qc18xID0gcmVxdWlyZShcIi4vZW52LmpzXCIpO1xuLyoqXG4gKiBBdHRlbXB0cyB0byBjb250YWN0IHRoZSBkZXYgc2VydmVyLCByZXR1cm5pbmcgYSBib29sZWFuIGluZGljYXRpbmcgd2hldGhlciBvclxuICogbm90IGl0IHdhcyBzdWNjZXNzZnVsLlxuICpcbiAqIEBleGFtcGxlIGRldlNlcnZlclVybChwcm9jZXNzLmVudltlbnZLZXlzLkRldlNlcnZlclVybF0sIFwiL3lvdXItcGF0aFwiKVxuICovXG5jb25zdCBkZXZTZXJ2ZXJBdmFpbGFibGUgPSBhc3luYyAoXG4vKipcbiAqIFRoZSBob3N0IG9mIHRoZSBkZXYgc2VydmVyLiBZb3Ugc2hvdWxkIHBhc3MgaW4gYW4gZW52aXJvbm1lbnQgdmFyaWFibGUgYXNcbiAqIHRoaXMgcGFyYW1ldGVyLlxuICovXG5ob3N0ID0gY29uc3RzX2pzXzEuZGVmYXVsdERldlNlcnZlckhvc3QsIFxuLyoqXG4gKiBUaGUgZmV0Y2ggaW1wbGVtZW50YXRpb24gdG8gdXNlIHRvIGNvbW11bmljYXRlIHdpdGggdGhlIGRldiBzZXJ2ZXIuXG4gKi9cbmZldGNoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgdXJsID0gKDAsIGV4cG9ydHMuZGV2U2VydmVyVXJsKShob3N0LCBcIi9kZXZcIik7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGZldGNoKHVybC50b1N0cmluZygpKTtcbiAgICAgICAgYXdhaXQgcmVzdWx0Lmpzb24oKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59O1xuZXhwb3J0cy5kZXZTZXJ2ZXJBdmFpbGFibGUgPSBkZXZTZXJ2ZXJBdmFpbGFibGU7XG4vKipcbiAqIGRldlNlcnZlclVybCByZXR1cm5zIGEgZnVsbCBVUkwgZm9yIHRoZSBnaXZlbiBwYXRoIG5hbWUuXG4gKlxuICogQmVjYXVzZSBDbG91ZGZsYXJlL1Y4IHBsYXRmb3JtcyBkb24ndCBhbGxvdyBwcm9jZXNzLmVudiwgeW91IGFyZSBleHBlY3RlZFxuICogdG8gcGFzcyBpbiB0aGUgaG9zdCBmcm9tIHRoZSBkZXYgc2VydmVyIGVudiBrZXk6XG4gKlxuICogQGV4YW1wbGUgZGV2U2VydmVyVXJsKHByb2Nlc3NFbnYoZW52S2V5cy5EZXZTZXJ2ZXJVcmwpLCBcIi95b3VyLXBhdGhcIilcbiAqIEBleGFtcGxlIGRldlNlcnZlclVybChcImh0dHA6Ly9sb2NhbGhvc3Q6ODI4OC9cIiwgXCIveW91ci1wYXRoXCIpXG4gKi9cbmNvbnN0IGRldlNlcnZlclVybCA9IChob3N0ID0gKDAsIGV4cG9ydHMuZGV2U2VydmVySG9zdCkoKSwgcGF0aG5hbWUgPSBcIlwiKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBVUkwocGF0aG5hbWUsIGhvc3QuaW5jbHVkZXMoXCI6Ly9cIikgPyBob3N0IDogYGh0dHA6Ly8ke2hvc3R9YCk7XG59O1xuZXhwb3J0cy5kZXZTZXJ2ZXJVcmwgPSBkZXZTZXJ2ZXJVcmw7XG4vKipcbiAqIGRldlNlcnZlckhvc3QgZXhwb3J0cyB0aGUgZGV2ZWxvcG1lbnQgc2VydmVyJ3MgZG9tYWluIGJ5IGluc3BlY3RpbmcgZW52XG4gKiB2YXJpYWJsZXMsIG9yIHJldHVybnMgdGhlIGRlZmF1bHQgZGV2ZWxvcG1lbnQgc2VydmVyIFVSTC5cbiAqXG4gKiBUaGlzIGd1YXJhbnRlZXMgYSBzcGVjaWZpYyBVUkwgYXMgYSBzdHJpbmcsIGFzIG9wcG9zZWQgdG8gdGhlIGVudiBleHBvcnRcbiAqIHdoaWNoIG9ubHkgcmV0dXJucyBhIHZhbHVlIG9mIHRoZSBlbnYgdmFyIGlzIHNldC5cbiAqL1xuY29uc3QgZGV2U2VydmVySG9zdCA9ICgpID0+ICgwLCBlbnZfanNfMS5kZXZTZXJ2ZXJIb3N0KSgpIHx8IGNvbnN0c19qc18xLmRlZmF1bHREZXZTZXJ2ZXJIb3N0O1xuZXhwb3J0cy5kZXZTZXJ2ZXJIb3N0ID0gZGV2U2VydmVySG9zdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRldnNlcnZlci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/helpers/devserver.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/helpers/enum.js":
/*!**********************************************!*\
  !*** ./node_modules/inngest/helpers/enum.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.enumFromValue = void 0;\n/**\n * Returns the value of an enum from a string value.\n *\n * If the value given is not a value from the enum, `undefined` is returned.\n */\nconst enumFromValue = (enumType, value) => {\n    if (Object.values(enumType).includes(value)) {\n        return value;\n    }\n};\nexports.enumFromValue = enumFromValue;\n//# sourceMappingURL=enum.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9oZWxwZXJzL2VudW0uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCIiwic291cmNlcyI6WyIvVXNlcnMvaGFyc2hzaHJpdmFzdGF2L0Rlc2t0b3AvQ29kaW5nIFByb2plY3RzL0pvYi1Bc3Npc3RhbnQtQWdlbnQvbm9kZV9tb2R1bGVzL2lubmdlc3QvaGVscGVycy9lbnVtLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5lbnVtRnJvbVZhbHVlID0gdm9pZCAwO1xuLyoqXG4gKiBSZXR1cm5zIHRoZSB2YWx1ZSBvZiBhbiBlbnVtIGZyb20gYSBzdHJpbmcgdmFsdWUuXG4gKlxuICogSWYgdGhlIHZhbHVlIGdpdmVuIGlzIG5vdCBhIHZhbHVlIGZyb20gdGhlIGVudW0sIGB1bmRlZmluZWRgIGlzIHJldHVybmVkLlxuICovXG5jb25zdCBlbnVtRnJvbVZhbHVlID0gKGVudW1UeXBlLCB2YWx1ZSkgPT4ge1xuICAgIGlmIChPYmplY3QudmFsdWVzKGVudW1UeXBlKS5pbmNsdWRlcyh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbn07XG5leHBvcnRzLmVudW1Gcm9tVmFsdWUgPSBlbnVtRnJvbVZhbHVlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW51bS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/helpers/enum.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/helpers/env.js":
/*!*********************************************!*\
  !*** ./node_modules/inngest/helpers/env.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// This file exists to help normalize process.env amongst the backend\n// and frontend.  Many frontends (eg. Next, CRA) utilize webpack's DefinePlugin\n// along with prefixes, meaning we have to explicitly use the full `process.env.FOO`\n// string in order to read variables.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.parseAsBoolean = exports.getResponse = exports.getFetch = exports.platformSupportsStreaming = exports.getPlatformName = exports.inngestHeaders = exports.allProcessEnv = exports.processEnv = exports.getEnvironmentName = exports.getMode = exports.Mode = exports.devServerHost = void 0;\nconst version_js_1 = __webpack_require__(/*! ../version.js */ \"(rsc)/./node_modules/inngest/version.js\");\nconst consts_js_1 = __webpack_require__(/*! ./consts.js */ \"(rsc)/./node_modules/inngest/helpers/consts.js\");\nconst strings_js_1 = __webpack_require__(/*! ./strings.js */ \"(rsc)/./node_modules/inngest/helpers/strings.js\");\n/**\n * devServerHost returns the dev server host by searching for the INNGEST_DEVSERVER_URL\n * environment variable (plus project prefixces for eg. react, such as REACT_APP_INNGEST_DEVSERVER_URL).\n *\n * If not found this returns undefined, indicating that the env var has not been set.\n *\n * @example devServerHost()\n */\nconst devServerHost = (env = (0, exports.allProcessEnv)()) => {\n    // devServerKeys are the env keys we search for to discover the dev server\n    // URL.  This includes the standard key first, then includes prefixed keys\n    // for use within common frameworks (eg. CRA, next).\n    //\n    // We have to fully write these using process.env as they're typically\n    // processed using webpack's DefinePlugin, which is dumb and does a straight\n    // text replacement instead of actually understanding the AST, despite webpack\n    // being fully capable of understanding the AST.\n    const prefixes = [\"REACT_APP_\", \"NEXT_PUBLIC_\"];\n    const keys = [consts_js_1.envKeys.InngestBaseUrl, consts_js_1.envKeys.InngestDevMode];\n    const values = keys.flatMap((key) => {\n        return prefixes.map((prefix) => {\n            return env[prefix + key];\n        });\n    });\n    return values.find((v) => {\n        if (!v) {\n            return;\n        }\n        try {\n            return Boolean(new URL(v));\n        }\n        catch (_a) {\n            // no-op\n        }\n    });\n};\nexports.devServerHost = devServerHost;\nconst checkFns = ((checks) => checks)({\n    equals: (actual, expected) => actual === expected,\n    \"starts with\": (actual, expected) => { var _a; return expected ? (_a = actual === null || actual === void 0 ? void 0 : actual.startsWith(expected)) !== null && _a !== void 0 ? _a : false : false; },\n    \"is truthy\": (actual) => Boolean(actual),\n    \"is truthy but not\": (actual, expected) => Boolean(actual) && actual !== expected,\n});\nconst prodChecks = [\n    [\"CF_PAGES\", \"equals\", \"1\"],\n    [\"CONTEXT\", \"starts with\", \"prod\"],\n    [\"ENVIRONMENT\", \"starts with\", \"prod\"],\n    [\"NODE_ENV\", \"starts with\", \"prod\"],\n    [\"VERCEL_ENV\", \"starts with\", \"prod\"],\n    [\"DENO_DEPLOYMENT_ID\", \"is truthy\"],\n    [consts_js_1.envKeys.VercelEnvKey, \"is truthy but not\", \"development\"],\n    [consts_js_1.envKeys.IsNetlify, \"is truthy\"],\n    [consts_js_1.envKeys.IsRender, \"is truthy\"],\n    [consts_js_1.envKeys.RailwayBranch, \"is truthy\"],\n    [consts_js_1.envKeys.IsCloudflarePages, \"is truthy\"],\n];\nclass Mode {\n    constructor({ type, isExplicit, explicitDevUrl, env = (0, exports.allProcessEnv)(), }) {\n        this.env = env;\n        this.type = type;\n        this.isExplicit = isExplicit || Boolean(explicitDevUrl);\n        this.explicitDevUrl = explicitDevUrl;\n    }\n    get isDev() {\n        return this.type === \"dev\";\n    }\n    get isCloud() {\n        return this.type === \"cloud\";\n    }\n    get isInferred() {\n        return !this.isExplicit;\n    }\n    /**\n     * If we are explicitly in a particular mode, retrieve the URL that we are\n     * sure we should be using, not considering any environment variables or other\n     * influences.\n     */\n    getExplicitUrl(defaultCloudUrl) {\n        if (!this.isExplicit) {\n            return undefined;\n        }\n        if (this.explicitDevUrl) {\n            return this.explicitDevUrl.href;\n        }\n        if (this.isCloud) {\n            return defaultCloudUrl;\n        }\n        if (this.isDev) {\n            return consts_js_1.defaultDevServerHost;\n        }\n        return undefined;\n    }\n}\nexports.Mode = Mode;\n/**\n * Returns the mode of the current environment, based off of either passed\n * environment variables or `process.env`, or explicit settings.\n */\nconst getMode = ({ env = (0, exports.allProcessEnv)(), client, explicitMode, } = {}) => {\n    if (explicitMode) {\n        return new Mode({ type: explicitMode, isExplicit: true, env });\n    }\n    if (client === null || client === void 0 ? void 0 : client[\"mode\"].isExplicit) {\n        return client[\"mode\"];\n    }\n    if (consts_js_1.envKeys.InngestDevMode in env) {\n        if (typeof env[consts_js_1.envKeys.InngestDevMode] === \"string\") {\n            try {\n                const explicitDevUrl = new URL(env[consts_js_1.envKeys.InngestDevMode]);\n                return new Mode({ type: \"dev\", isExplicit: true, explicitDevUrl, env });\n            }\n            catch (_a) {\n                // no-op\n            }\n        }\n        const envIsDev = (0, exports.parseAsBoolean)(env[consts_js_1.envKeys.InngestDevMode]);\n        if (typeof envIsDev === \"boolean\") {\n            return new Mode({\n                type: envIsDev ? \"dev\" : \"cloud\",\n                isExplicit: true,\n                env,\n            });\n        }\n    }\n    const isProd = prodChecks.some(([key, checkKey, expected]) => {\n        return checkFns[checkKey]((0, strings_js_1.stringifyUnknown)(env[key]), expected);\n    });\n    return new Mode({ type: isProd ? \"cloud\" : \"dev\", isExplicit: false, env });\n};\nexports.getMode = getMode;\n/**\n * getEnvironmentName returns the suspected branch name for this environment by\n * searching through a set of common environment variables.\n *\n * This could be used to determine if we're on a branch deploy or not, though it\n * should be noted that we don't know if this is the default branch or not.\n */\nconst getEnvironmentName = (env = (0, exports.allProcessEnv)()) => {\n    /**\n     * Order is important; more than one of these env vars may be set, so ensure\n     * that we check the most specific, most reliable env vars first.\n     */\n    return (env[consts_js_1.envKeys.InngestEnvironment] ||\n        env[consts_js_1.envKeys.BranchName] ||\n        env[consts_js_1.envKeys.VercelBranch] ||\n        env[consts_js_1.envKeys.NetlifyBranch] ||\n        env[consts_js_1.envKeys.CloudflarePagesBranch] ||\n        env[consts_js_1.envKeys.RenderBranch] ||\n        env[consts_js_1.envKeys.RailwayBranch]);\n};\nexports.getEnvironmentName = getEnvironmentName;\nconst processEnv = (key) => {\n    return (0, exports.allProcessEnv)()[key];\n};\nexports.processEnv = processEnv;\n/**\n * allProcessEnv returns the current process environment variables, or an empty\n * object if they cannot be read, making sure we support environments other than\n * Node such as Deno, too.\n *\n * Using this ensures we don't dangerously access `process.env` in environments\n * where it may not be defined, such as Deno or the browser.\n */\nconst allProcessEnv = () => {\n    // Node, or Node-like environments\n    try {\n        // eslint-disable-next-line @inngest/internal/process-warn\n        if (process.env) {\n            // eslint-disable-next-line @inngest/internal/process-warn\n            return process.env;\n        }\n    }\n    catch (_err) {\n        // noop\n    }\n    // Deno\n    try {\n        const env = Deno.env.toObject();\n        if (env) {\n            return env;\n        }\n    }\n    catch (_err) {\n        // noop\n    }\n    // Netlify\n    try {\n        const env = Netlify.env.toObject();\n        if (env) {\n            return env;\n        }\n    }\n    catch (_err) {\n        // noop\n    }\n    return {};\n};\nexports.allProcessEnv = allProcessEnv;\n/**\n * Generate a standardised set of headers based on input and environment\n * variables.\n *\n *\n */\nconst inngestHeaders = (opts) => {\n    var _a;\n    const sdkVersion = `inngest-js:v${version_js_1.version}`;\n    const headers = {\n        \"Content-Type\": \"application/json\",\n        \"User-Agent\": sdkVersion,\n        [consts_js_1.headerKeys.SdkVersion]: sdkVersion,\n    };\n    if (opts === null || opts === void 0 ? void 0 : opts.framework) {\n        headers[consts_js_1.headerKeys.Framework] = opts.framework;\n    }\n    if (opts === null || opts === void 0 ? void 0 : opts.expectedServerKind) {\n        headers[consts_js_1.headerKeys.InngestExpectedServerKind] = opts.expectedServerKind;\n    }\n    const env = Object.assign(Object.assign({}, (0, exports.allProcessEnv)()), opts === null || opts === void 0 ? void 0 : opts.env);\n    const inngestEnv = (opts === null || opts === void 0 ? void 0 : opts.inngestEnv) || (0, exports.getEnvironmentName)(env);\n    if (inngestEnv) {\n        headers[consts_js_1.headerKeys.Environment] = inngestEnv;\n    }\n    const platform = (0, exports.getPlatformName)(env);\n    if (platform) {\n        headers[consts_js_1.headerKeys.Platform] = platform;\n    }\n    return Object.assign(Object.assign(Object.assign({}, headers), (_a = opts === null || opts === void 0 ? void 0 : opts.client) === null || _a === void 0 ? void 0 : _a[\"headers\"]), opts === null || opts === void 0 ? void 0 : opts.extras);\n};\nexports.inngestHeaders = inngestHeaders;\n/**\n * A set of checks that, given an environment, will return `true` if the current\n * environment is running on the platform with the given name.\n */\nconst platformChecks = {\n    /**\n     * Vercel Edge Functions don't have access to environment variables unless\n     * they are explicitly referenced in the top level code, but they do have a\n     * global `EdgeRuntime` variable set that we can use to detect this.\n     */\n    vercel: (env) => env[consts_js_1.envKeys.IsVercel] === \"1\" || typeof EdgeRuntime === \"string\",\n    netlify: (env) => env[consts_js_1.envKeys.IsNetlify] === \"true\",\n    \"cloudflare-pages\": (env) => env[consts_js_1.envKeys.IsCloudflarePages] === \"1\",\n    render: (env) => env[consts_js_1.envKeys.IsRender] === \"true\",\n    railway: (env) => Boolean(env[consts_js_1.envKeys.RailwayEnvironment]),\n};\n/**\n * A set of checks that, given an environment, will return `true` if the current\n * environment and platform supports streaming responses back to Inngest.\n *\n * Streaming capability is both framework and platform-based. Frameworks are\n * supported in serve handlers, and platforms are checked here.\n *\n * As such, this record declares which platforms we explicitly support for\n * streaming and is used by {@link platformSupportsStreaming}.\n */\nconst streamingChecks = {\n    /**\n     * \"Vercel supports streaming for Serverless Functions, Edge Functions, and\n     * React Server Components in Next.js projects.\"\n     *\n     * In practice, however, there are many reports of streaming not working as\n     * expected on Serverless Functions, so we resort to only allowing streaming\n     * for Edge Functions here.\n     *\n     * See {@link https://vercel.com/docs/frameworks/nextjs#streaming}\n     */\n    vercel: (_framework, _env) => typeof EdgeRuntime === \"string\",\n    \"cloudflare-pages\": () => true,\n};\nconst getPlatformName = (env) => {\n    return Object.keys(platformChecks).find((key) => {\n        return platformChecks[key](env);\n    });\n};\nexports.getPlatformName = getPlatformName;\n/**\n * Returns `true` if we believe the current environment supports streaming\n * responses back to Inngest.\n *\n * We run a check directly related to the platform we believe we're running on,\n * usually based on environment variables.\n */\nconst platformSupportsStreaming = (framework, env = (0, exports.allProcessEnv)()) => {\n    var _a, _b;\n    return ((_b = (_a = streamingChecks[(0, exports.getPlatformName)(env)]) === null || _a === void 0 ? void 0 : _a.call(streamingChecks, framework, env)) !== null && _b !== void 0 ? _b : false);\n};\nexports.platformSupportsStreaming = platformSupportsStreaming;\n/**\n * A unique symbol used to mark a custom fetch implementation. We wrap the\n * implementations to provide some extra control when handling errors.\n */\nconst CUSTOM_FETCH_MARKER = Symbol(\"Custom fetch implementation\");\n/**\n * Given a potential fetch function, return the fetch function to use based on\n * this and the environment.\n */\nconst getFetch = (givenFetch) => {\n    /**\n     * If we've explicitly been given a fetch function, use that.\n     */\n    if (givenFetch) {\n        if (CUSTOM_FETCH_MARKER in givenFetch) {\n            return givenFetch;\n        }\n        /**\n         * We wrap the given fetch function to provide some extra control when\n         * handling errors.\n         */\n        const customFetch = async (...args) => {\n            var _a;\n            try {\n                return await givenFetch(...args);\n            }\n            catch (err) {\n                /**\n                 * Capture warnings that are not simple fetch failures and highlight\n                 * them for the user.\n                 *\n                 * We also use this opportunity to log the causing error, as code higher\n                 * up the stack will likely abstract this.\n                 */\n                if (!(err instanceof Error) ||\n                    !((_a = err.message) === null || _a === void 0 ? void 0 : _a.startsWith(\"fetch failed\"))) {\n                    console.warn(\"A request failed when using a custom fetch implementation; this may be a misconfiguration. Make sure that your fetch client is correctly bound to the global scope.\");\n                    console.error(err);\n                }\n                throw err;\n            }\n        };\n        /**\n         * Mark the custom fetch implementation so that we can identify it later, in\n         * addition to adding some runtime properties to it to make it seem as much\n         * like the original fetch as possible.\n         */\n        Object.defineProperties(customFetch, {\n            [CUSTOM_FETCH_MARKER]: {},\n            name: { value: givenFetch.name },\n            length: { value: givenFetch.length },\n        });\n        return customFetch;\n    }\n    /**\n     * Browser or Node 18+\n     */\n    try {\n        if (typeof globalThis !== \"undefined\" && \"fetch\" in globalThis) {\n            return fetch.bind(globalThis);\n        }\n    }\n    catch (err) {\n        // no-op\n    }\n    /**\n     * Existing polyfilled fetch\n     */\n    if (typeof fetch !== \"undefined\") {\n        return fetch;\n    }\n    /**\n     * Environments where fetch cannot be found and must be polyfilled\n     */\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    return __webpack_require__(/*! cross-fetch */ \"(rsc)/./node_modules/cross-fetch/dist/node-ponyfill.js\");\n};\nexports.getFetch = getFetch;\n/**\n * If `Response` isn't included in this environment, it's probably an earlier\n * Node env that isn't already polyfilling. This function returns either the\n * native `Response` or a polyfilled one.\n */\nconst getResponse = () => {\n    if (typeof Response !== \"undefined\") {\n        return Response;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-var-requires\n    return (__webpack_require__(/*! cross-fetch */ \"(rsc)/./node_modules/cross-fetch/dist/node-ponyfill.js\").Response);\n};\nexports.getResponse = getResponse;\n/**\n * Given an unknown value, try to parse it as a `boolean`. Useful for parsing\n * environment variables that could be a selection of different values such as\n * `\"true\"`, `\"1\"`.\n *\n * If the value could not be confidently parsed as a `boolean` or was seen to be\n * `undefined`, this function returns `undefined`.\n */\nconst parseAsBoolean = (value) => {\n    if (typeof value === \"boolean\") {\n        return value;\n    }\n    if (typeof value === \"number\") {\n        return Boolean(value);\n    }\n    if (typeof value === \"string\") {\n        const trimmed = value.trim().toLowerCase();\n        if (trimmed === \"undefined\") {\n            return undefined;\n        }\n        if ([\"true\", \"1\"].includes(trimmed)) {\n            return true;\n        }\n        return false;\n    }\n    return undefined;\n};\nexports.parseAsBoolean = parseAsBoolean;\n//# sourceMappingURL=env.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9oZWxwZXJzL2Vudi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNCQUFzQixHQUFHLG1CQUFtQixHQUFHLGdCQUFnQixHQUFHLGlDQUFpQyxHQUFHLHVCQUF1QixHQUFHLHNCQUFzQixHQUFHLHFCQUFxQixHQUFHLGtCQUFrQixHQUFHLDBCQUEwQixHQUFHLGVBQWUsR0FBRyxZQUFZLEdBQUcscUJBQXFCO0FBQ3pSLHFCQUFxQixtQkFBTyxDQUFDLDhEQUFlO0FBQzVDLG9CQUFvQixtQkFBTyxDQUFDLG1FQUFhO0FBQ3pDLHFCQUFxQixtQkFBTyxDQUFDLHFFQUFjO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EsMkNBQTJDLFFBQVEsc0pBQXNKO0FBQ3pNO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQix1RUFBdUU7QUFDekY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQiw0REFBNEQsSUFBSTtBQUNuRjtBQUNBLDBCQUEwQiwyQ0FBMkM7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxvREFBb0Q7QUFDdEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxzQkFBc0Isd0RBQXdEO0FBQzlFO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MscUJBQXFCO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RDtBQUN2RDtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsZ0NBQWdDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkZBQTZGO0FBQzdGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUM7QUFDckMsb0JBQW9CLHdCQUF3QjtBQUM1QyxzQkFBc0IsMEJBQTBCO0FBQ2hELFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxtQkFBTyxDQUFDLDJFQUFhO0FBQ2hDO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVywyR0FBK0I7QUFDMUM7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCIiwic291cmNlcyI6WyIvVXNlcnMvaGFyc2hzaHJpdmFzdGF2L0Rlc2t0b3AvQ29kaW5nIFByb2plY3RzL0pvYi1Bc3Npc3RhbnQtQWdlbnQvbm9kZV9tb2R1bGVzL2lubmdlc3QvaGVscGVycy9lbnYuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBUaGlzIGZpbGUgZXhpc3RzIHRvIGhlbHAgbm9ybWFsaXplIHByb2Nlc3MuZW52IGFtb25nc3QgdGhlIGJhY2tlbmRcbi8vIGFuZCBmcm9udGVuZC4gIE1hbnkgZnJvbnRlbmRzIChlZy4gTmV4dCwgQ1JBKSB1dGlsaXplIHdlYnBhY2sncyBEZWZpbmVQbHVnaW5cbi8vIGFsb25nIHdpdGggcHJlZml4ZXMsIG1lYW5pbmcgd2UgaGF2ZSB0byBleHBsaWNpdGx5IHVzZSB0aGUgZnVsbCBgcHJvY2Vzcy5lbnYuRk9PYFxuLy8gc3RyaW5nIGluIG9yZGVyIHRvIHJlYWQgdmFyaWFibGVzLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5wYXJzZUFzQm9vbGVhbiA9IGV4cG9ydHMuZ2V0UmVzcG9uc2UgPSBleHBvcnRzLmdldEZldGNoID0gZXhwb3J0cy5wbGF0Zm9ybVN1cHBvcnRzU3RyZWFtaW5nID0gZXhwb3J0cy5nZXRQbGF0Zm9ybU5hbWUgPSBleHBvcnRzLmlubmdlc3RIZWFkZXJzID0gZXhwb3J0cy5hbGxQcm9jZXNzRW52ID0gZXhwb3J0cy5wcm9jZXNzRW52ID0gZXhwb3J0cy5nZXRFbnZpcm9ubWVudE5hbWUgPSBleHBvcnRzLmdldE1vZGUgPSBleHBvcnRzLk1vZGUgPSBleHBvcnRzLmRldlNlcnZlckhvc3QgPSB2b2lkIDA7XG5jb25zdCB2ZXJzaW9uX2pzXzEgPSByZXF1aXJlKFwiLi4vdmVyc2lvbi5qc1wiKTtcbmNvbnN0IGNvbnN0c19qc18xID0gcmVxdWlyZShcIi4vY29uc3RzLmpzXCIpO1xuY29uc3Qgc3RyaW5nc19qc18xID0gcmVxdWlyZShcIi4vc3RyaW5ncy5qc1wiKTtcbi8qKlxuICogZGV2U2VydmVySG9zdCByZXR1cm5zIHRoZSBkZXYgc2VydmVyIGhvc3QgYnkgc2VhcmNoaW5nIGZvciB0aGUgSU5OR0VTVF9ERVZTRVJWRVJfVVJMXG4gKiBlbnZpcm9ubWVudCB2YXJpYWJsZSAocGx1cyBwcm9qZWN0IHByZWZpeGNlcyBmb3IgZWcuIHJlYWN0LCBzdWNoIGFzIFJFQUNUX0FQUF9JTk5HRVNUX0RFVlNFUlZFUl9VUkwpLlxuICpcbiAqIElmIG5vdCBmb3VuZCB0aGlzIHJldHVybnMgdW5kZWZpbmVkLCBpbmRpY2F0aW5nIHRoYXQgdGhlIGVudiB2YXIgaGFzIG5vdCBiZWVuIHNldC5cbiAqXG4gKiBAZXhhbXBsZSBkZXZTZXJ2ZXJIb3N0KClcbiAqL1xuY29uc3QgZGV2U2VydmVySG9zdCA9IChlbnYgPSAoMCwgZXhwb3J0cy5hbGxQcm9jZXNzRW52KSgpKSA9PiB7XG4gICAgLy8gZGV2U2VydmVyS2V5cyBhcmUgdGhlIGVudiBrZXlzIHdlIHNlYXJjaCBmb3IgdG8gZGlzY292ZXIgdGhlIGRldiBzZXJ2ZXJcbiAgICAvLyBVUkwuICBUaGlzIGluY2x1ZGVzIHRoZSBzdGFuZGFyZCBrZXkgZmlyc3QsIHRoZW4gaW5jbHVkZXMgcHJlZml4ZWQga2V5c1xuICAgIC8vIGZvciB1c2Ugd2l0aGluIGNvbW1vbiBmcmFtZXdvcmtzIChlZy4gQ1JBLCBuZXh0KS5cbiAgICAvL1xuICAgIC8vIFdlIGhhdmUgdG8gZnVsbHkgd3JpdGUgdGhlc2UgdXNpbmcgcHJvY2Vzcy5lbnYgYXMgdGhleSdyZSB0eXBpY2FsbHlcbiAgICAvLyBwcm9jZXNzZWQgdXNpbmcgd2VicGFjaydzIERlZmluZVBsdWdpbiwgd2hpY2ggaXMgZHVtYiBhbmQgZG9lcyBhIHN0cmFpZ2h0XG4gICAgLy8gdGV4dCByZXBsYWNlbWVudCBpbnN0ZWFkIG9mIGFjdHVhbGx5IHVuZGVyc3RhbmRpbmcgdGhlIEFTVCwgZGVzcGl0ZSB3ZWJwYWNrXG4gICAgLy8gYmVpbmcgZnVsbHkgY2FwYWJsZSBvZiB1bmRlcnN0YW5kaW5nIHRoZSBBU1QuXG4gICAgY29uc3QgcHJlZml4ZXMgPSBbXCJSRUFDVF9BUFBfXCIsIFwiTkVYVF9QVUJMSUNfXCJdO1xuICAgIGNvbnN0IGtleXMgPSBbY29uc3RzX2pzXzEuZW52S2V5cy5Jbm5nZXN0QmFzZVVybCwgY29uc3RzX2pzXzEuZW52S2V5cy5Jbm5nZXN0RGV2TW9kZV07XG4gICAgY29uc3QgdmFsdWVzID0ga2V5cy5mbGF0TWFwKChrZXkpID0+IHtcbiAgICAgICAgcmV0dXJuIHByZWZpeGVzLm1hcCgocHJlZml4KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gZW52W3ByZWZpeCArIGtleV07XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiB2YWx1ZXMuZmluZCgodikgPT4ge1xuICAgICAgICBpZiAoIXYpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIEJvb2xlYW4obmV3IFVSTCh2KSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKF9hKSB7XG4gICAgICAgICAgICAvLyBuby1vcFxuICAgICAgICB9XG4gICAgfSk7XG59O1xuZXhwb3J0cy5kZXZTZXJ2ZXJIb3N0ID0gZGV2U2VydmVySG9zdDtcbmNvbnN0IGNoZWNrRm5zID0gKChjaGVja3MpID0+IGNoZWNrcykoe1xuICAgIGVxdWFsczogKGFjdHVhbCwgZXhwZWN0ZWQpID0+IGFjdHVhbCA9PT0gZXhwZWN0ZWQsXG4gICAgXCJzdGFydHMgd2l0aFwiOiAoYWN0dWFsLCBleHBlY3RlZCkgPT4geyB2YXIgX2E7IHJldHVybiBleHBlY3RlZCA/IChfYSA9IGFjdHVhbCA9PT0gbnVsbCB8fCBhY3R1YWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGFjdHVhbC5zdGFydHNXaXRoKGV4cGVjdGVkKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZmFsc2UgOiBmYWxzZTsgfSxcbiAgICBcImlzIHRydXRoeVwiOiAoYWN0dWFsKSA9PiBCb29sZWFuKGFjdHVhbCksXG4gICAgXCJpcyB0cnV0aHkgYnV0IG5vdFwiOiAoYWN0dWFsLCBleHBlY3RlZCkgPT4gQm9vbGVhbihhY3R1YWwpICYmIGFjdHVhbCAhPT0gZXhwZWN0ZWQsXG59KTtcbmNvbnN0IHByb2RDaGVja3MgPSBbXG4gICAgW1wiQ0ZfUEFHRVNcIiwgXCJlcXVhbHNcIiwgXCIxXCJdLFxuICAgIFtcIkNPTlRFWFRcIiwgXCJzdGFydHMgd2l0aFwiLCBcInByb2RcIl0sXG4gICAgW1wiRU5WSVJPTk1FTlRcIiwgXCJzdGFydHMgd2l0aFwiLCBcInByb2RcIl0sXG4gICAgW1wiTk9ERV9FTlZcIiwgXCJzdGFydHMgd2l0aFwiLCBcInByb2RcIl0sXG4gICAgW1wiVkVSQ0VMX0VOVlwiLCBcInN0YXJ0cyB3aXRoXCIsIFwicHJvZFwiXSxcbiAgICBbXCJERU5PX0RFUExPWU1FTlRfSURcIiwgXCJpcyB0cnV0aHlcIl0sXG4gICAgW2NvbnN0c19qc18xLmVudktleXMuVmVyY2VsRW52S2V5LCBcImlzIHRydXRoeSBidXQgbm90XCIsIFwiZGV2ZWxvcG1lbnRcIl0sXG4gICAgW2NvbnN0c19qc18xLmVudktleXMuSXNOZXRsaWZ5LCBcImlzIHRydXRoeVwiXSxcbiAgICBbY29uc3RzX2pzXzEuZW52S2V5cy5Jc1JlbmRlciwgXCJpcyB0cnV0aHlcIl0sXG4gICAgW2NvbnN0c19qc18xLmVudktleXMuUmFpbHdheUJyYW5jaCwgXCJpcyB0cnV0aHlcIl0sXG4gICAgW2NvbnN0c19qc18xLmVudktleXMuSXNDbG91ZGZsYXJlUGFnZXMsIFwiaXMgdHJ1dGh5XCJdLFxuXTtcbmNsYXNzIE1vZGUge1xuICAgIGNvbnN0cnVjdG9yKHsgdHlwZSwgaXNFeHBsaWNpdCwgZXhwbGljaXREZXZVcmwsIGVudiA9ICgwLCBleHBvcnRzLmFsbFByb2Nlc3NFbnYpKCksIH0pIHtcbiAgICAgICAgdGhpcy5lbnYgPSBlbnY7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgIHRoaXMuaXNFeHBsaWNpdCA9IGlzRXhwbGljaXQgfHwgQm9vbGVhbihleHBsaWNpdERldlVybCk7XG4gICAgICAgIHRoaXMuZXhwbGljaXREZXZVcmwgPSBleHBsaWNpdERldlVybDtcbiAgICB9XG4gICAgZ2V0IGlzRGV2KCkge1xuICAgICAgICByZXR1cm4gdGhpcy50eXBlID09PSBcImRldlwiO1xuICAgIH1cbiAgICBnZXQgaXNDbG91ZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHlwZSA9PT0gXCJjbG91ZFwiO1xuICAgIH1cbiAgICBnZXQgaXNJbmZlcnJlZCgpIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLmlzRXhwbGljaXQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIElmIHdlIGFyZSBleHBsaWNpdGx5IGluIGEgcGFydGljdWxhciBtb2RlLCByZXRyaWV2ZSB0aGUgVVJMIHRoYXQgd2UgYXJlXG4gICAgICogc3VyZSB3ZSBzaG91bGQgYmUgdXNpbmcsIG5vdCBjb25zaWRlcmluZyBhbnkgZW52aXJvbm1lbnQgdmFyaWFibGVzIG9yIG90aGVyXG4gICAgICogaW5mbHVlbmNlcy5cbiAgICAgKi9cbiAgICBnZXRFeHBsaWNpdFVybChkZWZhdWx0Q2xvdWRVcmwpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzRXhwbGljaXQpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZXhwbGljaXREZXZVcmwpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmV4cGxpY2l0RGV2VXJsLmhyZWY7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaXNDbG91ZCkge1xuICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHRDbG91ZFVybDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pc0Rldikge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnN0c19qc18xLmRlZmF1bHREZXZTZXJ2ZXJIb3N0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxufVxuZXhwb3J0cy5Nb2RlID0gTW9kZTtcbi8qKlxuICogUmV0dXJucyB0aGUgbW9kZSBvZiB0aGUgY3VycmVudCBlbnZpcm9ubWVudCwgYmFzZWQgb2ZmIG9mIGVpdGhlciBwYXNzZWRcbiAqIGVudmlyb25tZW50IHZhcmlhYmxlcyBvciBgcHJvY2Vzcy5lbnZgLCBvciBleHBsaWNpdCBzZXR0aW5ncy5cbiAqL1xuY29uc3QgZ2V0TW9kZSA9ICh7IGVudiA9ICgwLCBleHBvcnRzLmFsbFByb2Nlc3NFbnYpKCksIGNsaWVudCwgZXhwbGljaXRNb2RlLCB9ID0ge30pID0+IHtcbiAgICBpZiAoZXhwbGljaXRNb2RlKSB7XG4gICAgICAgIHJldHVybiBuZXcgTW9kZSh7IHR5cGU6IGV4cGxpY2l0TW9kZSwgaXNFeHBsaWNpdDogdHJ1ZSwgZW52IH0pO1xuICAgIH1cbiAgICBpZiAoY2xpZW50ID09PSBudWxsIHx8IGNsaWVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogY2xpZW50W1wibW9kZVwiXS5pc0V4cGxpY2l0KSB7XG4gICAgICAgIHJldHVybiBjbGllbnRbXCJtb2RlXCJdO1xuICAgIH1cbiAgICBpZiAoY29uc3RzX2pzXzEuZW52S2V5cy5Jbm5nZXN0RGV2TW9kZSBpbiBlbnYpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBlbnZbY29uc3RzX2pzXzEuZW52S2V5cy5Jbm5nZXN0RGV2TW9kZV0gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXhwbGljaXREZXZVcmwgPSBuZXcgVVJMKGVudltjb25zdHNfanNfMS5lbnZLZXlzLklubmdlc3REZXZNb2RlXSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBNb2RlKHsgdHlwZTogXCJkZXZcIiwgaXNFeHBsaWNpdDogdHJ1ZSwgZXhwbGljaXREZXZVcmwsIGVudiB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChfYSkge1xuICAgICAgICAgICAgICAgIC8vIG5vLW9wXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZW52SXNEZXYgPSAoMCwgZXhwb3J0cy5wYXJzZUFzQm9vbGVhbikoZW52W2NvbnN0c19qc18xLmVudktleXMuSW5uZ2VzdERldk1vZGVdKTtcbiAgICAgICAgaWYgKHR5cGVvZiBlbnZJc0RldiA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgTW9kZSh7XG4gICAgICAgICAgICAgICAgdHlwZTogZW52SXNEZXYgPyBcImRldlwiIDogXCJjbG91ZFwiLFxuICAgICAgICAgICAgICAgIGlzRXhwbGljaXQ6IHRydWUsXG4gICAgICAgICAgICAgICAgZW52LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgaXNQcm9kID0gcHJvZENoZWNrcy5zb21lKChba2V5LCBjaGVja0tleSwgZXhwZWN0ZWRdKSA9PiB7XG4gICAgICAgIHJldHVybiBjaGVja0Zuc1tjaGVja0tleV0oKDAsIHN0cmluZ3NfanNfMS5zdHJpbmdpZnlVbmtub3duKShlbnZba2V5XSksIGV4cGVjdGVkKTtcbiAgICB9KTtcbiAgICByZXR1cm4gbmV3IE1vZGUoeyB0eXBlOiBpc1Byb2QgPyBcImNsb3VkXCIgOiBcImRldlwiLCBpc0V4cGxpY2l0OiBmYWxzZSwgZW52IH0pO1xufTtcbmV4cG9ydHMuZ2V0TW9kZSA9IGdldE1vZGU7XG4vKipcbiAqIGdldEVudmlyb25tZW50TmFtZSByZXR1cm5zIHRoZSBzdXNwZWN0ZWQgYnJhbmNoIG5hbWUgZm9yIHRoaXMgZW52aXJvbm1lbnQgYnlcbiAqIHNlYXJjaGluZyB0aHJvdWdoIGEgc2V0IG9mIGNvbW1vbiBlbnZpcm9ubWVudCB2YXJpYWJsZXMuXG4gKlxuICogVGhpcyBjb3VsZCBiZSB1c2VkIHRvIGRldGVybWluZSBpZiB3ZSdyZSBvbiBhIGJyYW5jaCBkZXBsb3kgb3Igbm90LCB0aG91Z2ggaXRcbiAqIHNob3VsZCBiZSBub3RlZCB0aGF0IHdlIGRvbid0IGtub3cgaWYgdGhpcyBpcyB0aGUgZGVmYXVsdCBicmFuY2ggb3Igbm90LlxuICovXG5jb25zdCBnZXRFbnZpcm9ubWVudE5hbWUgPSAoZW52ID0gKDAsIGV4cG9ydHMuYWxsUHJvY2Vzc0VudikoKSkgPT4ge1xuICAgIC8qKlxuICAgICAqIE9yZGVyIGlzIGltcG9ydGFudDsgbW9yZSB0aGFuIG9uZSBvZiB0aGVzZSBlbnYgdmFycyBtYXkgYmUgc2V0LCBzbyBlbnN1cmVcbiAgICAgKiB0aGF0IHdlIGNoZWNrIHRoZSBtb3N0IHNwZWNpZmljLCBtb3N0IHJlbGlhYmxlIGVudiB2YXJzIGZpcnN0LlxuICAgICAqL1xuICAgIHJldHVybiAoZW52W2NvbnN0c19qc18xLmVudktleXMuSW5uZ2VzdEVudmlyb25tZW50XSB8fFxuICAgICAgICBlbnZbY29uc3RzX2pzXzEuZW52S2V5cy5CcmFuY2hOYW1lXSB8fFxuICAgICAgICBlbnZbY29uc3RzX2pzXzEuZW52S2V5cy5WZXJjZWxCcmFuY2hdIHx8XG4gICAgICAgIGVudltjb25zdHNfanNfMS5lbnZLZXlzLk5ldGxpZnlCcmFuY2hdIHx8XG4gICAgICAgIGVudltjb25zdHNfanNfMS5lbnZLZXlzLkNsb3VkZmxhcmVQYWdlc0JyYW5jaF0gfHxcbiAgICAgICAgZW52W2NvbnN0c19qc18xLmVudktleXMuUmVuZGVyQnJhbmNoXSB8fFxuICAgICAgICBlbnZbY29uc3RzX2pzXzEuZW52S2V5cy5SYWlsd2F5QnJhbmNoXSk7XG59O1xuZXhwb3J0cy5nZXRFbnZpcm9ubWVudE5hbWUgPSBnZXRFbnZpcm9ubWVudE5hbWU7XG5jb25zdCBwcm9jZXNzRW52ID0gKGtleSkgPT4ge1xuICAgIHJldHVybiAoMCwgZXhwb3J0cy5hbGxQcm9jZXNzRW52KSgpW2tleV07XG59O1xuZXhwb3J0cy5wcm9jZXNzRW52ID0gcHJvY2Vzc0Vudjtcbi8qKlxuICogYWxsUHJvY2Vzc0VudiByZXR1cm5zIHRoZSBjdXJyZW50IHByb2Nlc3MgZW52aXJvbm1lbnQgdmFyaWFibGVzLCBvciBhbiBlbXB0eVxuICogb2JqZWN0IGlmIHRoZXkgY2Fubm90IGJlIHJlYWQsIG1ha2luZyBzdXJlIHdlIHN1cHBvcnQgZW52aXJvbm1lbnRzIG90aGVyIHRoYW5cbiAqIE5vZGUgc3VjaCBhcyBEZW5vLCB0b28uXG4gKlxuICogVXNpbmcgdGhpcyBlbnN1cmVzIHdlIGRvbid0IGRhbmdlcm91c2x5IGFjY2VzcyBgcHJvY2Vzcy5lbnZgIGluIGVudmlyb25tZW50c1xuICogd2hlcmUgaXQgbWF5IG5vdCBiZSBkZWZpbmVkLCBzdWNoIGFzIERlbm8gb3IgdGhlIGJyb3dzZXIuXG4gKi9cbmNvbnN0IGFsbFByb2Nlc3NFbnYgPSAoKSA9PiB7XG4gICAgLy8gTm9kZSwgb3IgTm9kZS1saWtlIGVudmlyb25tZW50c1xuICAgIHRyeSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAaW5uZ2VzdC9pbnRlcm5hbC9wcm9jZXNzLXdhcm5cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52KSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQGlubmdlc3QvaW50ZXJuYWwvcHJvY2Vzcy13YXJuXG4gICAgICAgICAgICByZXR1cm4gcHJvY2Vzcy5lbnY7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2F0Y2ggKF9lcnIpIHtcbiAgICAgICAgLy8gbm9vcFxuICAgIH1cbiAgICAvLyBEZW5vXG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZW52ID0gRGVuby5lbnYudG9PYmplY3QoKTtcbiAgICAgICAgaWYgKGVudikge1xuICAgICAgICAgICAgcmV0dXJuIGVudjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCAoX2Vycikge1xuICAgICAgICAvLyBub29wXG4gICAgfVxuICAgIC8vIE5ldGxpZnlcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBlbnYgPSBOZXRsaWZ5LmVudi50b09iamVjdCgpO1xuICAgICAgICBpZiAoZW52KSB7XG4gICAgICAgICAgICByZXR1cm4gZW52O1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChfZXJyKSB7XG4gICAgICAgIC8vIG5vb3BcbiAgICB9XG4gICAgcmV0dXJuIHt9O1xufTtcbmV4cG9ydHMuYWxsUHJvY2Vzc0VudiA9IGFsbFByb2Nlc3NFbnY7XG4vKipcbiAqIEdlbmVyYXRlIGEgc3RhbmRhcmRpc2VkIHNldCBvZiBoZWFkZXJzIGJhc2VkIG9uIGlucHV0IGFuZCBlbnZpcm9ubWVudFxuICogdmFyaWFibGVzLlxuICpcbiAqXG4gKi9cbmNvbnN0IGlubmdlc3RIZWFkZXJzID0gKG9wdHMpID0+IHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3Qgc2RrVmVyc2lvbiA9IGBpbm5nZXN0LWpzOnYke3ZlcnNpb25fanNfMS52ZXJzaW9ufWA7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICAgIFwiVXNlci1BZ2VudFwiOiBzZGtWZXJzaW9uLFxuICAgICAgICBbY29uc3RzX2pzXzEuaGVhZGVyS2V5cy5TZGtWZXJzaW9uXTogc2RrVmVyc2lvbixcbiAgICB9O1xuICAgIGlmIChvcHRzID09PSBudWxsIHx8IG9wdHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdHMuZnJhbWV3b3JrKSB7XG4gICAgICAgIGhlYWRlcnNbY29uc3RzX2pzXzEuaGVhZGVyS2V5cy5GcmFtZXdvcmtdID0gb3B0cy5mcmFtZXdvcms7XG4gICAgfVxuICAgIGlmIChvcHRzID09PSBudWxsIHx8IG9wdHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdHMuZXhwZWN0ZWRTZXJ2ZXJLaW5kKSB7XG4gICAgICAgIGhlYWRlcnNbY29uc3RzX2pzXzEuaGVhZGVyS2V5cy5Jbm5nZXN0RXhwZWN0ZWRTZXJ2ZXJLaW5kXSA9IG9wdHMuZXhwZWN0ZWRTZXJ2ZXJLaW5kO1xuICAgIH1cbiAgICBjb25zdCBlbnYgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sICgwLCBleHBvcnRzLmFsbFByb2Nlc3NFbnYpKCkpLCBvcHRzID09PSBudWxsIHx8IG9wdHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdHMuZW52KTtcbiAgICBjb25zdCBpbm5nZXN0RW52ID0gKG9wdHMgPT09IG51bGwgfHwgb3B0cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0cy5pbm5nZXN0RW52KSB8fCAoMCwgZXhwb3J0cy5nZXRFbnZpcm9ubWVudE5hbWUpKGVudik7XG4gICAgaWYgKGlubmdlc3RFbnYpIHtcbiAgICAgICAgaGVhZGVyc1tjb25zdHNfanNfMS5oZWFkZXJLZXlzLkVudmlyb25tZW50XSA9IGlubmdlc3RFbnY7XG4gICAgfVxuICAgIGNvbnN0IHBsYXRmb3JtID0gKDAsIGV4cG9ydHMuZ2V0UGxhdGZvcm1OYW1lKShlbnYpO1xuICAgIGlmIChwbGF0Zm9ybSkge1xuICAgICAgICBoZWFkZXJzW2NvbnN0c19qc18xLmhlYWRlcktleXMuUGxhdGZvcm1dID0gcGxhdGZvcm07XG4gICAgfVxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgaGVhZGVycyksIChfYSA9IG9wdHMgPT09IG51bGwgfHwgb3B0cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0cy5jbGllbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVtcImhlYWRlcnNcIl0pLCBvcHRzID09PSBudWxsIHx8IG9wdHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdHMuZXh0cmFzKTtcbn07XG5leHBvcnRzLmlubmdlc3RIZWFkZXJzID0gaW5uZ2VzdEhlYWRlcnM7XG4vKipcbiAqIEEgc2V0IG9mIGNoZWNrcyB0aGF0LCBnaXZlbiBhbiBlbnZpcm9ubWVudCwgd2lsbCByZXR1cm4gYHRydWVgIGlmIHRoZSBjdXJyZW50XG4gKiBlbnZpcm9ubWVudCBpcyBydW5uaW5nIG9uIHRoZSBwbGF0Zm9ybSB3aXRoIHRoZSBnaXZlbiBuYW1lLlxuICovXG5jb25zdCBwbGF0Zm9ybUNoZWNrcyA9IHtcbiAgICAvKipcbiAgICAgKiBWZXJjZWwgRWRnZSBGdW5jdGlvbnMgZG9uJ3QgaGF2ZSBhY2Nlc3MgdG8gZW52aXJvbm1lbnQgdmFyaWFibGVzIHVubGVzc1xuICAgICAqIHRoZXkgYXJlIGV4cGxpY2l0bHkgcmVmZXJlbmNlZCBpbiB0aGUgdG9wIGxldmVsIGNvZGUsIGJ1dCB0aGV5IGRvIGhhdmUgYVxuICAgICAqIGdsb2JhbCBgRWRnZVJ1bnRpbWVgIHZhcmlhYmxlIHNldCB0aGF0IHdlIGNhbiB1c2UgdG8gZGV0ZWN0IHRoaXMuXG4gICAgICovXG4gICAgdmVyY2VsOiAoZW52KSA9PiBlbnZbY29uc3RzX2pzXzEuZW52S2V5cy5Jc1ZlcmNlbF0gPT09IFwiMVwiIHx8IHR5cGVvZiBFZGdlUnVudGltZSA9PT0gXCJzdHJpbmdcIixcbiAgICBuZXRsaWZ5OiAoZW52KSA9PiBlbnZbY29uc3RzX2pzXzEuZW52S2V5cy5Jc05ldGxpZnldID09PSBcInRydWVcIixcbiAgICBcImNsb3VkZmxhcmUtcGFnZXNcIjogKGVudikgPT4gZW52W2NvbnN0c19qc18xLmVudktleXMuSXNDbG91ZGZsYXJlUGFnZXNdID09PSBcIjFcIixcbiAgICByZW5kZXI6IChlbnYpID0+IGVudltjb25zdHNfanNfMS5lbnZLZXlzLklzUmVuZGVyXSA9PT0gXCJ0cnVlXCIsXG4gICAgcmFpbHdheTogKGVudikgPT4gQm9vbGVhbihlbnZbY29uc3RzX2pzXzEuZW52S2V5cy5SYWlsd2F5RW52aXJvbm1lbnRdKSxcbn07XG4vKipcbiAqIEEgc2V0IG9mIGNoZWNrcyB0aGF0LCBnaXZlbiBhbiBlbnZpcm9ubWVudCwgd2lsbCByZXR1cm4gYHRydWVgIGlmIHRoZSBjdXJyZW50XG4gKiBlbnZpcm9ubWVudCBhbmQgcGxhdGZvcm0gc3VwcG9ydHMgc3RyZWFtaW5nIHJlc3BvbnNlcyBiYWNrIHRvIElubmdlc3QuXG4gKlxuICogU3RyZWFtaW5nIGNhcGFiaWxpdHkgaXMgYm90aCBmcmFtZXdvcmsgYW5kIHBsYXRmb3JtLWJhc2VkLiBGcmFtZXdvcmtzIGFyZVxuICogc3VwcG9ydGVkIGluIHNlcnZlIGhhbmRsZXJzLCBhbmQgcGxhdGZvcm1zIGFyZSBjaGVja2VkIGhlcmUuXG4gKlxuICogQXMgc3VjaCwgdGhpcyByZWNvcmQgZGVjbGFyZXMgd2hpY2ggcGxhdGZvcm1zIHdlIGV4cGxpY2l0bHkgc3VwcG9ydCBmb3JcbiAqIHN0cmVhbWluZyBhbmQgaXMgdXNlZCBieSB7QGxpbmsgcGxhdGZvcm1TdXBwb3J0c1N0cmVhbWluZ30uXG4gKi9cbmNvbnN0IHN0cmVhbWluZ0NoZWNrcyA9IHtcbiAgICAvKipcbiAgICAgKiBcIlZlcmNlbCBzdXBwb3J0cyBzdHJlYW1pbmcgZm9yIFNlcnZlcmxlc3MgRnVuY3Rpb25zLCBFZGdlIEZ1bmN0aW9ucywgYW5kXG4gICAgICogUmVhY3QgU2VydmVyIENvbXBvbmVudHMgaW4gTmV4dC5qcyBwcm9qZWN0cy5cIlxuICAgICAqXG4gICAgICogSW4gcHJhY3RpY2UsIGhvd2V2ZXIsIHRoZXJlIGFyZSBtYW55IHJlcG9ydHMgb2Ygc3RyZWFtaW5nIG5vdCB3b3JraW5nIGFzXG4gICAgICogZXhwZWN0ZWQgb24gU2VydmVybGVzcyBGdW5jdGlvbnMsIHNvIHdlIHJlc29ydCB0byBvbmx5IGFsbG93aW5nIHN0cmVhbWluZ1xuICAgICAqIGZvciBFZGdlIEZ1bmN0aW9ucyBoZXJlLlxuICAgICAqXG4gICAgICogU2VlIHtAbGluayBodHRwczovL3ZlcmNlbC5jb20vZG9jcy9mcmFtZXdvcmtzL25leHRqcyNzdHJlYW1pbmd9XG4gICAgICovXG4gICAgdmVyY2VsOiAoX2ZyYW1ld29yaywgX2VudikgPT4gdHlwZW9mIEVkZ2VSdW50aW1lID09PSBcInN0cmluZ1wiLFxuICAgIFwiY2xvdWRmbGFyZS1wYWdlc1wiOiAoKSA9PiB0cnVlLFxufTtcbmNvbnN0IGdldFBsYXRmb3JtTmFtZSA9IChlbnYpID0+IHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMocGxhdGZvcm1DaGVja3MpLmZpbmQoKGtleSkgPT4ge1xuICAgICAgICByZXR1cm4gcGxhdGZvcm1DaGVja3Nba2V5XShlbnYpO1xuICAgIH0pO1xufTtcbmV4cG9ydHMuZ2V0UGxhdGZvcm1OYW1lID0gZ2V0UGxhdGZvcm1OYW1lO1xuLyoqXG4gKiBSZXR1cm5zIGB0cnVlYCBpZiB3ZSBiZWxpZXZlIHRoZSBjdXJyZW50IGVudmlyb25tZW50IHN1cHBvcnRzIHN0cmVhbWluZ1xuICogcmVzcG9uc2VzIGJhY2sgdG8gSW5uZ2VzdC5cbiAqXG4gKiBXZSBydW4gYSBjaGVjayBkaXJlY3RseSByZWxhdGVkIHRvIHRoZSBwbGF0Zm9ybSB3ZSBiZWxpZXZlIHdlJ3JlIHJ1bm5pbmcgb24sXG4gKiB1c3VhbGx5IGJhc2VkIG9uIGVudmlyb25tZW50IHZhcmlhYmxlcy5cbiAqL1xuY29uc3QgcGxhdGZvcm1TdXBwb3J0c1N0cmVhbWluZyA9IChmcmFtZXdvcmssIGVudiA9ICgwLCBleHBvcnRzLmFsbFByb2Nlc3NFbnYpKCkpID0+IHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIHJldHVybiAoKF9iID0gKF9hID0gc3RyZWFtaW5nQ2hlY2tzWygwLCBleHBvcnRzLmdldFBsYXRmb3JtTmFtZSkoZW52KV0pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHN0cmVhbWluZ0NoZWNrcywgZnJhbWV3b3JrLCBlbnYpKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBmYWxzZSk7XG59O1xuZXhwb3J0cy5wbGF0Zm9ybVN1cHBvcnRzU3RyZWFtaW5nID0gcGxhdGZvcm1TdXBwb3J0c1N0cmVhbWluZztcbi8qKlxuICogQSB1bmlxdWUgc3ltYm9sIHVzZWQgdG8gbWFyayBhIGN1c3RvbSBmZXRjaCBpbXBsZW1lbnRhdGlvbi4gV2Ugd3JhcCB0aGVcbiAqIGltcGxlbWVudGF0aW9ucyB0byBwcm92aWRlIHNvbWUgZXh0cmEgY29udHJvbCB3aGVuIGhhbmRsaW5nIGVycm9ycy5cbiAqL1xuY29uc3QgQ1VTVE9NX0ZFVENIX01BUktFUiA9IFN5bWJvbChcIkN1c3RvbSBmZXRjaCBpbXBsZW1lbnRhdGlvblwiKTtcbi8qKlxuICogR2l2ZW4gYSBwb3RlbnRpYWwgZmV0Y2ggZnVuY3Rpb24sIHJldHVybiB0aGUgZmV0Y2ggZnVuY3Rpb24gdG8gdXNlIGJhc2VkIG9uXG4gKiB0aGlzIGFuZCB0aGUgZW52aXJvbm1lbnQuXG4gKi9cbmNvbnN0IGdldEZldGNoID0gKGdpdmVuRmV0Y2gpID0+IHtcbiAgICAvKipcbiAgICAgKiBJZiB3ZSd2ZSBleHBsaWNpdGx5IGJlZW4gZ2l2ZW4gYSBmZXRjaCBmdW5jdGlvbiwgdXNlIHRoYXQuXG4gICAgICovXG4gICAgaWYgKGdpdmVuRmV0Y2gpIHtcbiAgICAgICAgaWYgKENVU1RPTV9GRVRDSF9NQVJLRVIgaW4gZ2l2ZW5GZXRjaCkge1xuICAgICAgICAgICAgcmV0dXJuIGdpdmVuRmV0Y2g7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdlIHdyYXAgdGhlIGdpdmVuIGZldGNoIGZ1bmN0aW9uIHRvIHByb3ZpZGUgc29tZSBleHRyYSBjb250cm9sIHdoZW5cbiAgICAgICAgICogaGFuZGxpbmcgZXJyb3JzLlxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3QgY3VzdG9tRmV0Y2ggPSBhc3luYyAoLi4uYXJncykgPT4ge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgZ2l2ZW5GZXRjaCguLi5hcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBDYXB0dXJlIHdhcm5pbmdzIHRoYXQgYXJlIG5vdCBzaW1wbGUgZmV0Y2ggZmFpbHVyZXMgYW5kIGhpZ2hsaWdodFxuICAgICAgICAgICAgICAgICAqIHRoZW0gZm9yIHRoZSB1c2VyLlxuICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICogV2UgYWxzbyB1c2UgdGhpcyBvcHBvcnR1bml0eSB0byBsb2cgdGhlIGNhdXNpbmcgZXJyb3IsIGFzIGNvZGUgaGlnaGVyXG4gICAgICAgICAgICAgICAgICogdXAgdGhlIHN0YWNrIHdpbGwgbGlrZWx5IGFic3RyYWN0IHRoaXMuXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgaWYgKCEoZXJyIGluc3RhbmNlb2YgRXJyb3IpIHx8XG4gICAgICAgICAgICAgICAgICAgICEoKF9hID0gZXJyLm1lc3NhZ2UpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zdGFydHNXaXRoKFwiZmV0Y2ggZmFpbGVkXCIpKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJBIHJlcXVlc3QgZmFpbGVkIHdoZW4gdXNpbmcgYSBjdXN0b20gZmV0Y2ggaW1wbGVtZW50YXRpb247IHRoaXMgbWF5IGJlIGEgbWlzY29uZmlndXJhdGlvbi4gTWFrZSBzdXJlIHRoYXQgeW91ciBmZXRjaCBjbGllbnQgaXMgY29ycmVjdGx5IGJvdW5kIHRvIHRoZSBnbG9iYWwgc2NvcGUuXCIpO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1hcmsgdGhlIGN1c3RvbSBmZXRjaCBpbXBsZW1lbnRhdGlvbiBzbyB0aGF0IHdlIGNhbiBpZGVudGlmeSBpdCBsYXRlciwgaW5cbiAgICAgICAgICogYWRkaXRpb24gdG8gYWRkaW5nIHNvbWUgcnVudGltZSBwcm9wZXJ0aWVzIHRvIGl0IHRvIG1ha2UgaXQgc2VlbSBhcyBtdWNoXG4gICAgICAgICAqIGxpa2UgdGhlIG9yaWdpbmFsIGZldGNoIGFzIHBvc3NpYmxlLlxuICAgICAgICAgKi9cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoY3VzdG9tRmV0Y2gsIHtcbiAgICAgICAgICAgIFtDVVNUT01fRkVUQ0hfTUFSS0VSXToge30sXG4gICAgICAgICAgICBuYW1lOiB7IHZhbHVlOiBnaXZlbkZldGNoLm5hbWUgfSxcbiAgICAgICAgICAgIGxlbmd0aDogeyB2YWx1ZTogZ2l2ZW5GZXRjaC5sZW5ndGggfSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjdXN0b21GZXRjaDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQnJvd3NlciBvciBOb2RlIDE4K1xuICAgICAqL1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBcImZldGNoXCIgaW4gZ2xvYmFsVGhpcykge1xuICAgICAgICAgICAgcmV0dXJuIGZldGNoLmJpbmQoZ2xvYmFsVGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgICAvLyBuby1vcFxuICAgIH1cbiAgICAvKipcbiAgICAgKiBFeGlzdGluZyBwb2x5ZmlsbGVkIGZldGNoXG4gICAgICovXG4gICAgaWYgKHR5cGVvZiBmZXRjaCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICByZXR1cm4gZmV0Y2g7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEVudmlyb25tZW50cyB3aGVyZSBmZXRjaCBjYW5ub3QgYmUgZm91bmQgYW5kIG11c3QgYmUgcG9seWZpbGxlZFxuICAgICAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdmFyLXJlcXVpcmVzXG4gICAgcmV0dXJuIHJlcXVpcmUoXCJjcm9zcy1mZXRjaFwiKTtcbn07XG5leHBvcnRzLmdldEZldGNoID0gZ2V0RmV0Y2g7XG4vKipcbiAqIElmIGBSZXNwb25zZWAgaXNuJ3QgaW5jbHVkZWQgaW4gdGhpcyBlbnZpcm9ubWVudCwgaXQncyBwcm9iYWJseSBhbiBlYXJsaWVyXG4gKiBOb2RlIGVudiB0aGF0IGlzbid0IGFscmVhZHkgcG9seWZpbGxpbmcuIFRoaXMgZnVuY3Rpb24gcmV0dXJucyBlaXRoZXIgdGhlXG4gKiBuYXRpdmUgYFJlc3BvbnNlYCBvciBhIHBvbHlmaWxsZWQgb25lLlxuICovXG5jb25zdCBnZXRSZXNwb25zZSA9ICgpID0+IHtcbiAgICBpZiAodHlwZW9mIFJlc3BvbnNlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJldHVybiBSZXNwb25zZTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtcmV0dXJuLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3MsIEB0eXBlc2NyaXB0LWVzbGludC9uby12YXItcmVxdWlyZXNcbiAgICByZXR1cm4gcmVxdWlyZShcImNyb3NzLWZldGNoXCIpLlJlc3BvbnNlO1xufTtcbmV4cG9ydHMuZ2V0UmVzcG9uc2UgPSBnZXRSZXNwb25zZTtcbi8qKlxuICogR2l2ZW4gYW4gdW5rbm93biB2YWx1ZSwgdHJ5IHRvIHBhcnNlIGl0IGFzIGEgYGJvb2xlYW5gLiBVc2VmdWwgZm9yIHBhcnNpbmdcbiAqIGVudmlyb25tZW50IHZhcmlhYmxlcyB0aGF0IGNvdWxkIGJlIGEgc2VsZWN0aW9uIG9mIGRpZmZlcmVudCB2YWx1ZXMgc3VjaCBhc1xuICogYFwidHJ1ZVwiYCwgYFwiMVwiYC5cbiAqXG4gKiBJZiB0aGUgdmFsdWUgY291bGQgbm90IGJlIGNvbmZpZGVudGx5IHBhcnNlZCBhcyBhIGBib29sZWFuYCBvciB3YXMgc2VlbiB0byBiZVxuICogYHVuZGVmaW5lZGAsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyBgdW5kZWZpbmVkYC5cbiAqL1xuY29uc3QgcGFyc2VBc0Jvb2xlYW4gPSAodmFsdWUpID0+IHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcImJvb2xlYW5cIikge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgcmV0dXJuIEJvb2xlYW4odmFsdWUpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGNvbnN0IHRyaW1tZWQgPSB2YWx1ZS50cmltKCkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKHRyaW1tZWQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFtcInRydWVcIiwgXCIxXCJdLmluY2x1ZGVzKHRyaW1tZWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59O1xuZXhwb3J0cy5wYXJzZUFzQm9vbGVhbiA9IHBhcnNlQXNCb29sZWFuO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW52LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/helpers/env.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/helpers/errors.js":
/*!************************************************!*\
  !*** ./node_modules/inngest/helpers/errors.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.functionStoppedRunningErr = exports.rethrowError = exports.OutgoingResultError = exports.fixEventKeyMissingSteps = exports.prettyError = exports.getErrorMessage = exports.minifyPrettyError = exports.prettyErrorSplitter = exports.ErrCode = exports.deserializeError = exports.isSerializedError = exports.serializeError = void 0;\nconst chalk_1 = __importDefault(__webpack_require__(/*! chalk */ \"(rsc)/./node_modules/chalk/source/index.js\"));\nconst json_stringify_safe_1 = __importDefault(__webpack_require__(/*! json-stringify-safe */ \"(rsc)/./node_modules/json-stringify-safe/stringify.js\"));\nconst serialize_error_cjs_1 = __webpack_require__(/*! serialize-error-cjs */ \"(rsc)/./node_modules/serialize-error-cjs/dist/index.js\");\nconst strip_ansi_1 = __importDefault(__webpack_require__(/*! strip-ansi */ \"(rsc)/./node_modules/inngest/node_modules/strip-ansi/index.js\"));\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nconst NonRetriableError_js_1 = __webpack_require__(/*! ../components/NonRetriableError.js */ \"(rsc)/./node_modules/inngest/components/NonRetriableError.js\");\nconst SERIALIZED_KEY = \"__serialized\";\nconst SERIALIZED_VALUE = true;\n/**\n * Add first-class support for certain errors that we control, in addition to\n * built-in errors such as `TypeError`.\n *\n * Adding these allows these non-standard errors to be correctly serialized,\n * sent to Inngest, then deserialized back into the correct error type for users\n * to react to correctly.\n *\n * Note that these errors only support `message?: string | undefined` as the\n * input; more custom errors are not supported with this current strategy.\n */\nserialize_error_cjs_1.errorConstructors.set(\"NonRetriableError\", NonRetriableError_js_1.NonRetriableError);\n/**\n * Serialise an error to a serialized JSON string.\n *\n * Errors do not serialise nicely to JSON, so we use this function to convert\n * them to a serialized JSON string. Doing this is also non-trivial for some\n * errors, so we use the `serialize-error` package to do it for us.\n *\n * See {@link https://www.npmjs.com/package/serialize-error}\n *\n * This function is a small wrapper around that package to also add a `type`\n * property to the serialised error, so that we can distinguish between\n * serialised errors and other objects.\n *\n * Will not reserialise existing serialised errors.\n */\nconst serializeError = (\n/**\n * The suspected error to serialize.\n */\nsubject, \n/**\n * If `true` and the error is not serializable, will return the original value\n * as `unknown` instead of coercing it to a serialized error.\n */\nallowUnknown = false) => {\n    try {\n        // Try to understand if this is already done.\n        // Will handle stringified errors.\n        const existingSerializedError = (0, exports.isSerializedError)(subject);\n        if (existingSerializedError) {\n            return existingSerializedError;\n        }\n        if (typeof subject === \"object\" && subject !== null) {\n            // Is an object, so let's try and serialize it.\n            const serializedErr = (0, serialize_error_cjs_1.serializeError)(subject);\n            // Not a proper error was caught, so give us a chance to return `unknown`.\n            if (!serializedErr.name && allowUnknown) {\n                return subject;\n            }\n            // Serialization can succeed but assign no name or message, so we'll\n            // map over the result here to ensure we have everything.\n            // We'll just stringify the entire subject for the message, as this at\n            // least provides some context for the user.\n            const ret = Object.assign(Object.assign({}, serializedErr), { name: serializedErr.name || \"Error\", message: serializedErr.message ||\n                    (0, json_stringify_safe_1.default)(subject) ||\n                    \"Unknown error; error serialization could not find a message.\", stack: serializedErr.stack || \"\", [SERIALIZED_KEY]: SERIALIZED_VALUE });\n            // If we have a cause, make sure we recursively serialize them too. We are\n            // lighter with causes though; attempt to recursively serialize them, but\n            // stop if we find something that doesn't work and just return `unknown`.\n            let target = ret;\n            const maxDepth = 5;\n            for (let i = 0; i < maxDepth; i++) {\n                if (typeof target === \"object\" &&\n                    target !== null &&\n                    \"cause\" in target &&\n                    target.cause) {\n                    target = target.cause = (0, exports.serializeError)(target.cause, true);\n                    continue;\n                }\n                break;\n            }\n            return ret;\n        }\n        // If it's not an object, it's hard to parse this as an Error. In this case,\n        // we'll throw an error to start attempting backup strategies.\n        throw new Error(\"Error is not an object; strange throw value.\");\n    }\n    catch (err) {\n        if (allowUnknown) {\n            // If we are allowed to return unknown, we'll just return the original\n            // value.\n            return subject;\n        }\n        try {\n            // If serialization fails, fall back to a regular Error and use the\n            // original object as the message for an Error. We don't know what this\n            // object looks like, so we can't do anything else with it.\n            return Object.assign(Object.assign({}, (0, exports.serializeError)(new Error(typeof subject === \"string\" ? subject : (0, json_stringify_safe_1.default)(subject)), false)), { \n                // Remove the stack; it's not relevant here\n                stack: \"\", [SERIALIZED_KEY]: SERIALIZED_VALUE });\n        }\n        catch (err) {\n            // If this failed, then stringifying the object also failed, so we'll just\n            // return a completely generic error.\n            // Failing to stringify the object is very unlikely.\n            return {\n                name: \"Could not serialize source error\",\n                message: \"Serializing the source error failed.\",\n                stack: \"\",\n                [SERIALIZED_KEY]: SERIALIZED_VALUE,\n            };\n        }\n    }\n};\nexports.serializeError = serializeError;\n/**\n * Check if an object or a string is a serialised error created by\n * {@link serializeError}.\n */\nconst isSerializedError = (value) => {\n    try {\n        if (typeof value === \"string\") {\n            const parsed = zod_1.z\n                .object({\n                [SERIALIZED_KEY]: zod_1.z.literal(SERIALIZED_VALUE),\n                name: zod_1.z.enum([...Array.from(serialize_error_cjs_1.errorConstructors.keys())]),\n                message: zod_1.z.string(),\n                stack: zod_1.z.string(),\n            })\n                .passthrough()\n                .safeParse(JSON.parse(value));\n            if (parsed.success) {\n                return parsed.data;\n            }\n        }\n        if (typeof value === \"object\" && value !== null) {\n            const objIsSerializedErr = Object.prototype.hasOwnProperty.call(value, SERIALIZED_KEY) &&\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                value[SERIALIZED_KEY] ===\n                    SERIALIZED_VALUE;\n            if (objIsSerializedErr) {\n                return value;\n            }\n        }\n    }\n    catch (_a) {\n        // no-op; we'll return undefined if parsing failed, as it isn't a serialized\n        // error\n    }\n};\nexports.isSerializedError = isSerializedError;\n/**\n * Deserialise an error created by {@link serializeError}.\n *\n * Ensures we only deserialise errors that meet a minimum level of\n * applicability, inclusive of error handling to ensure that badly serialized\n * errors are still handled.\n */\nconst deserializeError = (subject, allowUnknown = false) => {\n    const requiredFields = [\"name\", \"message\"];\n    try {\n        const hasRequiredFields = requiredFields.every((field) => {\n            return Object.prototype.hasOwnProperty.call(subject, field);\n        });\n        if (!hasRequiredFields) {\n            throw new Error();\n        }\n        const deserializedErr = (0, serialize_error_cjs_1.deserializeError)(subject);\n        if (\"cause\" in deserializedErr) {\n            deserializedErr.cause = (0, exports.deserializeError)(deserializedErr.cause, true);\n        }\n        return deserializedErr;\n    }\n    catch (_a) {\n        if (allowUnknown) {\n            // If we are allowed to return unknown, we'll just return the original\n            // value.\n            return subject;\n        }\n        const err = new Error(\"Unknown error; could not reserialize\");\n        /**\n         * Remove the stack so that it's not misleadingly shown as the Inngest\n         * internals.\n         */\n        err.stack = undefined;\n        return err;\n    }\n};\nexports.deserializeError = deserializeError;\nvar ErrCode;\n(function (ErrCode) {\n    ErrCode[\"NESTING_STEPS\"] = \"NESTING_STEPS\";\n    /**\n     * Legacy v0 execution error code for when a function has changed and no\n     * longer matches its in-progress state.\n     *\n     * @deprecated Not for use in latest execution method.\n     */\n    ErrCode[\"NON_DETERMINISTIC_FUNCTION\"] = \"NON_DETERMINISTIC_FUNCTION\";\n    /**\n     * Legacy v0 execution error code for when a function is found to be using\n     * async actions after memoziation has occurred, which v0 doesn't support.\n     *\n     * @deprecated Not for use in latest execution method.\n     */\n    ErrCode[\"ASYNC_DETECTED_AFTER_MEMOIZATION\"] = \"ASYNC_DETECTED_AFTER_MEMOIZATION\";\n    /**\n     * Legacy v0 execution error code for when a function is found to be using\n     * steps after a non-step async action has occurred.\n     *\n     * @deprecated Not for use in latest execution method.\n     */\n    ErrCode[\"STEP_USED_AFTER_ASYNC\"] = \"STEP_USED_AFTER_ASYNC\";\n    ErrCode[\"AUTOMATIC_PARALLEL_INDEXING\"] = \"AUTOMATIC_PARALLEL_INDEXING\";\n})(ErrCode || (exports.ErrCode = ErrCode = {}));\nexports.prettyErrorSplitter = \"=================================================\";\n/**\n * Given an unknown `err`, mutate it to minify any pretty errors that it\n * contains.\n */\nconst minifyPrettyError = (err) => {\n    var _a, _b, _c, _d;\n    try {\n        if (!isError(err)) {\n            return err;\n        }\n        const isPrettyError = err.message.includes(exports.prettyErrorSplitter);\n        if (!isPrettyError) {\n            return err;\n        }\n        const sanitizedMessage = (0, strip_ansi_1.default)(err.message);\n        const message = ((_b = (_a = sanitizedMessage.split(\"  \")[1]) === null || _a === void 0 ? void 0 : _a.split(\"\\n\")[0]) === null || _b === void 0 ? void 0 : _b.trim()) || err.message;\n        const code = ((_d = (_c = sanitizedMessage.split(\"\\n\\nCode: \")[1]) === null || _c === void 0 ? void 0 : _c.split(\"\\n\\n\")[0]) === null || _d === void 0 ? void 0 : _d.trim()) ||\n            undefined;\n        err.message = [code, message].filter(Boolean).join(\" - \");\n        if (err.stack) {\n            const sanitizedStack = (0, strip_ansi_1.default)(err.stack);\n            const stackRest = sanitizedStack\n                .split(`${exports.prettyErrorSplitter}\\n`)\n                .slice(2)\n                .join(\"\\n\");\n            err.stack = `${err.name}: ${err.message}\\n${stackRest}`;\n        }\n        return err;\n    }\n    catch (noopErr) {\n        return err;\n    }\n};\nexports.minifyPrettyError = minifyPrettyError;\n/**\n * Given an `err`, return a boolean representing whether it is in the shape of\n * an `Error` or not.\n */\nconst isError = (err) => {\n    try {\n        if (err instanceof Error) {\n            return true;\n        }\n        const hasName = Object.prototype.hasOwnProperty.call(err, \"name\");\n        const hasMessage = Object.prototype.hasOwnProperty.call(err, \"message\");\n        return hasName && hasMessage;\n    }\n    catch (noopErr) {\n        return false;\n    }\n};\n/**\n * Given an `unknown` object, retrieve the `message` property from it, or fall\n * back to the `fallback` string if it doesn't exist or is empty.\n */\nconst getErrorMessage = (err, fallback) => {\n    const { message } = zod_1.z\n        .object({ message: zod_1.z.string().min(1) })\n        .catch({ message: fallback })\n        .parse(err);\n    return message;\n};\nexports.getErrorMessage = getErrorMessage;\n/**\n * Given a {@link PrettyError}, return a nicely-formatted string ready to log\n * or throw.\n *\n * Useful for ensuring that errors are logged in a consistent, helpful format\n * across the SDK by prompting for key pieces of information.\n */\nconst prettyError = ({ type = \"error\", whatHappened, otherwise, reassurance, toFixNow, why, consequences, stack, code, }) => {\n    var _a, _b;\n    const { icon, colorFn } = {\n        error: { icon: \"❌\", colorFn: chalk_1.default.red },\n        warn: { icon: \"⚠️\", colorFn: chalk_1.default.yellow },\n    }[type];\n    let header = `${icon}  ${chalk_1.default.bold.underline(whatHappened.trim())}`;\n    if (stack) {\n        header +=\n            \"\\n\" +\n                [...(((_a = new Error().stack) === null || _a === void 0 ? void 0 : _a.split(\"\\n\").slice(1).filter(Boolean)) || [])].join(\"\\n\");\n    }\n    let toFixNowStr = (_b = (Array.isArray(toFixNow)\n        ? toFixNow\n            .map((s) => s.trim())\n            .filter(Boolean)\n            .map((s, i) => `\\t${i + 1}. ${s}`)\n            .join(\"\\n\")\n        : toFixNow === null || toFixNow === void 0 ? void 0 : toFixNow.trim())) !== null && _b !== void 0 ? _b : \"\";\n    if (Array.isArray(toFixNow) && toFixNowStr) {\n        toFixNowStr = `To fix this, you can take one of the following courses of action:\\n\\n${toFixNowStr}`;\n    }\n    let body = [reassurance === null || reassurance === void 0 ? void 0 : reassurance.trim(), why === null || why === void 0 ? void 0 : why.trim(), consequences === null || consequences === void 0 ? void 0 : consequences.trim()]\n        .filter(Boolean)\n        .join(\" \");\n    body += body ? `\\n\\n${toFixNowStr}` : toFixNowStr;\n    const trailer = [otherwise === null || otherwise === void 0 ? void 0 : otherwise.trim()].filter(Boolean).join(\" \");\n    const message = [\n        exports.prettyErrorSplitter,\n        header,\n        body,\n        trailer,\n        code ? `Code: ${code}` : \"\",\n        exports.prettyErrorSplitter,\n    ]\n        .filter(Boolean)\n        .join(\"\\n\\n\");\n    return colorFn(message);\n};\nexports.prettyError = prettyError;\nexports.fixEventKeyMissingSteps = [\n    \"Set the `INNGEST_EVENT_KEY` environment variable\",\n    `Pass a key to the \\`new Inngest()\\` constructor using the \\`${\"eventKey\"}\\` option`,\n    `Use \\`inngest.${\"setEventKey\"}()\\` at runtime`,\n];\n/**\n * An error that, when thrown, indicates internally that an outgoing operation\n * contains an error.\n *\n * We use this because serialized `data` sent back to Inngest may differ from\n * the error instance itself due to middleware.\n *\n * @internal\n */\nclass OutgoingResultError extends Error {\n    constructor(result) {\n        super(\"OutgoingOpError\");\n        this.result = result;\n    }\n}\nexports.OutgoingResultError = OutgoingResultError;\n/**\n * Create a function that will rethrow an error with a prefix added to the\n * message.\n *\n * Useful for adding context to errors that are rethrown.\n *\n * @example\n * ```ts\n * await doSomeAction().catch(rethrowError(\"Failed to do some action\"));\n * ```\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst rethrowError = (prefix) => {\n    return (err) => {\n        try {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/restrict-template-expressions\n            err.message && (err.message = `${prefix}; ${err.message}`);\n        }\n        catch (noopErr) {\n            // no-op\n        }\n        finally {\n            // eslint-disable-next-line no-unsafe-finally\n            throw err;\n        }\n    };\n};\nexports.rethrowError = rethrowError;\n/**\n * Legacy v0 execution error for functions that don't support mixing steps and\n * regular async actions.\n */\nconst functionStoppedRunningErr = (code) => {\n    return (0, exports.prettyError)({\n        whatHappened: \"Your function was stopped from running\",\n        why: \"We detected a mix of asynchronous logic, some using step tooling and some not.\",\n        consequences: \"This can cause unexpected behaviour when a function is paused and resumed and is therefore strongly discouraged; we stopped your function to ensure nothing unexpected happened!\",\n        stack: true,\n        toFixNow: \"Ensure that your function is either entirely step-based or entirely non-step-based, by either wrapping all asynchronous logic in `step.run()` calls or by removing all `step.*()` calls.\",\n        otherwise: \"For more information on why step functions work in this manner, see https://www.inngest.com/docs/functions/multi-step#gotchas\",\n        code,\n    });\n};\nexports.functionStoppedRunningErr = functionStoppedRunningErr;\n//# sourceMappingURL=errors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9oZWxwZXJzL2Vycm9ycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGlDQUFpQyxHQUFHLG9CQUFvQixHQUFHLDJCQUEyQixHQUFHLCtCQUErQixHQUFHLG1CQUFtQixHQUFHLHVCQUF1QixHQUFHLHlCQUF5QixHQUFHLDJCQUEyQixHQUFHLGVBQWUsR0FBRyx3QkFBd0IsR0FBRyx5QkFBeUIsR0FBRyxzQkFBc0I7QUFDcFUsZ0NBQWdDLG1CQUFPLENBQUMseURBQU87QUFDL0MsOENBQThDLG1CQUFPLENBQUMsa0ZBQXFCO0FBQzNFLDhCQUE4QixtQkFBTyxDQUFDLG1GQUFxQjtBQUMzRCxxQ0FBcUMsbUJBQU8sQ0FBQyxpRkFBWTtBQUN6RCxjQUFjLG1CQUFPLENBQUMsa0RBQUs7QUFDM0IsK0JBQStCLG1CQUFPLENBQUMsd0dBQW9DO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0Qsb0JBQW9CO0FBQzFFO0FBQ0Esb0NBQW9DLHNIQUFzSDtBQUMxSjtBQUNBLDJDQUEyQztBQUMzQztBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsY0FBYztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRDtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlEO0FBQ2pELHFDQUFxQztBQUNyQywrREFBK0Q7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0EsSUFBSSxxQkFBcUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQSxvQ0FBb0MscUJBQXFCO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxjQUFjLGVBQWUsZUFBZTtBQUM3QywyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsNEJBQTRCO0FBQ3REO0FBQ0E7QUFDQSwyQkFBMkIsU0FBUyxJQUFJLFlBQVksSUFBSSxVQUFVO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxVQUFVO0FBQ3RCLGtCQUFrQixrQ0FBa0M7QUFDcEQsaUJBQWlCLG1CQUFtQjtBQUNwQztBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQSxZQUFZLGtCQUFrQjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLGlHQUFpRztBQUN4SDtBQUNBLFlBQVksZ0JBQWdCO0FBQzVCLGlCQUFpQix5Q0FBeUM7QUFDMUQsZ0JBQWdCLDZDQUE2QztBQUM3RCxLQUFLO0FBQ0wsb0JBQW9CLE9BQU8sRUFBRSxvREFBb0Q7QUFDakY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLE1BQU0sSUFBSSxFQUFFO0FBQzVDO0FBQ0E7QUFDQTtBQUNBLDhGQUE4RixZQUFZO0FBQzFHO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLFlBQVk7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLEtBQUs7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CLCtCQUErQjtBQUMvQjtBQUNBLG1FQUFtRSxXQUFXO0FBQzlFLHFCQUFxQixjQUFjO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLFNBQVMsRUFBRSxZQUFZO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3SUFBd0k7QUFDeEk7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxpQ0FBaUM7QUFDakMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9oYXJzaHNocml2YXN0YXYvRGVza3RvcC9Db2RpbmcgUHJvamVjdHMvSm9iLUFzc2lzdGFudC1BZ2VudC9ub2RlX21vZHVsZXMvaW5uZ2VzdC9oZWxwZXJzL2Vycm9ycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZnVuY3Rpb25TdG9wcGVkUnVubmluZ0VyciA9IGV4cG9ydHMucmV0aHJvd0Vycm9yID0gZXhwb3J0cy5PdXRnb2luZ1Jlc3VsdEVycm9yID0gZXhwb3J0cy5maXhFdmVudEtleU1pc3NpbmdTdGVwcyA9IGV4cG9ydHMucHJldHR5RXJyb3IgPSBleHBvcnRzLmdldEVycm9yTWVzc2FnZSA9IGV4cG9ydHMubWluaWZ5UHJldHR5RXJyb3IgPSBleHBvcnRzLnByZXR0eUVycm9yU3BsaXR0ZXIgPSBleHBvcnRzLkVyckNvZGUgPSBleHBvcnRzLmRlc2VyaWFsaXplRXJyb3IgPSBleHBvcnRzLmlzU2VyaWFsaXplZEVycm9yID0gZXhwb3J0cy5zZXJpYWxpemVFcnJvciA9IHZvaWQgMDtcbmNvbnN0IGNoYWxrXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImNoYWxrXCIpKTtcbmNvbnN0IGpzb25fc3RyaW5naWZ5X3NhZmVfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwianNvbi1zdHJpbmdpZnktc2FmZVwiKSk7XG5jb25zdCBzZXJpYWxpemVfZXJyb3JfY2pzXzEgPSByZXF1aXJlKFwic2VyaWFsaXplLWVycm9yLWNqc1wiKTtcbmNvbnN0IHN0cmlwX2Fuc2lfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwic3RyaXAtYW5zaVwiKSk7XG5jb25zdCB6b2RfMSA9IHJlcXVpcmUoXCJ6b2RcIik7XG5jb25zdCBOb25SZXRyaWFibGVFcnJvcl9qc18xID0gcmVxdWlyZShcIi4uL2NvbXBvbmVudHMvTm9uUmV0cmlhYmxlRXJyb3IuanNcIik7XG5jb25zdCBTRVJJQUxJWkVEX0tFWSA9IFwiX19zZXJpYWxpemVkXCI7XG5jb25zdCBTRVJJQUxJWkVEX1ZBTFVFID0gdHJ1ZTtcbi8qKlxuICogQWRkIGZpcnN0LWNsYXNzIHN1cHBvcnQgZm9yIGNlcnRhaW4gZXJyb3JzIHRoYXQgd2UgY29udHJvbCwgaW4gYWRkaXRpb24gdG9cbiAqIGJ1aWx0LWluIGVycm9ycyBzdWNoIGFzIGBUeXBlRXJyb3JgLlxuICpcbiAqIEFkZGluZyB0aGVzZSBhbGxvd3MgdGhlc2Ugbm9uLXN0YW5kYXJkIGVycm9ycyB0byBiZSBjb3JyZWN0bHkgc2VyaWFsaXplZCxcbiAqIHNlbnQgdG8gSW5uZ2VzdCwgdGhlbiBkZXNlcmlhbGl6ZWQgYmFjayBpbnRvIHRoZSBjb3JyZWN0IGVycm9yIHR5cGUgZm9yIHVzZXJzXG4gKiB0byByZWFjdCB0byBjb3JyZWN0bHkuXG4gKlxuICogTm90ZSB0aGF0IHRoZXNlIGVycm9ycyBvbmx5IHN1cHBvcnQgYG1lc3NhZ2U/OiBzdHJpbmcgfCB1bmRlZmluZWRgIGFzIHRoZVxuICogaW5wdXQ7IG1vcmUgY3VzdG9tIGVycm9ycyBhcmUgbm90IHN1cHBvcnRlZCB3aXRoIHRoaXMgY3VycmVudCBzdHJhdGVneS5cbiAqL1xuc2VyaWFsaXplX2Vycm9yX2Nqc18xLmVycm9yQ29uc3RydWN0b3JzLnNldChcIk5vblJldHJpYWJsZUVycm9yXCIsIE5vblJldHJpYWJsZUVycm9yX2pzXzEuTm9uUmV0cmlhYmxlRXJyb3IpO1xuLyoqXG4gKiBTZXJpYWxpc2UgYW4gZXJyb3IgdG8gYSBzZXJpYWxpemVkIEpTT04gc3RyaW5nLlxuICpcbiAqIEVycm9ycyBkbyBub3Qgc2VyaWFsaXNlIG5pY2VseSB0byBKU09OLCBzbyB3ZSB1c2UgdGhpcyBmdW5jdGlvbiB0byBjb252ZXJ0XG4gKiB0aGVtIHRvIGEgc2VyaWFsaXplZCBKU09OIHN0cmluZy4gRG9pbmcgdGhpcyBpcyBhbHNvIG5vbi10cml2aWFsIGZvciBzb21lXG4gKiBlcnJvcnMsIHNvIHdlIHVzZSB0aGUgYHNlcmlhbGl6ZS1lcnJvcmAgcGFja2FnZSB0byBkbyBpdCBmb3IgdXMuXG4gKlxuICogU2VlIHtAbGluayBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9zZXJpYWxpemUtZXJyb3J9XG4gKlxuICogVGhpcyBmdW5jdGlvbiBpcyBhIHNtYWxsIHdyYXBwZXIgYXJvdW5kIHRoYXQgcGFja2FnZSB0byBhbHNvIGFkZCBhIGB0eXBlYFxuICogcHJvcGVydHkgdG8gdGhlIHNlcmlhbGlzZWQgZXJyb3IsIHNvIHRoYXQgd2UgY2FuIGRpc3Rpbmd1aXNoIGJldHdlZW5cbiAqIHNlcmlhbGlzZWQgZXJyb3JzIGFuZCBvdGhlciBvYmplY3RzLlxuICpcbiAqIFdpbGwgbm90IHJlc2VyaWFsaXNlIGV4aXN0aW5nIHNlcmlhbGlzZWQgZXJyb3JzLlxuICovXG5jb25zdCBzZXJpYWxpemVFcnJvciA9IChcbi8qKlxuICogVGhlIHN1c3BlY3RlZCBlcnJvciB0byBzZXJpYWxpemUuXG4gKi9cbnN1YmplY3QsIFxuLyoqXG4gKiBJZiBgdHJ1ZWAgYW5kIHRoZSBlcnJvciBpcyBub3Qgc2VyaWFsaXphYmxlLCB3aWxsIHJldHVybiB0aGUgb3JpZ2luYWwgdmFsdWVcbiAqIGFzIGB1bmtub3duYCBpbnN0ZWFkIG9mIGNvZXJjaW5nIGl0IHRvIGEgc2VyaWFsaXplZCBlcnJvci5cbiAqL1xuYWxsb3dVbmtub3duID0gZmFsc2UpID0+IHtcbiAgICB0cnkge1xuICAgICAgICAvLyBUcnkgdG8gdW5kZXJzdGFuZCBpZiB0aGlzIGlzIGFscmVhZHkgZG9uZS5cbiAgICAgICAgLy8gV2lsbCBoYW5kbGUgc3RyaW5naWZpZWQgZXJyb3JzLlxuICAgICAgICBjb25zdCBleGlzdGluZ1NlcmlhbGl6ZWRFcnJvciA9ICgwLCBleHBvcnRzLmlzU2VyaWFsaXplZEVycm9yKShzdWJqZWN0KTtcbiAgICAgICAgaWYgKGV4aXN0aW5nU2VyaWFsaXplZEVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gZXhpc3RpbmdTZXJpYWxpemVkRXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBzdWJqZWN0ID09PSBcIm9iamVjdFwiICYmIHN1YmplY3QgIT09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIElzIGFuIG9iamVjdCwgc28gbGV0J3MgdHJ5IGFuZCBzZXJpYWxpemUgaXQuXG4gICAgICAgICAgICBjb25zdCBzZXJpYWxpemVkRXJyID0gKDAsIHNlcmlhbGl6ZV9lcnJvcl9janNfMS5zZXJpYWxpemVFcnJvcikoc3ViamVjdCk7XG4gICAgICAgICAgICAvLyBOb3QgYSBwcm9wZXIgZXJyb3Igd2FzIGNhdWdodCwgc28gZ2l2ZSB1cyBhIGNoYW5jZSB0byByZXR1cm4gYHVua25vd25gLlxuICAgICAgICAgICAgaWYgKCFzZXJpYWxpemVkRXJyLm5hbWUgJiYgYWxsb3dVbmtub3duKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN1YmplY3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBTZXJpYWxpemF0aW9uIGNhbiBzdWNjZWVkIGJ1dCBhc3NpZ24gbm8gbmFtZSBvciBtZXNzYWdlLCBzbyB3ZSdsbFxuICAgICAgICAgICAgLy8gbWFwIG92ZXIgdGhlIHJlc3VsdCBoZXJlIHRvIGVuc3VyZSB3ZSBoYXZlIGV2ZXJ5dGhpbmcuXG4gICAgICAgICAgICAvLyBXZSdsbCBqdXN0IHN0cmluZ2lmeSB0aGUgZW50aXJlIHN1YmplY3QgZm9yIHRoZSBtZXNzYWdlLCBhcyB0aGlzIGF0XG4gICAgICAgICAgICAvLyBsZWFzdCBwcm92aWRlcyBzb21lIGNvbnRleHQgZm9yIHRoZSB1c2VyLlxuICAgICAgICAgICAgY29uc3QgcmV0ID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBzZXJpYWxpemVkRXJyKSwgeyBuYW1lOiBzZXJpYWxpemVkRXJyLm5hbWUgfHwgXCJFcnJvclwiLCBtZXNzYWdlOiBzZXJpYWxpemVkRXJyLm1lc3NhZ2UgfHxcbiAgICAgICAgICAgICAgICAgICAgKDAsIGpzb25fc3RyaW5naWZ5X3NhZmVfMS5kZWZhdWx0KShzdWJqZWN0KSB8fFxuICAgICAgICAgICAgICAgICAgICBcIlVua25vd24gZXJyb3I7IGVycm9yIHNlcmlhbGl6YXRpb24gY291bGQgbm90IGZpbmQgYSBtZXNzYWdlLlwiLCBzdGFjazogc2VyaWFsaXplZEVyci5zdGFjayB8fCBcIlwiLCBbU0VSSUFMSVpFRF9LRVldOiBTRVJJQUxJWkVEX1ZBTFVFIH0pO1xuICAgICAgICAgICAgLy8gSWYgd2UgaGF2ZSBhIGNhdXNlLCBtYWtlIHN1cmUgd2UgcmVjdXJzaXZlbHkgc2VyaWFsaXplIHRoZW0gdG9vLiBXZSBhcmVcbiAgICAgICAgICAgIC8vIGxpZ2h0ZXIgd2l0aCBjYXVzZXMgdGhvdWdoOyBhdHRlbXB0IHRvIHJlY3Vyc2l2ZWx5IHNlcmlhbGl6ZSB0aGVtLCBidXRcbiAgICAgICAgICAgIC8vIHN0b3AgaWYgd2UgZmluZCBzb21ldGhpbmcgdGhhdCBkb2Vzbid0IHdvcmsgYW5kIGp1c3QgcmV0dXJuIGB1bmtub3duYC5cbiAgICAgICAgICAgIGxldCB0YXJnZXQgPSByZXQ7XG4gICAgICAgICAgICBjb25zdCBtYXhEZXB0aCA9IDU7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1heERlcHRoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQgIT09IG51bGwgJiZcbiAgICAgICAgICAgICAgICAgICAgXCJjYXVzZVwiIGluIHRhcmdldCAmJlxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQuY2F1c2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LmNhdXNlID0gKDAsIGV4cG9ydHMuc2VyaWFsaXplRXJyb3IpKHRhcmdldC5jYXVzZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgaXQncyBub3QgYW4gb2JqZWN0LCBpdCdzIGhhcmQgdG8gcGFyc2UgdGhpcyBhcyBhbiBFcnJvci4gSW4gdGhpcyBjYXNlLFxuICAgICAgICAvLyB3ZSdsbCB0aHJvdyBhbiBlcnJvciB0byBzdGFydCBhdHRlbXB0aW5nIGJhY2t1cCBzdHJhdGVnaWVzLlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFcnJvciBpcyBub3QgYW4gb2JqZWN0OyBzdHJhbmdlIHRocm93IHZhbHVlLlwiKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgICBpZiAoYWxsb3dVbmtub3duKSB7XG4gICAgICAgICAgICAvLyBJZiB3ZSBhcmUgYWxsb3dlZCB0byByZXR1cm4gdW5rbm93biwgd2UnbGwganVzdCByZXR1cm4gdGhlIG9yaWdpbmFsXG4gICAgICAgICAgICAvLyB2YWx1ZS5cbiAgICAgICAgICAgIHJldHVybiBzdWJqZWN0O1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBJZiBzZXJpYWxpemF0aW9uIGZhaWxzLCBmYWxsIGJhY2sgdG8gYSByZWd1bGFyIEVycm9yIGFuZCB1c2UgdGhlXG4gICAgICAgICAgICAvLyBvcmlnaW5hbCBvYmplY3QgYXMgdGhlIG1lc3NhZ2UgZm9yIGFuIEVycm9yLiBXZSBkb24ndCBrbm93IHdoYXQgdGhpc1xuICAgICAgICAgICAgLy8gb2JqZWN0IGxvb2tzIGxpa2UsIHNvIHdlIGNhbid0IGRvIGFueXRoaW5nIGVsc2Ugd2l0aCBpdC5cbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sICgwLCBleHBvcnRzLnNlcmlhbGl6ZUVycm9yKShuZXcgRXJyb3IodHlwZW9mIHN1YmplY3QgPT09IFwic3RyaW5nXCIgPyBzdWJqZWN0IDogKDAsIGpzb25fc3RyaW5naWZ5X3NhZmVfMS5kZWZhdWx0KShzdWJqZWN0KSksIGZhbHNlKSksIHsgXG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBzdGFjazsgaXQncyBub3QgcmVsZXZhbnQgaGVyZVxuICAgICAgICAgICAgICAgIHN0YWNrOiBcIlwiLCBbU0VSSUFMSVpFRF9LRVldOiBTRVJJQUxJWkVEX1ZBTFVFIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIC8vIElmIHRoaXMgZmFpbGVkLCB0aGVuIHN0cmluZ2lmeWluZyB0aGUgb2JqZWN0IGFsc28gZmFpbGVkLCBzbyB3ZSdsbCBqdXN0XG4gICAgICAgICAgICAvLyByZXR1cm4gYSBjb21wbGV0ZWx5IGdlbmVyaWMgZXJyb3IuXG4gICAgICAgICAgICAvLyBGYWlsaW5nIHRvIHN0cmluZ2lmeSB0aGUgb2JqZWN0IGlzIHZlcnkgdW5saWtlbHkuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ291bGQgbm90IHNlcmlhbGl6ZSBzb3VyY2UgZXJyb3JcIixcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIlNlcmlhbGl6aW5nIHRoZSBzb3VyY2UgZXJyb3IgZmFpbGVkLlwiLFxuICAgICAgICAgICAgICAgIHN0YWNrOiBcIlwiLFxuICAgICAgICAgICAgICAgIFtTRVJJQUxJWkVEX0tFWV06IFNFUklBTElaRURfVkFMVUUsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxufTtcbmV4cG9ydHMuc2VyaWFsaXplRXJyb3IgPSBzZXJpYWxpemVFcnJvcjtcbi8qKlxuICogQ2hlY2sgaWYgYW4gb2JqZWN0IG9yIGEgc3RyaW5nIGlzIGEgc2VyaWFsaXNlZCBlcnJvciBjcmVhdGVkIGJ5XG4gKiB7QGxpbmsgc2VyaWFsaXplRXJyb3J9LlxuICovXG5jb25zdCBpc1NlcmlhbGl6ZWRFcnJvciA9ICh2YWx1ZSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZCA9IHpvZF8xLnpcbiAgICAgICAgICAgICAgICAub2JqZWN0KHtcbiAgICAgICAgICAgICAgICBbU0VSSUFMSVpFRF9LRVldOiB6b2RfMS56LmxpdGVyYWwoU0VSSUFMSVpFRF9WQUxVRSksXG4gICAgICAgICAgICAgICAgbmFtZTogem9kXzEuei5lbnVtKFsuLi5BcnJheS5mcm9tKHNlcmlhbGl6ZV9lcnJvcl9janNfMS5lcnJvckNvbnN0cnVjdG9ycy5rZXlzKCkpXSksXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogem9kXzEuei5zdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBzdGFjazogem9kXzEuei5zdHJpbmcoKSxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnBhc3N0aHJvdWdoKClcbiAgICAgICAgICAgICAgICAuc2FmZVBhcnNlKEpTT04ucGFyc2UodmFsdWUpKTtcbiAgICAgICAgICAgIGlmIChwYXJzZWQuc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZWQuZGF0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmIHZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCBvYmpJc1NlcmlhbGl6ZWRFcnIgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIFNFUklBTElaRURfS0VZKSAmJlxuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgICAgICAgICAgICAgICB2YWx1ZVtTRVJJQUxJWkVEX0tFWV0gPT09XG4gICAgICAgICAgICAgICAgICAgIFNFUklBTElaRURfVkFMVUU7XG4gICAgICAgICAgICBpZiAob2JqSXNTZXJpYWxpemVkRXJyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChfYSkge1xuICAgICAgICAvLyBuby1vcDsgd2UnbGwgcmV0dXJuIHVuZGVmaW5lZCBpZiBwYXJzaW5nIGZhaWxlZCwgYXMgaXQgaXNuJ3QgYSBzZXJpYWxpemVkXG4gICAgICAgIC8vIGVycm9yXG4gICAgfVxufTtcbmV4cG9ydHMuaXNTZXJpYWxpemVkRXJyb3IgPSBpc1NlcmlhbGl6ZWRFcnJvcjtcbi8qKlxuICogRGVzZXJpYWxpc2UgYW4gZXJyb3IgY3JlYXRlZCBieSB7QGxpbmsgc2VyaWFsaXplRXJyb3J9LlxuICpcbiAqIEVuc3VyZXMgd2Ugb25seSBkZXNlcmlhbGlzZSBlcnJvcnMgdGhhdCBtZWV0IGEgbWluaW11bSBsZXZlbCBvZlxuICogYXBwbGljYWJpbGl0eSwgaW5jbHVzaXZlIG9mIGVycm9yIGhhbmRsaW5nIHRvIGVuc3VyZSB0aGF0IGJhZGx5IHNlcmlhbGl6ZWRcbiAqIGVycm9ycyBhcmUgc3RpbGwgaGFuZGxlZC5cbiAqL1xuY29uc3QgZGVzZXJpYWxpemVFcnJvciA9IChzdWJqZWN0LCBhbGxvd1Vua25vd24gPSBmYWxzZSkgPT4ge1xuICAgIGNvbnN0IHJlcXVpcmVkRmllbGRzID0gW1wibmFtZVwiLCBcIm1lc3NhZ2VcIl07XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgaGFzUmVxdWlyZWRGaWVsZHMgPSByZXF1aXJlZEZpZWxkcy5ldmVyeSgoZmllbGQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc3ViamVjdCwgZmllbGQpO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFoYXNSZXF1aXJlZEZpZWxkcykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGVzZXJpYWxpemVkRXJyID0gKDAsIHNlcmlhbGl6ZV9lcnJvcl9janNfMS5kZXNlcmlhbGl6ZUVycm9yKShzdWJqZWN0KTtcbiAgICAgICAgaWYgKFwiY2F1c2VcIiBpbiBkZXNlcmlhbGl6ZWRFcnIpIHtcbiAgICAgICAgICAgIGRlc2VyaWFsaXplZEVyci5jYXVzZSA9ICgwLCBleHBvcnRzLmRlc2VyaWFsaXplRXJyb3IpKGRlc2VyaWFsaXplZEVyci5jYXVzZSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlc2VyaWFsaXplZEVycjtcbiAgICB9XG4gICAgY2F0Y2ggKF9hKSB7XG4gICAgICAgIGlmIChhbGxvd1Vua25vd24pIHtcbiAgICAgICAgICAgIC8vIElmIHdlIGFyZSBhbGxvd2VkIHRvIHJldHVybiB1bmtub3duLCB3ZSdsbCBqdXN0IHJldHVybiB0aGUgb3JpZ2luYWxcbiAgICAgICAgICAgIC8vIHZhbHVlLlxuICAgICAgICAgICAgcmV0dXJuIHN1YmplY3Q7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9yKFwiVW5rbm93biBlcnJvcjsgY291bGQgbm90IHJlc2VyaWFsaXplXCIpO1xuICAgICAgICAvKipcbiAgICAgICAgICogUmVtb3ZlIHRoZSBzdGFjayBzbyB0aGF0IGl0J3Mgbm90IG1pc2xlYWRpbmdseSBzaG93biBhcyB0aGUgSW5uZ2VzdFxuICAgICAgICAgKiBpbnRlcm5hbHMuXG4gICAgICAgICAqL1xuICAgICAgICBlcnIuc3RhY2sgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBlcnI7XG4gICAgfVxufTtcbmV4cG9ydHMuZGVzZXJpYWxpemVFcnJvciA9IGRlc2VyaWFsaXplRXJyb3I7XG52YXIgRXJyQ29kZTtcbihmdW5jdGlvbiAoRXJyQ29kZSkge1xuICAgIEVyckNvZGVbXCJORVNUSU5HX1NURVBTXCJdID0gXCJORVNUSU5HX1NURVBTXCI7XG4gICAgLyoqXG4gICAgICogTGVnYWN5IHYwIGV4ZWN1dGlvbiBlcnJvciBjb2RlIGZvciB3aGVuIGEgZnVuY3Rpb24gaGFzIGNoYW5nZWQgYW5kIG5vXG4gICAgICogbG9uZ2VyIG1hdGNoZXMgaXRzIGluLXByb2dyZXNzIHN0YXRlLlxuICAgICAqXG4gICAgICogQGRlcHJlY2F0ZWQgTm90IGZvciB1c2UgaW4gbGF0ZXN0IGV4ZWN1dGlvbiBtZXRob2QuXG4gICAgICovXG4gICAgRXJyQ29kZVtcIk5PTl9ERVRFUk1JTklTVElDX0ZVTkNUSU9OXCJdID0gXCJOT05fREVURVJNSU5JU1RJQ19GVU5DVElPTlwiO1xuICAgIC8qKlxuICAgICAqIExlZ2FjeSB2MCBleGVjdXRpb24gZXJyb3IgY29kZSBmb3Igd2hlbiBhIGZ1bmN0aW9uIGlzIGZvdW5kIHRvIGJlIHVzaW5nXG4gICAgICogYXN5bmMgYWN0aW9ucyBhZnRlciBtZW1vemlhdGlvbiBoYXMgb2NjdXJyZWQsIHdoaWNoIHYwIGRvZXNuJ3Qgc3VwcG9ydC5cbiAgICAgKlxuICAgICAqIEBkZXByZWNhdGVkIE5vdCBmb3IgdXNlIGluIGxhdGVzdCBleGVjdXRpb24gbWV0aG9kLlxuICAgICAqL1xuICAgIEVyckNvZGVbXCJBU1lOQ19ERVRFQ1RFRF9BRlRFUl9NRU1PSVpBVElPTlwiXSA9IFwiQVNZTkNfREVURUNURURfQUZURVJfTUVNT0laQVRJT05cIjtcbiAgICAvKipcbiAgICAgKiBMZWdhY3kgdjAgZXhlY3V0aW9uIGVycm9yIGNvZGUgZm9yIHdoZW4gYSBmdW5jdGlvbiBpcyBmb3VuZCB0byBiZSB1c2luZ1xuICAgICAqIHN0ZXBzIGFmdGVyIGEgbm9uLXN0ZXAgYXN5bmMgYWN0aW9uIGhhcyBvY2N1cnJlZC5cbiAgICAgKlxuICAgICAqIEBkZXByZWNhdGVkIE5vdCBmb3IgdXNlIGluIGxhdGVzdCBleGVjdXRpb24gbWV0aG9kLlxuICAgICAqL1xuICAgIEVyckNvZGVbXCJTVEVQX1VTRURfQUZURVJfQVNZTkNcIl0gPSBcIlNURVBfVVNFRF9BRlRFUl9BU1lOQ1wiO1xuICAgIEVyckNvZGVbXCJBVVRPTUFUSUNfUEFSQUxMRUxfSU5ERVhJTkdcIl0gPSBcIkFVVE9NQVRJQ19QQVJBTExFTF9JTkRFWElOR1wiO1xufSkoRXJyQ29kZSB8fCAoZXhwb3J0cy5FcnJDb2RlID0gRXJyQ29kZSA9IHt9KSk7XG5leHBvcnRzLnByZXR0eUVycm9yU3BsaXR0ZXIgPSBcIj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cIjtcbi8qKlxuICogR2l2ZW4gYW4gdW5rbm93biBgZXJyYCwgbXV0YXRlIGl0IHRvIG1pbmlmeSBhbnkgcHJldHR5IGVycm9ycyB0aGF0IGl0XG4gKiBjb250YWlucy5cbiAqL1xuY29uc3QgbWluaWZ5UHJldHR5RXJyb3IgPSAoZXJyKSA9PiB7XG4gICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICAgIHRyeSB7XG4gICAgICAgIGlmICghaXNFcnJvcihlcnIpKSB7XG4gICAgICAgICAgICByZXR1cm4gZXJyO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGlzUHJldHR5RXJyb3IgPSBlcnIubWVzc2FnZS5pbmNsdWRlcyhleHBvcnRzLnByZXR0eUVycm9yU3BsaXR0ZXIpO1xuICAgICAgICBpZiAoIWlzUHJldHR5RXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBlcnI7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2FuaXRpemVkTWVzc2FnZSA9ICgwLCBzdHJpcF9hbnNpXzEuZGVmYXVsdCkoZXJyLm1lc3NhZ2UpO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gKChfYiA9IChfYSA9IHNhbml0aXplZE1lc3NhZ2Uuc3BsaXQoXCIgIFwiKVsxXSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNwbGl0KFwiXFxuXCIpWzBdKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IudHJpbSgpKSB8fCBlcnIubWVzc2FnZTtcbiAgICAgICAgY29uc3QgY29kZSA9ICgoX2QgPSAoX2MgPSBzYW5pdGl6ZWRNZXNzYWdlLnNwbGl0KFwiXFxuXFxuQ29kZTogXCIpWzFdKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Muc3BsaXQoXCJcXG5cXG5cIilbMF0pID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC50cmltKCkpIHx8XG4gICAgICAgICAgICB1bmRlZmluZWQ7XG4gICAgICAgIGVyci5tZXNzYWdlID0gW2NvZGUsIG1lc3NhZ2VdLmZpbHRlcihCb29sZWFuKS5qb2luKFwiIC0gXCIpO1xuICAgICAgICBpZiAoZXJyLnN0YWNrKSB7XG4gICAgICAgICAgICBjb25zdCBzYW5pdGl6ZWRTdGFjayA9ICgwLCBzdHJpcF9hbnNpXzEuZGVmYXVsdCkoZXJyLnN0YWNrKTtcbiAgICAgICAgICAgIGNvbnN0IHN0YWNrUmVzdCA9IHNhbml0aXplZFN0YWNrXG4gICAgICAgICAgICAgICAgLnNwbGl0KGAke2V4cG9ydHMucHJldHR5RXJyb3JTcGxpdHRlcn1cXG5gKVxuICAgICAgICAgICAgICAgIC5zbGljZSgyKVxuICAgICAgICAgICAgICAgIC5qb2luKFwiXFxuXCIpO1xuICAgICAgICAgICAgZXJyLnN0YWNrID0gYCR7ZXJyLm5hbWV9OiAke2Vyci5tZXNzYWdlfVxcbiR7c3RhY2tSZXN0fWA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVycjtcbiAgICB9XG4gICAgY2F0Y2ggKG5vb3BFcnIpIHtcbiAgICAgICAgcmV0dXJuIGVycjtcbiAgICB9XG59O1xuZXhwb3J0cy5taW5pZnlQcmV0dHlFcnJvciA9IG1pbmlmeVByZXR0eUVycm9yO1xuLyoqXG4gKiBHaXZlbiBhbiBgZXJyYCwgcmV0dXJuIGEgYm9vbGVhbiByZXByZXNlbnRpbmcgd2hldGhlciBpdCBpcyBpbiB0aGUgc2hhcGUgb2ZcbiAqIGFuIGBFcnJvcmAgb3Igbm90LlxuICovXG5jb25zdCBpc0Vycm9yID0gKGVycikgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaGFzTmFtZSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlcnIsIFwibmFtZVwiKTtcbiAgICAgICAgY29uc3QgaGFzTWVzc2FnZSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlcnIsIFwibWVzc2FnZVwiKTtcbiAgICAgICAgcmV0dXJuIGhhc05hbWUgJiYgaGFzTWVzc2FnZTtcbiAgICB9XG4gICAgY2F0Y2ggKG5vb3BFcnIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn07XG4vKipcbiAqIEdpdmVuIGFuIGB1bmtub3duYCBvYmplY3QsIHJldHJpZXZlIHRoZSBgbWVzc2FnZWAgcHJvcGVydHkgZnJvbSBpdCwgb3IgZmFsbFxuICogYmFjayB0byB0aGUgYGZhbGxiYWNrYCBzdHJpbmcgaWYgaXQgZG9lc24ndCBleGlzdCBvciBpcyBlbXB0eS5cbiAqL1xuY29uc3QgZ2V0RXJyb3JNZXNzYWdlID0gKGVyciwgZmFsbGJhY2spID0+IHtcbiAgICBjb25zdCB7IG1lc3NhZ2UgfSA9IHpvZF8xLnpcbiAgICAgICAgLm9iamVjdCh7IG1lc3NhZ2U6IHpvZF8xLnouc3RyaW5nKCkubWluKDEpIH0pXG4gICAgICAgIC5jYXRjaCh7IG1lc3NhZ2U6IGZhbGxiYWNrIH0pXG4gICAgICAgIC5wYXJzZShlcnIpO1xuICAgIHJldHVybiBtZXNzYWdlO1xufTtcbmV4cG9ydHMuZ2V0RXJyb3JNZXNzYWdlID0gZ2V0RXJyb3JNZXNzYWdlO1xuLyoqXG4gKiBHaXZlbiBhIHtAbGluayBQcmV0dHlFcnJvcn0sIHJldHVybiBhIG5pY2VseS1mb3JtYXR0ZWQgc3RyaW5nIHJlYWR5IHRvIGxvZ1xuICogb3IgdGhyb3cuXG4gKlxuICogVXNlZnVsIGZvciBlbnN1cmluZyB0aGF0IGVycm9ycyBhcmUgbG9nZ2VkIGluIGEgY29uc2lzdGVudCwgaGVscGZ1bCBmb3JtYXRcbiAqIGFjcm9zcyB0aGUgU0RLIGJ5IHByb21wdGluZyBmb3Iga2V5IHBpZWNlcyBvZiBpbmZvcm1hdGlvbi5cbiAqL1xuY29uc3QgcHJldHR5RXJyb3IgPSAoeyB0eXBlID0gXCJlcnJvclwiLCB3aGF0SGFwcGVuZWQsIG90aGVyd2lzZSwgcmVhc3N1cmFuY2UsIHRvRml4Tm93LCB3aHksIGNvbnNlcXVlbmNlcywgc3RhY2ssIGNvZGUsIH0pID0+IHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIGNvbnN0IHsgaWNvbiwgY29sb3JGbiB9ID0ge1xuICAgICAgICBlcnJvcjogeyBpY29uOiBcIuKdjFwiLCBjb2xvckZuOiBjaGFsa18xLmRlZmF1bHQucmVkIH0sXG4gICAgICAgIHdhcm46IHsgaWNvbjogXCLimqDvuI9cIiwgY29sb3JGbjogY2hhbGtfMS5kZWZhdWx0LnllbGxvdyB9LFxuICAgIH1bdHlwZV07XG4gICAgbGV0IGhlYWRlciA9IGAke2ljb259ICAke2NoYWxrXzEuZGVmYXVsdC5ib2xkLnVuZGVybGluZSh3aGF0SGFwcGVuZWQudHJpbSgpKX1gO1xuICAgIGlmIChzdGFjaykge1xuICAgICAgICBoZWFkZXIgKz1cbiAgICAgICAgICAgIFwiXFxuXCIgK1xuICAgICAgICAgICAgICAgIFsuLi4oKChfYSA9IG5ldyBFcnJvcigpLnN0YWNrKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc3BsaXQoXCJcXG5cIikuc2xpY2UoMSkuZmlsdGVyKEJvb2xlYW4pKSB8fCBbXSldLmpvaW4oXCJcXG5cIik7XG4gICAgfVxuICAgIGxldCB0b0ZpeE5vd1N0ciA9IChfYiA9IChBcnJheS5pc0FycmF5KHRvRml4Tm93KVxuICAgICAgICA/IHRvRml4Tm93XG4gICAgICAgICAgICAubWFwKChzKSA9PiBzLnRyaW0oKSlcbiAgICAgICAgICAgIC5maWx0ZXIoQm9vbGVhbilcbiAgICAgICAgICAgIC5tYXAoKHMsIGkpID0+IGBcXHQke2kgKyAxfS4gJHtzfWApXG4gICAgICAgICAgICAuam9pbihcIlxcblwiKVxuICAgICAgICA6IHRvRml4Tm93ID09PSBudWxsIHx8IHRvRml4Tm93ID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0b0ZpeE5vdy50cmltKCkpKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBcIlwiO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHRvRml4Tm93KSAmJiB0b0ZpeE5vd1N0cikge1xuICAgICAgICB0b0ZpeE5vd1N0ciA9IGBUbyBmaXggdGhpcywgeW91IGNhbiB0YWtlIG9uZSBvZiB0aGUgZm9sbG93aW5nIGNvdXJzZXMgb2YgYWN0aW9uOlxcblxcbiR7dG9GaXhOb3dTdHJ9YDtcbiAgICB9XG4gICAgbGV0IGJvZHkgPSBbcmVhc3N1cmFuY2UgPT09IG51bGwgfHwgcmVhc3N1cmFuY2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlYXNzdXJhbmNlLnRyaW0oKSwgd2h5ID09PSBudWxsIHx8IHdoeSA9PT0gdm9pZCAwID8gdm9pZCAwIDogd2h5LnRyaW0oKSwgY29uc2VxdWVuY2VzID09PSBudWxsIHx8IGNvbnNlcXVlbmNlcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29uc2VxdWVuY2VzLnRyaW0oKV1cbiAgICAgICAgLmZpbHRlcihCb29sZWFuKVxuICAgICAgICAuam9pbihcIiBcIik7XG4gICAgYm9keSArPSBib2R5ID8gYFxcblxcbiR7dG9GaXhOb3dTdHJ9YCA6IHRvRml4Tm93U3RyO1xuICAgIGNvbnN0IHRyYWlsZXIgPSBbb3RoZXJ3aXNlID09PSBudWxsIHx8IG90aGVyd2lzZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3RoZXJ3aXNlLnRyaW0oKV0uZmlsdGVyKEJvb2xlYW4pLmpvaW4oXCIgXCIpO1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBbXG4gICAgICAgIGV4cG9ydHMucHJldHR5RXJyb3JTcGxpdHRlcixcbiAgICAgICAgaGVhZGVyLFxuICAgICAgICBib2R5LFxuICAgICAgICB0cmFpbGVyLFxuICAgICAgICBjb2RlID8gYENvZGU6ICR7Y29kZX1gIDogXCJcIixcbiAgICAgICAgZXhwb3J0cy5wcmV0dHlFcnJvclNwbGl0dGVyLFxuICAgIF1cbiAgICAgICAgLmZpbHRlcihCb29sZWFuKVxuICAgICAgICAuam9pbihcIlxcblxcblwiKTtcbiAgICByZXR1cm4gY29sb3JGbihtZXNzYWdlKTtcbn07XG5leHBvcnRzLnByZXR0eUVycm9yID0gcHJldHR5RXJyb3I7XG5leHBvcnRzLmZpeEV2ZW50S2V5TWlzc2luZ1N0ZXBzID0gW1xuICAgIFwiU2V0IHRoZSBgSU5OR0VTVF9FVkVOVF9LRVlgIGVudmlyb25tZW50IHZhcmlhYmxlXCIsXG4gICAgYFBhc3MgYSBrZXkgdG8gdGhlIFxcYG5ldyBJbm5nZXN0KClcXGAgY29uc3RydWN0b3IgdXNpbmcgdGhlIFxcYCR7XCJldmVudEtleVwifVxcYCBvcHRpb25gLFxuICAgIGBVc2UgXFxgaW5uZ2VzdC4ke1wic2V0RXZlbnRLZXlcIn0oKVxcYCBhdCBydW50aW1lYCxcbl07XG4vKipcbiAqIEFuIGVycm9yIHRoYXQsIHdoZW4gdGhyb3duLCBpbmRpY2F0ZXMgaW50ZXJuYWxseSB0aGF0IGFuIG91dGdvaW5nIG9wZXJhdGlvblxuICogY29udGFpbnMgYW4gZXJyb3IuXG4gKlxuICogV2UgdXNlIHRoaXMgYmVjYXVzZSBzZXJpYWxpemVkIGBkYXRhYCBzZW50IGJhY2sgdG8gSW5uZ2VzdCBtYXkgZGlmZmVyIGZyb21cbiAqIHRoZSBlcnJvciBpbnN0YW5jZSBpdHNlbGYgZHVlIHRvIG1pZGRsZXdhcmUuXG4gKlxuICogQGludGVybmFsXG4gKi9cbmNsYXNzIE91dGdvaW5nUmVzdWx0RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IocmVzdWx0KSB7XG4gICAgICAgIHN1cGVyKFwiT3V0Z29pbmdPcEVycm9yXCIpO1xuICAgICAgICB0aGlzLnJlc3VsdCA9IHJlc3VsdDtcbiAgICB9XG59XG5leHBvcnRzLk91dGdvaW5nUmVzdWx0RXJyb3IgPSBPdXRnb2luZ1Jlc3VsdEVycm9yO1xuLyoqXG4gKiBDcmVhdGUgYSBmdW5jdGlvbiB0aGF0IHdpbGwgcmV0aHJvdyBhbiBlcnJvciB3aXRoIGEgcHJlZml4IGFkZGVkIHRvIHRoZVxuICogbWVzc2FnZS5cbiAqXG4gKiBVc2VmdWwgZm9yIGFkZGluZyBjb250ZXh0IHRvIGVycm9ycyB0aGF0IGFyZSByZXRocm93bi5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHNcbiAqIGF3YWl0IGRvU29tZUFjdGlvbigpLmNhdGNoKHJldGhyb3dFcnJvcihcIkZhaWxlZCB0byBkbyBzb21lIGFjdGlvblwiKSk7XG4gKiBgYGBcbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmNvbnN0IHJldGhyb3dFcnJvciA9IChwcmVmaXgpID0+IHtcbiAgICByZXR1cm4gKGVycikgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2VzcywgQHR5cGVzY3JpcHQtZXNsaW50L3Jlc3RyaWN0LXRlbXBsYXRlLWV4cHJlc3Npb25zXG4gICAgICAgICAgICBlcnIubWVzc2FnZSAmJiAoZXJyLm1lc3NhZ2UgPSBgJHtwcmVmaXh9OyAke2Vyci5tZXNzYWdlfWApO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChub29wRXJyKSB7XG4gICAgICAgICAgICAvLyBuby1vcFxuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuc2FmZS1maW5hbGx5XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICB9O1xufTtcbmV4cG9ydHMucmV0aHJvd0Vycm9yID0gcmV0aHJvd0Vycm9yO1xuLyoqXG4gKiBMZWdhY3kgdjAgZXhlY3V0aW9uIGVycm9yIGZvciBmdW5jdGlvbnMgdGhhdCBkb24ndCBzdXBwb3J0IG1peGluZyBzdGVwcyBhbmRcbiAqIHJlZ3VsYXIgYXN5bmMgYWN0aW9ucy5cbiAqL1xuY29uc3QgZnVuY3Rpb25TdG9wcGVkUnVubmluZ0VyciA9IChjb2RlKSA9PiB7XG4gICAgcmV0dXJuICgwLCBleHBvcnRzLnByZXR0eUVycm9yKSh7XG4gICAgICAgIHdoYXRIYXBwZW5lZDogXCJZb3VyIGZ1bmN0aW9uIHdhcyBzdG9wcGVkIGZyb20gcnVubmluZ1wiLFxuICAgICAgICB3aHk6IFwiV2UgZGV0ZWN0ZWQgYSBtaXggb2YgYXN5bmNocm9ub3VzIGxvZ2ljLCBzb21lIHVzaW5nIHN0ZXAgdG9vbGluZyBhbmQgc29tZSBub3QuXCIsXG4gICAgICAgIGNvbnNlcXVlbmNlczogXCJUaGlzIGNhbiBjYXVzZSB1bmV4cGVjdGVkIGJlaGF2aW91ciB3aGVuIGEgZnVuY3Rpb24gaXMgcGF1c2VkIGFuZCByZXN1bWVkIGFuZCBpcyB0aGVyZWZvcmUgc3Ryb25nbHkgZGlzY291cmFnZWQ7IHdlIHN0b3BwZWQgeW91ciBmdW5jdGlvbiB0byBlbnN1cmUgbm90aGluZyB1bmV4cGVjdGVkIGhhcHBlbmVkIVwiLFxuICAgICAgICBzdGFjazogdHJ1ZSxcbiAgICAgICAgdG9GaXhOb3c6IFwiRW5zdXJlIHRoYXQgeW91ciBmdW5jdGlvbiBpcyBlaXRoZXIgZW50aXJlbHkgc3RlcC1iYXNlZCBvciBlbnRpcmVseSBub24tc3RlcC1iYXNlZCwgYnkgZWl0aGVyIHdyYXBwaW5nIGFsbCBhc3luY2hyb25vdXMgbG9naWMgaW4gYHN0ZXAucnVuKClgIGNhbGxzIG9yIGJ5IHJlbW92aW5nIGFsbCBgc3RlcC4qKClgIGNhbGxzLlwiLFxuICAgICAgICBvdGhlcndpc2U6IFwiRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gd2h5IHN0ZXAgZnVuY3Rpb25zIHdvcmsgaW4gdGhpcyBtYW5uZXIsIHNlZSBodHRwczovL3d3dy5pbm5nZXN0LmNvbS9kb2NzL2Z1bmN0aW9ucy9tdWx0aS1zdGVwI2dvdGNoYXNcIixcbiAgICAgICAgY29kZSxcbiAgICB9KTtcbn07XG5leHBvcnRzLmZ1bmN0aW9uU3RvcHBlZFJ1bm5pbmdFcnIgPSBmdW5jdGlvblN0b3BwZWRSdW5uaW5nRXJyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3JzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/helpers/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/helpers/functions.js":
/*!***************************************************!*\
  !*** ./node_modules/inngest/helpers/functions.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.fetchAllFnData = exports.parseFnData = exports.undefinedToNull = exports.waterfall = exports.cacheFn = void 0;\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nconst schema_js_1 = __webpack_require__(/*! ../api/schema.js */ \"(rsc)/./node_modules/inngest/api/schema.js\");\nconst InngestExecution_js_1 = __webpack_require__(/*! ../components/execution/InngestExecution.js */ \"(rsc)/./node_modules/inngest/components/execution/InngestExecution.js\");\nconst types_js_1 = __webpack_require__(/*! ../types.js */ \"(rsc)/./node_modules/inngest/types.js\");\nconst errors_js_1 = __webpack_require__(/*! ./errors.js */ \"(rsc)/./node_modules/inngest/helpers/errors.js\");\n/**\n * Wraps a function with a cache. When the returned function is run, it will\n * cache the result and return it on subsequent calls.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst cacheFn = (fn) => {\n    const key = \"value\";\n    const cache = new Map();\n    return ((...args) => {\n        if (!cache.has(key)) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            cache.set(key, fn(...args));\n        }\n        return cache.get(key);\n    });\n};\nexports.cacheFn = cacheFn;\n/**\n * Given an array of functions, return a new function that will run each\n * function in series and return the result of the final function. Regardless of\n * if the functions are synchronous or asynchronous, they'll be made into an\n * async promise chain.\n *\n * If an error is thrown, the waterfall will stop and return the error.\n *\n * Because this needs to support both sync and async functions, it only allows\n * functions that accept a single argument.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst waterfall = (fns, \n/**\n * A function that transforms the result of each function in the waterfall,\n * ready for the next function.\n *\n * Will not be called on the final function.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntransform) => {\n    return (...args) => {\n        const chain = fns.reduce(async (acc, fn) => {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const prev = await acc;\n            const output = (await fn(prev));\n            if (transform) {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                return await transform(prev, output);\n            }\n            if (typeof output === \"undefined\") {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                return prev;\n            }\n            return output;\n        }, Promise.resolve(args[0]));\n        return chain;\n    };\n};\nexports.waterfall = waterfall;\n/**\n * Given a value `v`, return `v` if it's not undefined, otherwise return `null`.\n */\nconst undefinedToNull = (v) => {\n    const isUndefined = typeof v === \"undefined\";\n    return isUndefined ? null : v;\n};\nexports.undefinedToNull = undefinedToNull;\nconst fnDataVersionSchema = zod_1.z.object({\n    version: zod_1.z\n        .literal(-1)\n        .or(zod_1.z.literal(0))\n        .or(zod_1.z.literal(1))\n        .or(zod_1.z.literal(2))\n        .optional()\n        .transform((v) => {\n        if (typeof v === \"undefined\") {\n            console.debug(`No request version specified by executor; defaulting to v${InngestExecution_js_1.PREFERRED_EXECUTION_VERSION}`);\n            return InngestExecution_js_1.PREFERRED_EXECUTION_VERSION;\n        }\n        return v === -1 ? InngestExecution_js_1.PREFERRED_EXECUTION_VERSION : v;\n    }),\n});\nconst parseFnData = (data) => {\n    let version;\n    try {\n        ({ version } = fnDataVersionSchema.parse(data));\n        const versionHandlers = {\n            [InngestExecution_js_1.ExecutionVersion.V0]: () => (Object.assign({ version: InngestExecution_js_1.ExecutionVersion.V0 }, zod_1.z\n                .object({\n                event: zod_1.z.record(zod_1.z.any()),\n                events: zod_1.z.array(zod_1.z.record(zod_1.z.any())).default([]),\n                steps: schema_js_1.stepsSchemas[InngestExecution_js_1.ExecutionVersion.V0],\n                ctx: zod_1.z\n                    .object({\n                    run_id: zod_1.z.string(),\n                    attempt: zod_1.z.number().default(0),\n                    stack: zod_1.z\n                        .object({\n                        stack: zod_1.z\n                            .array(zod_1.z.string())\n                            .nullable()\n                            .transform((v) => (Array.isArray(v) ? v : [])),\n                        current: zod_1.z.number(),\n                    })\n                        .passthrough()\n                        .optional()\n                        .nullable(),\n                })\n                    .optional()\n                    .nullable(),\n                use_api: zod_1.z.boolean().default(false),\n            })\n                .parse(data))),\n            [InngestExecution_js_1.ExecutionVersion.V1]: () => (Object.assign({ version: InngestExecution_js_1.ExecutionVersion.V1 }, zod_1.z\n                .object({\n                event: zod_1.z.record(zod_1.z.any()),\n                events: zod_1.z.array(zod_1.z.record(zod_1.z.any())).default([]),\n                steps: schema_js_1.stepsSchemas[InngestExecution_js_1.ExecutionVersion.V1],\n                ctx: zod_1.z\n                    .object({\n                    run_id: zod_1.z.string(),\n                    attempt: zod_1.z.number().default(0),\n                    disable_immediate_execution: zod_1.z.boolean().default(false),\n                    use_api: zod_1.z.boolean().default(false),\n                    stack: zod_1.z\n                        .object({\n                        stack: zod_1.z\n                            .array(zod_1.z.string())\n                            .nullable()\n                            .transform((v) => (Array.isArray(v) ? v : [])),\n                        current: zod_1.z.number(),\n                    })\n                        .passthrough()\n                        .optional()\n                        .nullable(),\n                })\n                    .optional()\n                    .nullable(),\n            })\n                .parse(data))),\n            [InngestExecution_js_1.ExecutionVersion.V2]: () => (Object.assign({ version: InngestExecution_js_1.ExecutionVersion.V2 }, zod_1.z\n                .object({\n                event: zod_1.z.record(zod_1.z.any()),\n                events: zod_1.z.array(zod_1.z.record(zod_1.z.any())).default([]),\n                steps: schema_js_1.stepsSchemas[InngestExecution_js_1.ExecutionVersion.V2],\n                ctx: zod_1.z\n                    .object({\n                    run_id: zod_1.z.string(),\n                    attempt: zod_1.z.number().default(0),\n                    disable_immediate_execution: zod_1.z.boolean().default(false),\n                    use_api: zod_1.z.boolean().default(false),\n                    stack: zod_1.z\n                        .object({\n                        stack: zod_1.z\n                            .array(zod_1.z.string())\n                            .nullable()\n                            .transform((v) => (Array.isArray(v) ? v : [])),\n                        current: zod_1.z.number(),\n                    })\n                        .passthrough()\n                        .optional()\n                        .nullable(),\n                })\n                    .optional()\n                    .nullable(),\n            })\n                .parse(data))),\n        };\n        return versionHandlers[version]();\n    }\n    catch (err) {\n        throw new Error(parseFailureErr(err));\n    }\n};\nexports.parseFnData = parseFnData;\nconst fetchAllFnData = async ({ data, api, version, }) => {\n    var _a, _b, _c, _d;\n    const result = Object.assign({}, data);\n    try {\n        if ((result.version === InngestExecution_js_1.ExecutionVersion.V0 && result.use_api) ||\n            (result.version === InngestExecution_js_1.ExecutionVersion.V1 && ((_a = result.ctx) === null || _a === void 0 ? void 0 : _a.use_api))) {\n            if (!((_b = result.ctx) === null || _b === void 0 ? void 0 : _b.run_id)) {\n                return (0, types_js_1.err)((0, errors_js_1.prettyError)({\n                    whatHappened: \"failed to attempt retrieving data from API\",\n                    consequences: \"function execution can't continue\",\n                    why: \"run_id is missing from context\",\n                    stack: true,\n                }));\n            }\n            const [evtResp, stepResp] = await Promise.all([\n                api.getRunBatch(result.ctx.run_id),\n                api.getRunSteps(result.ctx.run_id, version),\n            ]);\n            if (evtResp.ok) {\n                result.events = evtResp.value;\n            }\n            else {\n                return (0, types_js_1.err)((0, errors_js_1.prettyError)({\n                    whatHappened: \"failed to retrieve list of events\",\n                    consequences: \"function execution can't continue\",\n                    why: (_c = evtResp.error) === null || _c === void 0 ? void 0 : _c.error,\n                    stack: true,\n                }));\n            }\n            if (stepResp.ok) {\n                result.steps = stepResp.value;\n            }\n            else {\n                return (0, types_js_1.err)((0, errors_js_1.prettyError)({\n                    whatHappened: \"failed to retrieve steps for function run\",\n                    consequences: \"function execution can't continue\",\n                    why: (_d = stepResp.error) === null || _d === void 0 ? void 0 : _d.error,\n                    stack: true,\n                }));\n            }\n        }\n        return (0, types_js_1.ok)(result);\n    }\n    catch (error) {\n        // print it out for now.\n        // move to something like protobuf so we don't have to deal with this\n        console.error(error);\n        return (0, types_js_1.err)(parseFailureErr(error));\n    }\n};\nexports.fetchAllFnData = fetchAllFnData;\nconst parseFailureErr = (err) => {\n    let why;\n    if (err instanceof zod_1.ZodError) {\n        why = err.toString();\n    }\n    return (0, errors_js_1.prettyError)({\n        whatHappened: \"Failed to parse data from executor.\",\n        consequences: \"Function execution can't continue.\",\n        toFixNow: \"Make sure that your API is set up to parse incoming request bodies as JSON, like body-parser for Express (https://expressjs.com/en/resources/middleware/body-parser.html).\",\n        stack: true,\n        why,\n    });\n};\n//# sourceMappingURL=functions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/helpers/functions.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/helpers/net.js":
/*!*********************************************!*\
  !*** ./node_modules/inngest/helpers/net.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.fetchWithAuthFallback = fetchWithAuthFallback;\nexports.signDataWithKey = signDataWithKey;\nconst canonicalize_1 = __importDefault(__webpack_require__(/*! canonicalize */ \"(rsc)/./node_modules/canonicalize/lib/canonicalize.js\"));\nconst hash_js_1 = __webpack_require__(/*! hash.js */ \"(rsc)/./node_modules/hash.js/lib/hash.js\");\n/**\n * Send an HTTP request with the given signing key. If the response is a 401 or\n * 403, then try again with the fallback signing key\n */\nasync function fetchWithAuthFallback({ authToken, authTokenFallback, fetch, options, url, }) {\n    let res = await fetch(url, Object.assign(Object.assign({}, options), { headers: Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.headers), { Authorization: `Bearer ${authToken}` }) }));\n    if ([401, 403].includes(res.status) && authTokenFallback) {\n        res = await fetch(url, Object.assign(Object.assign({}, options), { headers: Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.headers), { Authorization: `Bearer ${authTokenFallback}` }) }));\n    }\n    return res;\n}\nfunction signDataWithKey(data, signingKey, ts) {\n    // Calculate the HMAC of the request body ourselves.\n    // We make the assumption here that a stringified body is the same as the\n    // raw bytes; it may be pertinent in the future to always parse, then\n    // canonicalize the body to ensure it's consistent.\n    const encoded = typeof data === \"string\" ? data : (0, canonicalize_1.default)(data);\n    // Remove the `/signkey-[test|prod]-/` prefix from our signing key to calculate the HMAC.\n    const key = signingKey.replace(/signkey-\\w+-/, \"\");\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-explicit-any\n    const mac = (0, hash_js_1.hmac)(hash_js_1.sha256, key)\n        .update(encoded)\n        .update(ts)\n        .digest(\"hex\");\n    return mac;\n}\n//# sourceMappingURL=net.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9oZWxwZXJzL25ldC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDZCQUE2QjtBQUM3Qix1QkFBdUI7QUFDdkIsdUNBQXVDLG1CQUFPLENBQUMsMkVBQWM7QUFDN0Qsa0JBQWtCLG1CQUFPLENBQUMseURBQVM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsb0RBQW9EO0FBQzNGLDZEQUE2RCxjQUFjLHVDQUF1Qyx3RUFBd0UseUJBQXlCLFVBQVUsR0FBRyxHQUFHO0FBQ25PO0FBQ0EsNkRBQTZELGNBQWMsdUNBQXVDLHdFQUF3RSx5QkFBeUIsa0JBQWtCLEdBQUcsR0FBRztBQUMzTztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvaGFyc2hzaHJpdmFzdGF2L0Rlc2t0b3AvQ29kaW5nIFByb2plY3RzL0pvYi1Bc3Npc3RhbnQtQWdlbnQvbm9kZV9tb2R1bGVzL2lubmdlc3QvaGVscGVycy9uZXQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmZldGNoV2l0aEF1dGhGYWxsYmFjayA9IGZldGNoV2l0aEF1dGhGYWxsYmFjaztcbmV4cG9ydHMuc2lnbkRhdGFXaXRoS2V5ID0gc2lnbkRhdGFXaXRoS2V5O1xuY29uc3QgY2Fub25pY2FsaXplXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImNhbm9uaWNhbGl6ZVwiKSk7XG5jb25zdCBoYXNoX2pzXzEgPSByZXF1aXJlKFwiaGFzaC5qc1wiKTtcbi8qKlxuICogU2VuZCBhbiBIVFRQIHJlcXVlc3Qgd2l0aCB0aGUgZ2l2ZW4gc2lnbmluZyBrZXkuIElmIHRoZSByZXNwb25zZSBpcyBhIDQwMSBvclxuICogNDAzLCB0aGVuIHRyeSBhZ2FpbiB3aXRoIHRoZSBmYWxsYmFjayBzaWduaW5nIGtleVxuICovXG5hc3luYyBmdW5jdGlvbiBmZXRjaFdpdGhBdXRoRmFsbGJhY2soeyBhdXRoVG9rZW4sIGF1dGhUb2tlbkZhbGxiYWNrLCBmZXRjaCwgb3B0aW9ucywgdXJsLCB9KSB7XG4gICAgbGV0IHJlcyA9IGF3YWl0IGZldGNoKHVybCwgT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKSwgeyBoZWFkZXJzOiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5oZWFkZXJzKSwgeyBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7YXV0aFRva2VufWAgfSkgfSkpO1xuICAgIGlmIChbNDAxLCA0MDNdLmluY2x1ZGVzKHJlcy5zdGF0dXMpICYmIGF1dGhUb2tlbkZhbGxiYWNrKSB7XG4gICAgICAgIHJlcyA9IGF3YWl0IGZldGNoKHVybCwgT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKSwgeyBoZWFkZXJzOiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5oZWFkZXJzKSwgeyBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7YXV0aFRva2VuRmFsbGJhY2t9YCB9KSB9KSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5mdW5jdGlvbiBzaWduRGF0YVdpdGhLZXkoZGF0YSwgc2lnbmluZ0tleSwgdHMpIHtcbiAgICAvLyBDYWxjdWxhdGUgdGhlIEhNQUMgb2YgdGhlIHJlcXVlc3QgYm9keSBvdXJzZWx2ZXMuXG4gICAgLy8gV2UgbWFrZSB0aGUgYXNzdW1wdGlvbiBoZXJlIHRoYXQgYSBzdHJpbmdpZmllZCBib2R5IGlzIHRoZSBzYW1lIGFzIHRoZVxuICAgIC8vIHJhdyBieXRlczsgaXQgbWF5IGJlIHBlcnRpbmVudCBpbiB0aGUgZnV0dXJlIHRvIGFsd2F5cyBwYXJzZSwgdGhlblxuICAgIC8vIGNhbm9uaWNhbGl6ZSB0aGUgYm9keSB0byBlbnN1cmUgaXQncyBjb25zaXN0ZW50LlxuICAgIGNvbnN0IGVuY29kZWQgPSB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiA/IGRhdGEgOiAoMCwgY2Fub25pY2FsaXplXzEuZGVmYXVsdCkoZGF0YSk7XG4gICAgLy8gUmVtb3ZlIHRoZSBgL3NpZ25rZXktW3Rlc3R8cHJvZF0tL2AgcHJlZml4IGZyb20gb3VyIHNpZ25pbmcga2V5IHRvIGNhbGN1bGF0ZSB0aGUgSE1BQy5cbiAgICBjb25zdCBrZXkgPSBzaWduaW5nS2V5LnJlcGxhY2UoL3NpZ25rZXktXFx3Ky0vLCBcIlwiKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1hcmd1bWVudCwgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGNvbnN0IG1hYyA9ICgwLCBoYXNoX2pzXzEuaG1hYykoaGFzaF9qc18xLnNoYTI1Niwga2V5KVxuICAgICAgICAudXBkYXRlKGVuY29kZWQpXG4gICAgICAgIC51cGRhdGUodHMpXG4gICAgICAgIC5kaWdlc3QoXCJoZXhcIik7XG4gICAgcmV0dXJuIG1hYztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5ldC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/helpers/net.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/helpers/promises.js":
/*!**************************************************!*\
  !*** ./node_modules/inngest/helpers/promises.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("\nvar __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }\nvar __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n    function fulfill(value) { resume(\"next\", value); }\n    function reject(value) { resume(\"throw\", value); }\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.retryWithBackoff = exports.resolveNextTick = exports.runAsPromise = exports.createTimeoutPromise = exports.createDeferredPromiseWithStack = exports.createDeferredPromise = exports.resolveAfterPending = exports.createFrozenPromise = void 0;\n/**\n * Some environments don't allow access to the global queueMicrotask(). While we\n * had assumed this was only true for those powered by earlier versions of Node\n * (<14) that we don't officially support, Vercel's Edge Functions also obscure\n * the function in dev, even though the platform it's based on (Cloudflare\n * Workers) appropriately exposes it. Even worse, production Vercel Edge\n * Functions can see the function, but it immediately blows up the function when\n * used.\n *\n * Therefore, we can fall back to a reasonable alternative of\n * `Promise.resolve().then(fn)` instead. This _may_ be slightly slower in modern\n * environments, but at least we can still work in these environments.\n */\nconst shimQueueMicrotask = (callback) => {\n    void Promise.resolve().then(callback);\n};\n/**\n * A helper function to create a `Promise` that will never settle.\n *\n * It purposefully creates no references to `resolve` or `reject` so that the\n * returned `Promise` will remain unsettled until it falls out of scope and is\n * garbage collected.\n *\n * This should be used within transient closures to fake asynchronous action, so\n * long as it's guaranteed that they will fall out of scope.\n */\nconst createFrozenPromise = () => {\n    return new Promise(() => undefined);\n};\nexports.createFrozenPromise = createFrozenPromise;\n/**\n * Returns a Promise that resolves after the current event loop's microtasks\n * have finished, but before the next event loop tick.\n */\nconst resolveAfterPending = (count = 100) => {\n    /**\n     * This uses a brute force implementation that will continue to enqueue\n     * microtasks 10 times before resolving. This is to ensure that the microtask\n     * queue is drained, even if the microtask queue is being manipulated by other\n     * code.\n     *\n     * While this still doesn't guarantee that the microtask queue is drained,\n     * it's our best bet for giving other non-controlled promises a chance to\n     * resolve before we continue without resorting to falling in to the next\n     * tick.\n     */\n    return new Promise((resolve) => {\n        let i = 0;\n        const iterate = () => {\n            shimQueueMicrotask(() => {\n                if (i++ > count) {\n                    return resolve();\n                }\n                iterate();\n            });\n        };\n        iterate();\n    });\n};\nexports.resolveAfterPending = resolveAfterPending;\n/**\n * Creates and returns Promise that can be resolved or rejected with the\n * returned `resolve` and `reject` functions.\n *\n * Resolving or rejecting the function will return a new set of Promise control\n * functions. These can be ignored if the original Promise is all that's needed.\n */\nconst createDeferredPromise = () => {\n    let resolve;\n    let reject;\n    const promise = new Promise((_resolve, _reject) => {\n        resolve = (value) => {\n            _resolve(value);\n            return (0, exports.createDeferredPromise)();\n        };\n        reject = (reason) => {\n            _reject(reason);\n            return (0, exports.createDeferredPromise)();\n        };\n    });\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return { promise, resolve: resolve, reject: reject };\n};\nexports.createDeferredPromise = createDeferredPromise;\n/**\n * Creates and returns a deferred Promise that can be resolved or rejected with\n * the returned `resolve` and `reject` functions.\n *\n * For each Promise resolved or rejected this way, this will also keep a stack\n * of all unhandled Promises, resolved or rejected.\n *\n * Once a Promise is read, it is removed from the stack.\n */\nconst createDeferredPromiseWithStack = () => {\n    const settledPromises = [];\n    let rotateQueue = () => { };\n    const results = (function () {\n        return __asyncGenerator(this, arguments, function* () {\n            while (true) {\n                const next = settledPromises.shift();\n                if (next) {\n                    yield yield __await(next);\n                }\n                else {\n                    yield __await(new Promise((resolve) => {\n                        rotateQueue = resolve;\n                    }));\n                }\n            }\n        });\n    })();\n    const shimDeferredPromise = (deferred) => {\n        const originalResolve = deferred.resolve;\n        const originalReject = deferred.reject;\n        deferred.resolve = (value) => {\n            settledPromises.push(deferred.promise);\n            rotateQueue();\n            return shimDeferredPromise(originalResolve(value));\n        };\n        deferred.reject = (reason) => {\n            settledPromises.push(deferred.promise);\n            rotateQueue();\n            return shimDeferredPromise(originalReject(reason));\n        };\n        return deferred;\n    };\n    const deferred = shimDeferredPromise((0, exports.createDeferredPromise)());\n    return { deferred, results };\n};\nexports.createDeferredPromiseWithStack = createDeferredPromiseWithStack;\n/**\n * Creates a Promise that will resolve after the given duration, along with\n * methods to start, clear, and reset the timeout.\n */\nconst createTimeoutPromise = (duration) => {\n    const { promise, resolve } = (0, exports.createDeferredPromise)();\n    let timeout;\n    // eslint-disable-next-line prefer-const\n    let ret;\n    const start = () => {\n        if (timeout)\n            return ret;\n        timeout = setTimeout(() => {\n            resolve();\n        }, duration);\n        return ret;\n    };\n    const clear = () => {\n        clearTimeout(timeout);\n        timeout = undefined;\n    };\n    const reset = () => {\n        clear();\n        return start();\n    };\n    ret = Object.assign(promise, { start, clear, reset });\n    return ret;\n};\nexports.createTimeoutPromise = createTimeoutPromise;\n/**\n * Take any function and safely promisify such that both synchronous and\n * asynchronous errors are caught and returned as a rejected Promise.\n *\n * The passed `fn` can be undefined to support functions that may conditionally\n * be defined.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst runAsPromise = (fn\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n) => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return Promise.resolve().then(fn);\n};\nexports.runAsPromise = runAsPromise;\n/**\n * Returns a Promise that resolve after the current event loop tick.\n */\nconst resolveNextTick = () => {\n    return new Promise((resolve) => setTimeout(resolve));\n};\nexports.resolveNextTick = resolveNextTick;\nconst retryWithBackoff = async (fn, opts) => {\n    var _a;\n    const maxAttempts = (opts === null || opts === void 0 ? void 0 : opts.maxAttempts) || 5;\n    const baseDelay = (_a = opts === null || opts === void 0 ? void 0 : opts.baseDelay) !== null && _a !== void 0 ? _a : 100;\n    for (let attempt = 1; attempt <= maxAttempts; attempt++) {\n        try {\n            return await fn();\n        }\n        catch (err) {\n            if (attempt >= maxAttempts) {\n                throw err;\n            }\n            const jitter = Math.random() * baseDelay;\n            const delay = baseDelay * Math.pow(2, attempt - 1) + jitter;\n            await new Promise((resolve) => setTimeout(resolve, delay));\n        }\n    }\n    throw new Error(\"Max retries reached; this should be unreachable.\");\n};\nexports.retryWithBackoff = retryWithBackoff;\n//# sourceMappingURL=promises.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/helpers/promises.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/helpers/stream.js":
/*!************************************************!*\
  !*** ./node_modules/inngest/helpers/stream.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createStream = void 0;\nconst strings_js_1 = __webpack_require__(/*! ./strings.js */ \"(rsc)/./node_modules/inngest/helpers/strings.js\");\n/**\n * Creates a {@link ReadableStream} that sends a `value` every `interval`\n * milliseconds as a heartbeat, intended to keep a stream open.\n *\n * Returns the `stream` itself and a `finalize` function that can be used to\n * close the stream and send a final value.\n */\nconst createStream = (opts) => {\n    var _a, _b;\n    /**\n     * We need to resolve this promise with both the stream and the `finalize`\n     * function, but having them both instantiated synchronously is difficult, as\n     * we need access to the stream's internals too.\n     *\n     * We create this cheeky deferred promise to grab the internal `finalize`\n     * value. Be warned that simpler solutions may appear to compile, but fail at\n     * runtime due to variables not being assigned; make sure to test your code!\n     */\n    let passFinalize;\n    const finalizeP = new Promise((resolve) => {\n        passFinalize = resolve;\n    });\n    const interval = (_a = opts === null || opts === void 0 ? void 0 : opts.interval) !== null && _a !== void 0 ? _a : 3000;\n    const value = (_b = opts === null || opts === void 0 ? void 0 : opts.value) !== null && _b !== void 0 ? _b : \" \";\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises, no-async-promise-executor\n    return new Promise(async (resolve, reject) => {\n        try {\n            const stream = new ReadableStream({\n                start(controller) {\n                    const encoder = new TextEncoder();\n                    const heartbeat = setInterval(() => {\n                        controller.enqueue(encoder.encode(value));\n                    }, interval);\n                    const finalize = (data) => {\n                        clearInterval(heartbeat);\n                        // `data` may be a `Promise`. If it is, we need to wait for it to\n                        // resolve before sending it. To support this elegantly we'll always\n                        // assume it's a promise and handle that case.\n                        void Promise.resolve(data).then((resolvedData) => {\n                            controller.enqueue(encoder.encode((0, strings_js_1.stringify)(resolvedData)));\n                            controller.close();\n                        });\n                    };\n                    passFinalize(finalize);\n                },\n            });\n            resolve({ stream, finalize: await finalizeP });\n        }\n        catch (err) {\n            reject(err);\n        }\n    });\n};\nexports.createStream = createStream;\n//# sourceMappingURL=stream.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9oZWxwZXJzL3N0cmVhbS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0I7QUFDcEIscUJBQXFCLG1CQUFPLENBQUMscUVBQWM7QUFDM0M7QUFDQSxjQUFjLHNCQUFzQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9EO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2Isc0JBQXNCLG1DQUFtQztBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLG9CQUFvQjtBQUNwQiIsInNvdXJjZXMiOlsiL1VzZXJzL2hhcnNoc2hyaXZhc3Rhdi9EZXNrdG9wL0NvZGluZyBQcm9qZWN0cy9Kb2ItQXNzaXN0YW50LUFnZW50L25vZGVfbW9kdWxlcy9pbm5nZXN0L2hlbHBlcnMvc3RyZWFtLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jcmVhdGVTdHJlYW0gPSB2b2lkIDA7XG5jb25zdCBzdHJpbmdzX2pzXzEgPSByZXF1aXJlKFwiLi9zdHJpbmdzLmpzXCIpO1xuLyoqXG4gKiBDcmVhdGVzIGEge0BsaW5rIFJlYWRhYmxlU3RyZWFtfSB0aGF0IHNlbmRzIGEgYHZhbHVlYCBldmVyeSBgaW50ZXJ2YWxgXG4gKiBtaWxsaXNlY29uZHMgYXMgYSBoZWFydGJlYXQsIGludGVuZGVkIHRvIGtlZXAgYSBzdHJlYW0gb3Blbi5cbiAqXG4gKiBSZXR1cm5zIHRoZSBgc3RyZWFtYCBpdHNlbGYgYW5kIGEgYGZpbmFsaXplYCBmdW5jdGlvbiB0aGF0IGNhbiBiZSB1c2VkIHRvXG4gKiBjbG9zZSB0aGUgc3RyZWFtIGFuZCBzZW5kIGEgZmluYWwgdmFsdWUuXG4gKi9cbmNvbnN0IGNyZWF0ZVN0cmVhbSA9IChvcHRzKSA9PiB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICAvKipcbiAgICAgKiBXZSBuZWVkIHRvIHJlc29sdmUgdGhpcyBwcm9taXNlIHdpdGggYm90aCB0aGUgc3RyZWFtIGFuZCB0aGUgYGZpbmFsaXplYFxuICAgICAqIGZ1bmN0aW9uLCBidXQgaGF2aW5nIHRoZW0gYm90aCBpbnN0YW50aWF0ZWQgc3luY2hyb25vdXNseSBpcyBkaWZmaWN1bHQsIGFzXG4gICAgICogd2UgbmVlZCBhY2Nlc3MgdG8gdGhlIHN0cmVhbSdzIGludGVybmFscyB0b28uXG4gICAgICpcbiAgICAgKiBXZSBjcmVhdGUgdGhpcyBjaGVla3kgZGVmZXJyZWQgcHJvbWlzZSB0byBncmFiIHRoZSBpbnRlcm5hbCBgZmluYWxpemVgXG4gICAgICogdmFsdWUuIEJlIHdhcm5lZCB0aGF0IHNpbXBsZXIgc29sdXRpb25zIG1heSBhcHBlYXIgdG8gY29tcGlsZSwgYnV0IGZhaWwgYXRcbiAgICAgKiBydW50aW1lIGR1ZSB0byB2YXJpYWJsZXMgbm90IGJlaW5nIGFzc2lnbmVkOyBtYWtlIHN1cmUgdG8gdGVzdCB5b3VyIGNvZGUhXG4gICAgICovXG4gICAgbGV0IHBhc3NGaW5hbGl6ZTtcbiAgICBjb25zdCBmaW5hbGl6ZVAgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICBwYXNzRmluYWxpemUgPSByZXNvbHZlO1xuICAgIH0pO1xuICAgIGNvbnN0IGludGVydmFsID0gKF9hID0gb3B0cyA9PT0gbnVsbCB8fCBvcHRzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRzLmludGVydmFsKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAzMDAwO1xuICAgIGNvbnN0IHZhbHVlID0gKF9iID0gb3B0cyA9PT0gbnVsbCB8fCBvcHRzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRzLnZhbHVlKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBcIiBcIjtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW1pc3VzZWQtcHJvbWlzZXMsIG5vLWFzeW5jLXByb21pc2UtZXhlY3V0b3JcbiAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3Qgc3RyZWFtID0gbmV3IFJlYWRhYmxlU3RyZWFtKHtcbiAgICAgICAgICAgICAgICBzdGFydChjb250cm9sbGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVuY29kZXIgPSBuZXcgVGV4dEVuY29kZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaGVhcnRiZWF0ID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKGVuY29kZXIuZW5jb2RlKHZhbHVlKSk7XG4gICAgICAgICAgICAgICAgICAgIH0sIGludGVydmFsKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmluYWxpemUgPSAoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChoZWFydGJlYXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYGRhdGFgIG1heSBiZSBhIGBQcm9taXNlYC4gSWYgaXQgaXMsIHdlIG5lZWQgdG8gd2FpdCBmb3IgaXQgdG9cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlc29sdmUgYmVmb3JlIHNlbmRpbmcgaXQuIFRvIHN1cHBvcnQgdGhpcyBlbGVnYW50bHkgd2UnbGwgYWx3YXlzXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhc3N1bWUgaXQncyBhIHByb21pc2UgYW5kIGhhbmRsZSB0aGF0IGNhc2UuXG4gICAgICAgICAgICAgICAgICAgICAgICB2b2lkIFByb21pc2UucmVzb2x2ZShkYXRhKS50aGVuKChyZXNvbHZlZERhdGEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoZW5jb2Rlci5lbmNvZGUoKDAsIHN0cmluZ3NfanNfMS5zdHJpbmdpZnkpKHJlc29sdmVkRGF0YSkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgcGFzc0ZpbmFsaXplKGZpbmFsaXplKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXNvbHZlKHsgc3RyZWFtLCBmaW5hbGl6ZTogYXdhaXQgZmluYWxpemVQIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuZXhwb3J0cy5jcmVhdGVTdHJlYW0gPSBjcmVhdGVTdHJlYW07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdHJlYW0uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/helpers/stream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/helpers/strings.js":
/*!*************************************************!*\
  !*** ./node_modules/inngest/helpers/strings.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.hashSigningKey = exports.hashEventKey = exports.stringifyUnknown = exports.timeStr = exports.slugify = exports.stringify = void 0;\nconst hash_js_1 = __webpack_require__(/*! hash.js */ \"(rsc)/./node_modules/hash.js/lib/hash.js\");\nconst json_stringify_safe_1 = __importDefault(__webpack_require__(/*! json-stringify-safe */ \"(rsc)/./node_modules/json-stringify-safe/stringify.js\"));\nconst ms_1 = __importDefault(__webpack_require__(/*! ms */ \"(rsc)/./node_modules/ms/index.js\"));\n/**\n * Safely `JSON.stringify()` an `input`, handling circular refernences and\n * removing `BigInt` values.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst stringify = (input) => {\n    return (0, json_stringify_safe_1.default)(input, (key, value) => {\n        if (typeof value !== \"bigint\") {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n            return value;\n        }\n    });\n};\nexports.stringify = stringify;\n/**\n * Returns a slugified string used to generate consistent IDs.\n *\n * This can be used to generate a consistent ID for a function when migrating\n * from v2 to v3 of the SDK.\n *\n * @public\n */\nconst slugify = (str) => {\n    const join = \"-\";\n    return str\n        .toLowerCase()\n        .replace(/[^a-z0-9-]+/g, join)\n        .replace(/-+/g, join)\n        .split(join)\n        .filter(Boolean)\n        .join(join);\n};\nexports.slugify = slugify;\nconst millisecond = 1;\nconst second = millisecond * 1000;\nconst minute = second * 60;\nconst hour = minute * 60;\nconst day = hour * 24;\nconst week = day * 7;\n/**\n * A collection of periods in milliseconds and their suffixes used when creating\n * time strings.\n */\nconst periods = [\n    [\"w\", week],\n    [\"d\", day],\n    [\"h\", hour],\n    [\"m\", minute],\n    [\"s\", second],\n];\n/**\n * Convert a given `Date`, `number`, or `ms`-compatible `string` to a\n * Inngest sleep-compatible time string (e.g. `\"1d\"` or `\"2h3010s\"`).\n *\n * Can optionally provide a `now` date to use as the base for the calculation,\n * otherwise a new date will be created on invocation.\n */\nconst timeStr = (\n/**\n * The future date to use to convert to a time string.\n */\ninput) => {\n    if (input instanceof Date) {\n        return input.toISOString();\n    }\n    const milliseconds = typeof input === \"string\" ? (0, ms_1.default)(input) : input;\n    const [, timeStr] = periods.reduce(([num, str], [suffix, period]) => {\n        const numPeriods = Math.floor(num / period);\n        if (numPeriods > 0) {\n            return [num % period, `${str}${numPeriods}${suffix}`];\n        }\n        return [num, str];\n    }, [milliseconds, \"\"]);\n    return timeStr;\n};\nexports.timeStr = timeStr;\n/**\n * Given an unknown input, stringify it if it's a boolean, a number, or a\n * string, else return `undefined`.\n */\nconst stringifyUnknown = (input) => {\n    if (typeof input === \"boolean\" ||\n        typeof input === \"number\" ||\n        typeof input === \"string\") {\n        return input.toString();\n    }\n};\nexports.stringifyUnknown = stringifyUnknown;\nconst hashEventKey = (eventKey) => {\n    return (0, hash_js_1.sha256)().update(eventKey).digest(\"hex\");\n};\nexports.hashEventKey = hashEventKey;\nconst hashSigningKey = (signingKey) => {\n    var _a;\n    if (!signingKey) {\n        return \"\";\n    }\n    const prefix = ((_a = signingKey.match(/^signkey-[\\w]+-/)) === null || _a === void 0 ? void 0 : _a.shift()) || \"\";\n    const key = signingKey.replace(/^signkey-[\\w]+-/, \"\");\n    // Decode the key from its hex representation into a bytestream\n    return `${prefix}${(0, hash_js_1.sha256)().update(key, \"hex\").digest(\"hex\")}`;\n};\nexports.hashSigningKey = hashSigningKey;\n//# sourceMappingURL=strings.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9oZWxwZXJzL3N0cmluZ3MuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0IsR0FBRyxvQkFBb0IsR0FBRyx3QkFBd0IsR0FBRyxlQUFlLEdBQUcsZUFBZSxHQUFHLGlCQUFpQjtBQUNoSSxrQkFBa0IsbUJBQU8sQ0FBQyx5REFBUztBQUNuQyw4Q0FBOEMsbUJBQU8sQ0FBQyxrRkFBcUI7QUFDM0UsNkJBQTZCLG1CQUFPLENBQUMsNENBQUk7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLElBQUksRUFBRSxXQUFXLEVBQUUsT0FBTztBQUMvRDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsT0FBTyxFQUFFLHlEQUF5RDtBQUNoRjtBQUNBLHNCQUFzQjtBQUN0QiIsInNvdXJjZXMiOlsiL1VzZXJzL2hhcnNoc2hyaXZhc3Rhdi9EZXNrdG9wL0NvZGluZyBQcm9qZWN0cy9Kb2ItQXNzaXN0YW50LUFnZW50L25vZGVfbW9kdWxlcy9pbm5nZXN0L2hlbHBlcnMvc3RyaW5ncy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaGFzaFNpZ25pbmdLZXkgPSBleHBvcnRzLmhhc2hFdmVudEtleSA9IGV4cG9ydHMuc3RyaW5naWZ5VW5rbm93biA9IGV4cG9ydHMudGltZVN0ciA9IGV4cG9ydHMuc2x1Z2lmeSA9IGV4cG9ydHMuc3RyaW5naWZ5ID0gdm9pZCAwO1xuY29uc3QgaGFzaF9qc18xID0gcmVxdWlyZShcImhhc2guanNcIik7XG5jb25zdCBqc29uX3N0cmluZ2lmeV9zYWZlXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImpzb24tc3RyaW5naWZ5LXNhZmVcIikpO1xuY29uc3QgbXNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwibXNcIikpO1xuLyoqXG4gKiBTYWZlbHkgYEpTT04uc3RyaW5naWZ5KClgIGFuIGBpbnB1dGAsIGhhbmRsaW5nIGNpcmN1bGFyIHJlZmVybmVuY2VzIGFuZFxuICogcmVtb3ZpbmcgYEJpZ0ludGAgdmFsdWVzLlxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuY29uc3Qgc3RyaW5naWZ5ID0gKGlucHV0KSA9PiB7XG4gICAgcmV0dXJuICgwLCBqc29uX3N0cmluZ2lmeV9zYWZlXzEuZGVmYXVsdCkoaW5wdXQsIChrZXksIHZhbHVlKSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiYmlnaW50XCIpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLXJldHVyblxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuZXhwb3J0cy5zdHJpbmdpZnkgPSBzdHJpbmdpZnk7XG4vKipcbiAqIFJldHVybnMgYSBzbHVnaWZpZWQgc3RyaW5nIHVzZWQgdG8gZ2VuZXJhdGUgY29uc2lzdGVudCBJRHMuXG4gKlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBnZW5lcmF0ZSBhIGNvbnNpc3RlbnQgSUQgZm9yIGEgZnVuY3Rpb24gd2hlbiBtaWdyYXRpbmdcbiAqIGZyb20gdjIgdG8gdjMgb2YgdGhlIFNESy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmNvbnN0IHNsdWdpZnkgPSAoc3RyKSA9PiB7XG4gICAgY29uc3Qgam9pbiA9IFwiLVwiO1xuICAgIHJldHVybiBzdHJcbiAgICAgICAgLnRvTG93ZXJDYXNlKClcbiAgICAgICAgLnJlcGxhY2UoL1teYS16MC05LV0rL2csIGpvaW4pXG4gICAgICAgIC5yZXBsYWNlKC8tKy9nLCBqb2luKVxuICAgICAgICAuc3BsaXQoam9pbilcbiAgICAgICAgLmZpbHRlcihCb29sZWFuKVxuICAgICAgICAuam9pbihqb2luKTtcbn07XG5leHBvcnRzLnNsdWdpZnkgPSBzbHVnaWZ5O1xuY29uc3QgbWlsbGlzZWNvbmQgPSAxO1xuY29uc3Qgc2Vjb25kID0gbWlsbGlzZWNvbmQgKiAxMDAwO1xuY29uc3QgbWludXRlID0gc2Vjb25kICogNjA7XG5jb25zdCBob3VyID0gbWludXRlICogNjA7XG5jb25zdCBkYXkgPSBob3VyICogMjQ7XG5jb25zdCB3ZWVrID0gZGF5ICogNztcbi8qKlxuICogQSBjb2xsZWN0aW9uIG9mIHBlcmlvZHMgaW4gbWlsbGlzZWNvbmRzIGFuZCB0aGVpciBzdWZmaXhlcyB1c2VkIHdoZW4gY3JlYXRpbmdcbiAqIHRpbWUgc3RyaW5ncy5cbiAqL1xuY29uc3QgcGVyaW9kcyA9IFtcbiAgICBbXCJ3XCIsIHdlZWtdLFxuICAgIFtcImRcIiwgZGF5XSxcbiAgICBbXCJoXCIsIGhvdXJdLFxuICAgIFtcIm1cIiwgbWludXRlXSxcbiAgICBbXCJzXCIsIHNlY29uZF0sXG5dO1xuLyoqXG4gKiBDb252ZXJ0IGEgZ2l2ZW4gYERhdGVgLCBgbnVtYmVyYCwgb3IgYG1zYC1jb21wYXRpYmxlIGBzdHJpbmdgIHRvIGFcbiAqIElubmdlc3Qgc2xlZXAtY29tcGF0aWJsZSB0aW1lIHN0cmluZyAoZS5nLiBgXCIxZFwiYCBvciBgXCIyaDMwMTBzXCJgKS5cbiAqXG4gKiBDYW4gb3B0aW9uYWxseSBwcm92aWRlIGEgYG5vd2AgZGF0ZSB0byB1c2UgYXMgdGhlIGJhc2UgZm9yIHRoZSBjYWxjdWxhdGlvbixcbiAqIG90aGVyd2lzZSBhIG5ldyBkYXRlIHdpbGwgYmUgY3JlYXRlZCBvbiBpbnZvY2F0aW9uLlxuICovXG5jb25zdCB0aW1lU3RyID0gKFxuLyoqXG4gKiBUaGUgZnV0dXJlIGRhdGUgdG8gdXNlIHRvIGNvbnZlcnQgdG8gYSB0aW1lIHN0cmluZy5cbiAqL1xuaW5wdXQpID0+IHtcbiAgICBpZiAoaW5wdXQgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgIHJldHVybiBpbnB1dC50b0lTT1N0cmluZygpO1xuICAgIH1cbiAgICBjb25zdCBtaWxsaXNlY29uZHMgPSB0eXBlb2YgaW5wdXQgPT09IFwic3RyaW5nXCIgPyAoMCwgbXNfMS5kZWZhdWx0KShpbnB1dCkgOiBpbnB1dDtcbiAgICBjb25zdCBbLCB0aW1lU3RyXSA9IHBlcmlvZHMucmVkdWNlKChbbnVtLCBzdHJdLCBbc3VmZml4LCBwZXJpb2RdKSA9PiB7XG4gICAgICAgIGNvbnN0IG51bVBlcmlvZHMgPSBNYXRoLmZsb29yKG51bSAvIHBlcmlvZCk7XG4gICAgICAgIGlmIChudW1QZXJpb2RzID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIFtudW0gJSBwZXJpb2QsIGAke3N0cn0ke251bVBlcmlvZHN9JHtzdWZmaXh9YF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtudW0sIHN0cl07XG4gICAgfSwgW21pbGxpc2Vjb25kcywgXCJcIl0pO1xuICAgIHJldHVybiB0aW1lU3RyO1xufTtcbmV4cG9ydHMudGltZVN0ciA9IHRpbWVTdHI7XG4vKipcbiAqIEdpdmVuIGFuIHVua25vd24gaW5wdXQsIHN0cmluZ2lmeSBpdCBpZiBpdCdzIGEgYm9vbGVhbiwgYSBudW1iZXIsIG9yIGFcbiAqIHN0cmluZywgZWxzZSByZXR1cm4gYHVuZGVmaW5lZGAuXG4gKi9cbmNvbnN0IHN0cmluZ2lmeVVua25vd24gPSAoaW5wdXQpID0+IHtcbiAgICBpZiAodHlwZW9mIGlucHV0ID09PSBcImJvb2xlYW5cIiB8fFxuICAgICAgICB0eXBlb2YgaW5wdXQgPT09IFwibnVtYmVyXCIgfHxcbiAgICAgICAgdHlwZW9mIGlucHV0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiBpbnB1dC50b1N0cmluZygpO1xuICAgIH1cbn07XG5leHBvcnRzLnN0cmluZ2lmeVVua25vd24gPSBzdHJpbmdpZnlVbmtub3duO1xuY29uc3QgaGFzaEV2ZW50S2V5ID0gKGV2ZW50S2V5KSA9PiB7XG4gICAgcmV0dXJuICgwLCBoYXNoX2pzXzEuc2hhMjU2KSgpLnVwZGF0ZShldmVudEtleSkuZGlnZXN0KFwiaGV4XCIpO1xufTtcbmV4cG9ydHMuaGFzaEV2ZW50S2V5ID0gaGFzaEV2ZW50S2V5O1xuY29uc3QgaGFzaFNpZ25pbmdLZXkgPSAoc2lnbmluZ0tleSkgPT4ge1xuICAgIHZhciBfYTtcbiAgICBpZiAoIXNpZ25pbmdLZXkpIHtcbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxuICAgIGNvbnN0IHByZWZpeCA9ICgoX2EgPSBzaWduaW5nS2V5Lm1hdGNoKC9ec2lnbmtleS1bXFx3XSstLykpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zaGlmdCgpKSB8fCBcIlwiO1xuICAgIGNvbnN0IGtleSA9IHNpZ25pbmdLZXkucmVwbGFjZSgvXnNpZ25rZXktW1xcd10rLS8sIFwiXCIpO1xuICAgIC8vIERlY29kZSB0aGUga2V5IGZyb20gaXRzIGhleCByZXByZXNlbnRhdGlvbiBpbnRvIGEgYnl0ZXN0cmVhbVxuICAgIHJldHVybiBgJHtwcmVmaXh9JHsoMCwgaGFzaF9qc18xLnNoYTI1NikoKS51cGRhdGUoa2V5LCBcImhleFwiKS5kaWdlc3QoXCJoZXhcIil9YDtcbn07XG5leHBvcnRzLmhhc2hTaWduaW5nS2V5ID0gaGFzaFNpZ25pbmdLZXk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdHJpbmdzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/helpers/strings.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/helpers/temporal.js":
/*!**************************************************!*\
  !*** ./node_modules/inngest/helpers/temporal.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getISOString = exports.isTemporalZonedDateTime = exports.isTemporalInstant = exports.isTemporalDuration = void 0;\n/**\n * Asserts that the given `input` is a `Temporal.Duration` object.\n */\nconst isTemporalDuration = (\n/**\n * The input to check.\n */\ninput) => {\n    try {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n        return input[Symbol.toStringTag] === \"Temporal.Duration\";\n    }\n    catch (_a) {\n        return false;\n    }\n};\nexports.isTemporalDuration = isTemporalDuration;\n/**\n * Asserts that the given `input` is a `Temporal.TimeZone` object.\n */\nconst isTemporalInstant = (\n/**\n * The input to check.\n */\ninput) => {\n    try {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n        return input[Symbol.toStringTag] === \"Temporal.Instant\";\n    }\n    catch (_a) {\n        return false;\n    }\n};\nexports.isTemporalInstant = isTemporalInstant;\n/**\n * Asserts that the given `input` is a `Temporal.ZonedDateTime` object.\n */\nconst isTemporalZonedDateTime = (\n/**\n * The input to check.\n */\ninput) => {\n    try {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n        return input[Symbol.toStringTag] === \"Temporal.ZonedDateTime\";\n    }\n    catch (_a) {\n        return false;\n    }\n};\nexports.isTemporalZonedDateTime = isTemporalZonedDateTime;\n/**\n * Converts a given `Date`, `string`, `Temporal.Instant`, or\n * `Temporal.ZonedDateTime` to an ISO 8601 string.\n */\nconst getISOString = (time) => {\n    if (typeof time === \"string\") {\n        return new Date(time).toISOString();\n    }\n    if (time instanceof Date) {\n        return time.toISOString();\n    }\n    if ((0, exports.isTemporalZonedDateTime)(time)) {\n        return time.toInstant().toString();\n    }\n    if ((0, exports.isTemporalInstant)(time)) {\n        return time.toString();\n    }\n    throw new TypeError(\"Invalid date input\");\n};\nexports.getISOString = getISOString;\n//# sourceMappingURL=temporal.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9oZWxwZXJzL3RlbXBvcmFsLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9CQUFvQixHQUFHLCtCQUErQixHQUFHLHlCQUF5QixHQUFHLDBCQUEwQjtBQUMvRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQiIsInNvdXJjZXMiOlsiL1VzZXJzL2hhcnNoc2hyaXZhc3Rhdi9EZXNrdG9wL0NvZGluZyBQcm9qZWN0cy9Kb2ItQXNzaXN0YW50LUFnZW50L25vZGVfbW9kdWxlcy9pbm5nZXN0L2hlbHBlcnMvdGVtcG9yYWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldElTT1N0cmluZyA9IGV4cG9ydHMuaXNUZW1wb3JhbFpvbmVkRGF0ZVRpbWUgPSBleHBvcnRzLmlzVGVtcG9yYWxJbnN0YW50ID0gZXhwb3J0cy5pc1RlbXBvcmFsRHVyYXRpb24gPSB2b2lkIDA7XG4vKipcbiAqIEFzc2VydHMgdGhhdCB0aGUgZ2l2ZW4gYGlucHV0YCBpcyBhIGBUZW1wb3JhbC5EdXJhdGlvbmAgb2JqZWN0LlxuICovXG5jb25zdCBpc1RlbXBvcmFsRHVyYXRpb24gPSAoXG4vKipcbiAqIFRoZSBpbnB1dCB0byBjaGVjay5cbiAqL1xuaW5wdXQpID0+IHtcbiAgICB0cnkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSwgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzXG4gICAgICAgIHJldHVybiBpbnB1dFtTeW1ib2wudG9TdHJpbmdUYWddID09PSBcIlRlbXBvcmFsLkR1cmF0aW9uXCI7XG4gICAgfVxuICAgIGNhdGNoIChfYSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufTtcbmV4cG9ydHMuaXNUZW1wb3JhbER1cmF0aW9uID0gaXNUZW1wb3JhbER1cmF0aW9uO1xuLyoqXG4gKiBBc3NlcnRzIHRoYXQgdGhlIGdpdmVuIGBpbnB1dGAgaXMgYSBgVGVtcG9yYWwuVGltZVpvbmVgIG9iamVjdC5cbiAqL1xuY29uc3QgaXNUZW1wb3JhbEluc3RhbnQgPSAoXG4vKipcbiAqIFRoZSBpbnB1dCB0byBjaGVjay5cbiAqL1xuaW5wdXQpID0+IHtcbiAgICB0cnkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSwgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzXG4gICAgICAgIHJldHVybiBpbnB1dFtTeW1ib2wudG9TdHJpbmdUYWddID09PSBcIlRlbXBvcmFsLkluc3RhbnRcIjtcbiAgICB9XG4gICAgY2F0Y2ggKF9hKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59O1xuZXhwb3J0cy5pc1RlbXBvcmFsSW5zdGFudCA9IGlzVGVtcG9yYWxJbnN0YW50O1xuLyoqXG4gKiBBc3NlcnRzIHRoYXQgdGhlIGdpdmVuIGBpbnB1dGAgaXMgYSBgVGVtcG9yYWwuWm9uZWREYXRlVGltZWAgb2JqZWN0LlxuICovXG5jb25zdCBpc1RlbXBvcmFsWm9uZWREYXRlVGltZSA9IChcbi8qKlxuICogVGhlIGlucHV0IHRvIGNoZWNrLlxuICovXG5pbnB1dCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55LCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgICAgICAgcmV0dXJuIGlucHV0W1N5bWJvbC50b1N0cmluZ1RhZ10gPT09IFwiVGVtcG9yYWwuWm9uZWREYXRlVGltZVwiO1xuICAgIH1cbiAgICBjYXRjaCAoX2EpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn07XG5leHBvcnRzLmlzVGVtcG9yYWxab25lZERhdGVUaW1lID0gaXNUZW1wb3JhbFpvbmVkRGF0ZVRpbWU7XG4vKipcbiAqIENvbnZlcnRzIGEgZ2l2ZW4gYERhdGVgLCBgc3RyaW5nYCwgYFRlbXBvcmFsLkluc3RhbnRgLCBvclxuICogYFRlbXBvcmFsLlpvbmVkRGF0ZVRpbWVgIHRvIGFuIElTTyA4NjAxIHN0cmluZy5cbiAqL1xuY29uc3QgZ2V0SVNPU3RyaW5nID0gKHRpbWUpID0+IHtcbiAgICBpZiAodHlwZW9mIHRpbWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHRpbWUpLnRvSVNPU3RyaW5nKCk7XG4gICAgfVxuICAgIGlmICh0aW1lIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICByZXR1cm4gdGltZS50b0lTT1N0cmluZygpO1xuICAgIH1cbiAgICBpZiAoKDAsIGV4cG9ydHMuaXNUZW1wb3JhbFpvbmVkRGF0ZVRpbWUpKHRpbWUpKSB7XG4gICAgICAgIHJldHVybiB0aW1lLnRvSW5zdGFudCgpLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGlmICgoMCwgZXhwb3J0cy5pc1RlbXBvcmFsSW5zdGFudCkodGltZSkpIHtcbiAgICAgICAgcmV0dXJuIHRpbWUudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgZGF0ZSBpbnB1dFwiKTtcbn07XG5leHBvcnRzLmdldElTT1N0cmluZyA9IGdldElTT1N0cmluZztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRlbXBvcmFsLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/helpers/temporal.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/index.js":
/*!***************************************!*\
  !*** ./node_modules/inngest/index.js ***!
  \***************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/**\n * The primary entrypoint for the Inngest SDK. This provides all the necessary\n * exports to create, run, and trigger Inngest functions.\n *\n * Typical usage involves creating a new Inngest client with `Inngest`, and then\n * using the client to create functions, middleware, and other tools.\n *\n * See {@link https://www.inngest.com/docs} for more information.\n *\n * @example Create an Inngest client\n * ```ts\n * const inngest = new Inngest({\n *   id: \"my-app-id\",\n * });\n * ```\n *\n * @example Create an Inngest function\n * ```ts\n * const myFn = inngest.createFunction({\n *  id: \"my-function\",\n * }, {\n *   event: \"user/created\",\n * }, async ({ event, step }) => {\n *   console.log(\"User created:\", event.data);\n * });\n * ```\n *\n * @example Send an event\n * ```ts\n * await inngest.send({\n *   name: \"user/created\",\n *   data: {\n *     id: \"123\",\n *   },\n * });\n * ```\n *\n * @module\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.version = exports.ProxyLogger = exports.dependencyInjectionMiddleware = exports.slugify = exports.queryKeys = exports.internalEvents = exports.headerKeys = exports.StepError = exports.RetryAfterError = exports.NonRetriableError = exports.InngestMiddleware = exports.referenceFunction = exports.InngestCommHandler = exports.Inngest = exports.EventSchemas = void 0;\n__exportStar(__webpack_require__(/*! @inngest/ai */ \"(rsc)/./node_modules/@inngest/ai/dist/index.js\"), exports);\nvar EventSchemas_js_1 = __webpack_require__(/*! ./components/EventSchemas.js */ \"(rsc)/./node_modules/inngest/components/EventSchemas.js\");\nObject.defineProperty(exports, \"EventSchemas\", ({ enumerable: true, get: function () { return EventSchemas_js_1.EventSchemas; } }));\nvar Fetch_js_1 = __webpack_require__(/*! ./components/Fetch.js */ \"(rsc)/./node_modules/inngest/components/Fetch.js\");\nObject.defineProperty(exports, \"fetch\", ({ enumerable: true, get: function () { return Fetch_js_1.fetch; } }));\nvar Inngest_js_1 = __webpack_require__(/*! ./components/Inngest.js */ \"(rsc)/./node_modules/inngest/components/Inngest.js\");\nObject.defineProperty(exports, \"Inngest\", ({ enumerable: true, get: function () { return Inngest_js_1.Inngest; } }));\nvar InngestCommHandler_js_1 = __webpack_require__(/*! ./components/InngestCommHandler.js */ \"(rsc)/./node_modules/inngest/components/InngestCommHandler.js\");\nObject.defineProperty(exports, \"InngestCommHandler\", ({ enumerable: true, get: function () { return InngestCommHandler_js_1.InngestCommHandler; } }));\nvar InngestFunctionReference_js_1 = __webpack_require__(/*! ./components/InngestFunctionReference.js */ \"(rsc)/./node_modules/inngest/components/InngestFunctionReference.js\");\nObject.defineProperty(exports, \"referenceFunction\", ({ enumerable: true, get: function () { return InngestFunctionReference_js_1.referenceFunction; } }));\nvar InngestMiddleware_js_1 = __webpack_require__(/*! ./components/InngestMiddleware.js */ \"(rsc)/./node_modules/inngest/components/InngestMiddleware.js\");\nObject.defineProperty(exports, \"InngestMiddleware\", ({ enumerable: true, get: function () { return InngestMiddleware_js_1.InngestMiddleware; } }));\nvar NonRetriableError_js_1 = __webpack_require__(/*! ./components/NonRetriableError.js */ \"(rsc)/./node_modules/inngest/components/NonRetriableError.js\");\nObject.defineProperty(exports, \"NonRetriableError\", ({ enumerable: true, get: function () { return NonRetriableError_js_1.NonRetriableError; } }));\nvar RetryAfterError_js_1 = __webpack_require__(/*! ./components/RetryAfterError.js */ \"(rsc)/./node_modules/inngest/components/RetryAfterError.js\");\nObject.defineProperty(exports, \"RetryAfterError\", ({ enumerable: true, get: function () { return RetryAfterError_js_1.RetryAfterError; } }));\nvar StepError_js_1 = __webpack_require__(/*! ./components/StepError.js */ \"(rsc)/./node_modules/inngest/components/StepError.js\");\nObject.defineProperty(exports, \"StepError\", ({ enumerable: true, get: function () { return StepError_js_1.StepError; } }));\nvar consts_js_1 = __webpack_require__(/*! ./helpers/consts.js */ \"(rsc)/./node_modules/inngest/helpers/consts.js\");\nObject.defineProperty(exports, \"headerKeys\", ({ enumerable: true, get: function () { return consts_js_1.headerKeys; } }));\nObject.defineProperty(exports, \"internalEvents\", ({ enumerable: true, get: function () { return consts_js_1.internalEvents; } }));\nObject.defineProperty(exports, \"queryKeys\", ({ enumerable: true, get: function () { return consts_js_1.queryKeys; } }));\nvar strings_js_1 = __webpack_require__(/*! ./helpers/strings.js */ \"(rsc)/./node_modules/inngest/helpers/strings.js\");\nObject.defineProperty(exports, \"slugify\", ({ enumerable: true, get: function () { return strings_js_1.slugify; } }));\nvar dependencyInjection_js_1 = __webpack_require__(/*! ./middleware/dependencyInjection.js */ \"(rsc)/./node_modules/inngest/middleware/dependencyInjection.js\");\nObject.defineProperty(exports, \"dependencyInjectionMiddleware\", ({ enumerable: true, get: function () { return dependencyInjection_js_1.dependencyInjectionMiddleware; } }));\nvar logger_js_1 = __webpack_require__(/*! ./middleware/logger.js */ \"(rsc)/./node_modules/inngest/middleware/logger.js\");\nObject.defineProperty(exports, \"ProxyLogger\", ({ enumerable: true, get: function () { return logger_js_1.ProxyLogger; } }));\nvar version_js_1 = __webpack_require__(/*! ./version.js */ \"(rsc)/./node_modules/inngest/version.js\");\nObject.defineProperty(exports, \"version\", ({ enumerable: true, get: function () { return version_js_1.version; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/middleware/dependencyInjection.js":
/*!****************************************************************!*\
  !*** ./node_modules/inngest/middleware/dependencyInjection.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.dependencyInjectionMiddleware = void 0;\nconst InngestMiddleware_js_1 = __webpack_require__(/*! ../components/InngestMiddleware.js */ \"(rsc)/./node_modules/inngest/components/InngestMiddleware.js\");\n/**\n * Adds properties to the function input for every function created using this\n * app.\n */\n// We can use `const` here yet due to TS constraints.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst dependencyInjectionMiddleware = (\n/**\n * The context to inject into the function input.\n */\nctx) => {\n    return new InngestMiddleware_js_1.InngestMiddleware({\n        name: \"Inngest: Dependency Injection\",\n        init() {\n            return {\n                onFunctionRun() {\n                    return {\n                        transformInput() {\n                            return {\n                                ctx,\n                            };\n                        },\n                    };\n                },\n            };\n        },\n    });\n};\nexports.dependencyInjectionMiddleware = dependencyInjectionMiddleware;\n//# sourceMappingURL=dependencyInjection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9taWRkbGV3YXJlL2RlcGVuZGVuY3lJbmplY3Rpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QscUNBQXFDO0FBQ3JDLCtCQUErQixtQkFBTyxDQUFDLHdHQUFvQztBQUMzRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ0EscUNBQXFDO0FBQ3JDIiwic291cmNlcyI6WyIvVXNlcnMvaGFyc2hzaHJpdmFzdGF2L0Rlc2t0b3AvQ29kaW5nIFByb2plY3RzL0pvYi1Bc3Npc3RhbnQtQWdlbnQvbm9kZV9tb2R1bGVzL2lubmdlc3QvbWlkZGxld2FyZS9kZXBlbmRlbmN5SW5qZWN0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZXBlbmRlbmN5SW5qZWN0aW9uTWlkZGxld2FyZSA9IHZvaWQgMDtcbmNvbnN0IElubmdlc3RNaWRkbGV3YXJlX2pzXzEgPSByZXF1aXJlKFwiLi4vY29tcG9uZW50cy9Jbm5nZXN0TWlkZGxld2FyZS5qc1wiKTtcbi8qKlxuICogQWRkcyBwcm9wZXJ0aWVzIHRvIHRoZSBmdW5jdGlvbiBpbnB1dCBmb3IgZXZlcnkgZnVuY3Rpb24gY3JlYXRlZCB1c2luZyB0aGlzXG4gKiBhcHAuXG4gKi9cbi8vIFdlIGNhbiB1c2UgYGNvbnN0YCBoZXJlIHlldCBkdWUgdG8gVFMgY29uc3RyYWludHMuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuY29uc3QgZGVwZW5kZW5jeUluamVjdGlvbk1pZGRsZXdhcmUgPSAoXG4vKipcbiAqIFRoZSBjb250ZXh0IHRvIGluamVjdCBpbnRvIHRoZSBmdW5jdGlvbiBpbnB1dC5cbiAqL1xuY3R4KSA9PiB7XG4gICAgcmV0dXJuIG5ldyBJbm5nZXN0TWlkZGxld2FyZV9qc18xLklubmdlc3RNaWRkbGV3YXJlKHtcbiAgICAgICAgbmFtZTogXCJJbm5nZXN0OiBEZXBlbmRlbmN5IEluamVjdGlvblwiLFxuICAgICAgICBpbml0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBvbkZ1bmN0aW9uUnVuKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtSW5wdXQoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgIH0pO1xufTtcbmV4cG9ydHMuZGVwZW5kZW5jeUluamVjdGlvbk1pZGRsZXdhcmUgPSBkZXBlbmRlbmN5SW5qZWN0aW9uTWlkZGxld2FyZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlcGVuZGVuY3lJbmplY3Rpb24uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/middleware/dependencyInjection.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/middleware/logger.js":
/*!***************************************************!*\
  !*** ./node_modules/inngest/middleware/logger.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ProxyLogger = exports.DefaultLogger = void 0;\nclass DefaultLogger {\n    info(...args) {\n        console.info(...args);\n    }\n    warn(...args) {\n        console.warn(...args);\n    }\n    error(...args) {\n        console.error(...args);\n    }\n    debug(...args) {\n        console.debug(...args);\n    }\n}\nexports.DefaultLogger = DefaultLogger;\n/**\n * ProxyLogger aims to provide a thin wrapper on user's provided logger.\n * It's expected to be turned on and off based on the function execution\n * context, so it doesn't result in duplicated logging.\n *\n * And also attempt to allow enough time for the logger to flush all logs.\n *\n * @public\n */\nclass ProxyLogger {\n    constructor(logger) {\n        this.enabled = false;\n        this.logger = logger;\n        // Return a Proxy to forward arbitrary property access to the underlying\n        // logger. For example, if the user provides a logger that has a `foo`\n        // method, they can call `foo` on the ProxyLogger and it will call the\n        // underlying logger's `foo` method.\n        return new Proxy(this, {\n            get(target, prop, receiver) {\n                // Handle ProxyLogger's own methods/properties.\n                if (prop in target) {\n                    return Reflect.get(target, prop, receiver);\n                }\n                // Forward property access to the underlying logger.\n                return Reflect.get(target.logger, prop, receiver);\n            },\n        });\n    }\n    info(...args) {\n        if (!this.enabled)\n            return;\n        this.logger.info(...args);\n    }\n    warn(...args) {\n        if (!this.enabled)\n            return;\n        this.logger.warn(...args);\n    }\n    error(...args) {\n        if (!this.enabled)\n            return;\n        this.logger.error(...args);\n    }\n    debug(...args) {\n        // there are loggers that don't implement \"debug\" by default\n        if (!this.enabled || !(typeof this.logger.debug === \"function\"))\n            return;\n        this.logger.debug(...args);\n    }\n    enable() {\n        this.enabled = true;\n    }\n    disable() {\n        this.enabled = false;\n    }\n    async flush() {\n        // Allow 1s for the provided logger to handle flushing since the ones that do\n        // flushing usually has some kind of timeout of up to 1s.\n        //\n        // TODO:\n        // This should only happen when using a serverless environment because it's very\n        // costly from the compute perspective.\n        // server runtimes should just let the logger do their thing since most of them\n        // should have already figured what to do in those environments, be it threading or\n        // something else.\n        if (this.logger.constructor.name !== DefaultLogger.name) {\n            await new Promise((resolve) => {\n                setTimeout(() => resolve(null), 1000);\n            });\n        }\n    }\n}\nexports.ProxyLogger = ProxyLogger;\n//# sourceMappingURL=logger.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9taWRkbGV3YXJlL2xvZ2dlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxtQkFBbUIsR0FBRyxxQkFBcUI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9oYXJzaHNocml2YXN0YXYvRGVza3RvcC9Db2RpbmcgUHJvamVjdHMvSm9iLUFzc2lzdGFudC1BZ2VudC9ub2RlX21vZHVsZXMvaW5uZ2VzdC9taWRkbGV3YXJlL2xvZ2dlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUHJveHlMb2dnZXIgPSBleHBvcnRzLkRlZmF1bHRMb2dnZXIgPSB2b2lkIDA7XG5jbGFzcyBEZWZhdWx0TG9nZ2VyIHtcbiAgICBpbmZvKC4uLmFyZ3MpIHtcbiAgICAgICAgY29uc29sZS5pbmZvKC4uLmFyZ3MpO1xuICAgIH1cbiAgICB3YXJuKC4uLmFyZ3MpIHtcbiAgICAgICAgY29uc29sZS53YXJuKC4uLmFyZ3MpO1xuICAgIH1cbiAgICBlcnJvciguLi5hcmdzKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoLi4uYXJncyk7XG4gICAgfVxuICAgIGRlYnVnKC4uLmFyZ3MpIHtcbiAgICAgICAgY29uc29sZS5kZWJ1ZyguLi5hcmdzKTtcbiAgICB9XG59XG5leHBvcnRzLkRlZmF1bHRMb2dnZXIgPSBEZWZhdWx0TG9nZ2VyO1xuLyoqXG4gKiBQcm94eUxvZ2dlciBhaW1zIHRvIHByb3ZpZGUgYSB0aGluIHdyYXBwZXIgb24gdXNlcidzIHByb3ZpZGVkIGxvZ2dlci5cbiAqIEl0J3MgZXhwZWN0ZWQgdG8gYmUgdHVybmVkIG9uIGFuZCBvZmYgYmFzZWQgb24gdGhlIGZ1bmN0aW9uIGV4ZWN1dGlvblxuICogY29udGV4dCwgc28gaXQgZG9lc24ndCByZXN1bHQgaW4gZHVwbGljYXRlZCBsb2dnaW5nLlxuICpcbiAqIEFuZCBhbHNvIGF0dGVtcHQgdG8gYWxsb3cgZW5vdWdoIHRpbWUgZm9yIHRoZSBsb2dnZXIgdG8gZmx1c2ggYWxsIGxvZ3MuXG4gKlxuICogQHB1YmxpY1xuICovXG5jbGFzcyBQcm94eUxvZ2dlciB7XG4gICAgY29uc3RydWN0b3IobG9nZ2VyKSB7XG4gICAgICAgIHRoaXMuZW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmxvZ2dlciA9IGxvZ2dlcjtcbiAgICAgICAgLy8gUmV0dXJuIGEgUHJveHkgdG8gZm9yd2FyZCBhcmJpdHJhcnkgcHJvcGVydHkgYWNjZXNzIHRvIHRoZSB1bmRlcmx5aW5nXG4gICAgICAgIC8vIGxvZ2dlci4gRm9yIGV4YW1wbGUsIGlmIHRoZSB1c2VyIHByb3ZpZGVzIGEgbG9nZ2VyIHRoYXQgaGFzIGEgYGZvb2BcbiAgICAgICAgLy8gbWV0aG9kLCB0aGV5IGNhbiBjYWxsIGBmb29gIG9uIHRoZSBQcm94eUxvZ2dlciBhbmQgaXQgd2lsbCBjYWxsIHRoZVxuICAgICAgICAvLyB1bmRlcmx5aW5nIGxvZ2dlcidzIGBmb29gIG1ldGhvZC5cbiAgICAgICAgcmV0dXJuIG5ldyBQcm94eSh0aGlzLCB7XG4gICAgICAgICAgICBnZXQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikge1xuICAgICAgICAgICAgICAgIC8vIEhhbmRsZSBQcm94eUxvZ2dlcidzIG93biBtZXRob2RzL3Byb3BlcnRpZXMuXG4gICAgICAgICAgICAgICAgaWYgKHByb3AgaW4gdGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LmdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gRm9yd2FyZCBwcm9wZXJ0eSBhY2Nlc3MgdG8gdGhlIHVuZGVybHlpbmcgbG9nZ2VyLlxuICAgICAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LmdldCh0YXJnZXQubG9nZ2VyLCBwcm9wLCByZWNlaXZlcik7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgaW5mbyguLi5hcmdzKSB7XG4gICAgICAgIGlmICghdGhpcy5lbmFibGVkKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLmxvZ2dlci5pbmZvKC4uLmFyZ3MpO1xuICAgIH1cbiAgICB3YXJuKC4uLmFyZ3MpIHtcbiAgICAgICAgaWYgKCF0aGlzLmVuYWJsZWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMubG9nZ2VyLndhcm4oLi4uYXJncyk7XG4gICAgfVxuICAgIGVycm9yKC4uLmFyZ3MpIHtcbiAgICAgICAgaWYgKCF0aGlzLmVuYWJsZWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMubG9nZ2VyLmVycm9yKC4uLmFyZ3MpO1xuICAgIH1cbiAgICBkZWJ1ZyguLi5hcmdzKSB7XG4gICAgICAgIC8vIHRoZXJlIGFyZSBsb2dnZXJzIHRoYXQgZG9uJ3QgaW1wbGVtZW50IFwiZGVidWdcIiBieSBkZWZhdWx0XG4gICAgICAgIGlmICghdGhpcy5lbmFibGVkIHx8ICEodHlwZW9mIHRoaXMubG9nZ2VyLmRlYnVnID09PSBcImZ1bmN0aW9uXCIpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLmxvZ2dlci5kZWJ1ZyguLi5hcmdzKTtcbiAgICB9XG4gICAgZW5hYmxlKCkge1xuICAgICAgICB0aGlzLmVuYWJsZWQgPSB0cnVlO1xuICAgIH1cbiAgICBkaXNhYmxlKCkge1xuICAgICAgICB0aGlzLmVuYWJsZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgYXN5bmMgZmx1c2goKSB7XG4gICAgICAgIC8vIEFsbG93IDFzIGZvciB0aGUgcHJvdmlkZWQgbG9nZ2VyIHRvIGhhbmRsZSBmbHVzaGluZyBzaW5jZSB0aGUgb25lcyB0aGF0IGRvXG4gICAgICAgIC8vIGZsdXNoaW5nIHVzdWFsbHkgaGFzIHNvbWUga2luZCBvZiB0aW1lb3V0IG9mIHVwIHRvIDFzLlxuICAgICAgICAvL1xuICAgICAgICAvLyBUT0RPOlxuICAgICAgICAvLyBUaGlzIHNob3VsZCBvbmx5IGhhcHBlbiB3aGVuIHVzaW5nIGEgc2VydmVybGVzcyBlbnZpcm9ubWVudCBiZWNhdXNlIGl0J3MgdmVyeVxuICAgICAgICAvLyBjb3N0bHkgZnJvbSB0aGUgY29tcHV0ZSBwZXJzcGVjdGl2ZS5cbiAgICAgICAgLy8gc2VydmVyIHJ1bnRpbWVzIHNob3VsZCBqdXN0IGxldCB0aGUgbG9nZ2VyIGRvIHRoZWlyIHRoaW5nIHNpbmNlIG1vc3Qgb2YgdGhlbVxuICAgICAgICAvLyBzaG91bGQgaGF2ZSBhbHJlYWR5IGZpZ3VyZWQgd2hhdCB0byBkbyBpbiB0aG9zZSBlbnZpcm9ubWVudHMsIGJlIGl0IHRocmVhZGluZyBvclxuICAgICAgICAvLyBzb21ldGhpbmcgZWxzZS5cbiAgICAgICAgaWYgKHRoaXMubG9nZ2VyLmNvbnN0cnVjdG9yLm5hbWUgIT09IERlZmF1bHRMb2dnZXIubmFtZSkge1xuICAgICAgICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHJlc29sdmUobnVsbCksIDEwMDApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLlByb3h5TG9nZ2VyID0gUHJveHlMb2dnZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2dnZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/middleware/logger.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/next.js":
/*!**************************************!*\
  !*** ./node_modules/inngest/next.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * An adapter for Next.js to serve and register any declared functions with\n * Inngest, making them available to be triggered by events.\n *\n * Supports Next.js 12+, both serverless and edge.\n *\n * @example Next.js <=12 or the pages router can export the handler directly\n * ```ts\n * export default serve({ client: inngest, functions: [fn1, fn2] });\n * ```\n *\n * @example Next.js >=13 with the `app` dir must export individual methods\n * ```ts\n * export const { GET, POST, PUT } = serve({\n *            client: inngest,\n *            functions: [fn1, fn2],\n * });\n * ```\n *\n * @module\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.serve = exports.frameworkName = void 0;\nconst InngestCommHandler_js_1 = __webpack_require__(/*! ./components/InngestCommHandler.js */ \"(rsc)/./node_modules/inngest/components/InngestCommHandler.js\");\nconst env_js_1 = __webpack_require__(/*! ./helpers/env.js */ \"(rsc)/./node_modules/inngest/helpers/env.js\");\n/**\n * The name of the framework, used to identify the framework in Inngest\n * dashboards and during testing.\n */\nexports.frameworkName = \"nextjs\";\nconst isRecord = (val) => {\n    return typeof val === \"object\" && val !== null;\n};\nconst isFunction = (val) => {\n    return typeof val === \"function\";\n};\nconst isNext12ApiResponse = (val) => {\n    return (isRecord(val) &&\n        isFunction(val.setHeader) &&\n        isFunction(val.status) &&\n        isFunction(val.send));\n};\n/**\n * In Next.js, serve and register any declared functions with Inngest, making\n * them available to be triggered by events.\n *\n * Supports Next.js 12+, both serverless and edge.\n *\n * @example Next.js <=12 or the pages router can export the handler directly\n * ```ts\n * export default serve({ client: inngest, functions: [fn1, fn2] });\n * ```\n *\n * @example Next.js >=13 with the `app` dir must export individual methods\n * ```ts\n * export const { GET, POST, PUT } = serve({\n *            client: inngest,\n *            functions: [fn1, fn2],\n * });\n * ```\n *\n * @public\n */\n// Has explicit return type to avoid JSR-defined \"slow types\"\nconst serve = (options) => {\n    const handler = new InngestCommHandler_js_1.InngestCommHandler(Object.assign(Object.assign({ frameworkName: exports.frameworkName }, options), { handler: (reqMethod, ...args) => {\n            const [expectedReq, res] = args;\n            const req = expectedReq;\n            const getHeader = (key) => {\n                const header = typeof req.headers.get === \"function\"\n                    ? req.headers.get(key)\n                    : req.headers[key];\n                return Array.isArray(header) ? header[0] : header;\n            };\n            return {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                body: () => (typeof req.json === \"function\" ? req.json() : req.body),\n                headers: getHeader,\n                method: () => {\n                    /**\n                     * `req.method`, though types say otherwise, is not available in Next.js\n                     * 13 {@link https://beta.nextjs.org/docs/routing/route-handlers Route Handlers}.\n                     *\n                     * Therefore, we must try to set the method ourselves where we know it.\n                     */\n                    const method = reqMethod || req.method || \"\";\n                    return method;\n                },\n                isProduction: () => {\n                    /**\n                     * Vercel Edge Functions do not allow dynamic access to environment\n                     * variables, so we'll manage production checks directly here.\n                     *\n                     * We try/catch to avoid situations where Next.js is being used in\n                     * environments where `process.env` is not accessible or polyfilled.\n                     */\n                    try {\n                        // eslint-disable-next-line @inngest/internal/process-warn\n                        const isProd = \"development\" === \"production\";\n                        return isProd;\n                    }\n                    catch (err) {\n                        // no-op\n                    }\n                },\n                queryString: (key, url) => {\n                    var _a;\n                    const qs = ((_a = req.query) === null || _a === void 0 ? void 0 : _a[key]) || url.searchParams.get(key);\n                    return Array.isArray(qs) ? qs[0] : qs;\n                },\n                url: () => {\n                    let absoluteUrl;\n                    try {\n                        absoluteUrl = new URL(req.url);\n                    }\n                    catch (_a) {\n                        // no-op\n                    }\n                    if (absoluteUrl) {\n                        /**\n                         * `req.url` here should may be the full URL, including query string.\n                         * There are some caveats, however, where Next.js will obfuscate\n                         * the host. For example, in the case of `host.docker.internal`,\n                         * Next.js will instead set the host here to `localhost`.\n                         *\n                         * To avoid this, we'll try to parse the URL from `req.url`, but\n                         * also use the `host` header if it's available.\n                         */\n                        const host = options.serveHost || getHeader(\"host\");\n                        if (host) {\n                            const hostWithProtocol = new URL(host.includes(\"://\") ? host : `${absoluteUrl.protocol}//${host}`);\n                            absoluteUrl.protocol = hostWithProtocol.protocol;\n                            absoluteUrl.host = hostWithProtocol.host;\n                            absoluteUrl.port = hostWithProtocol.port;\n                            absoluteUrl.username = hostWithProtocol.username;\n                            absoluteUrl.password = hostWithProtocol.password;\n                        }\n                        return absoluteUrl;\n                    }\n                    let scheme = \"https\";\n                    const host = options.serveHost || getHeader(\"host\") || \"\";\n                    try {\n                        // eslint-disable-next-line @inngest/internal/process-warn\n                        if (true) {\n                            scheme = \"http\";\n                        }\n                    }\n                    catch (err) {\n                        // no-op\n                    }\n                    const url = new URL(req.url, `${scheme}://${host}`);\n                    return url;\n                },\n                transformResponse: ({ body, headers, status }) => {\n                    /**\n                     * Carefully attempt to set headers and data on the response object\n                     * for Next.js 12 support.\n                     *\n                     * This also assumes that we're not using Next.js 15, where the `res`\n                     * object is repopulated as a `RouteContext` object. We expect these\n                     * methods to NOT be defined in Next.js 15.\n                     *\n                     * We could likely use `instanceof ServerResponse` to better check the\n                     * type of this, though Next.js 12 had issues with this due to not\n                     * instantiating the response correctly.\n                     */\n                    if (isNext12ApiResponse(res)) {\n                        for (const [key, value] of Object.entries(headers)) {\n                            res.setHeader(key, value);\n                        }\n                        res.status(status);\n                        res.send(body);\n                        /**\n                         * If we're here, we're in a serverless endpoint (not edge), so\n                         * we've correctly sent the response and can return `undefined`.\n                         *\n                         * Next.js 13 edge requires that the return value is typed as\n                         * `Response`, so we still enforce that as we cannot dynamically\n                         * adjust typing based on the environment.\n                         */\n                        return undefined;\n                    }\n                    /**\n                     * If we're here, we're in an edge environment and need to return a\n                     * `Response` object.\n                     *\n                     * We also don't know if the current environment has a native\n                     * `Response` object, so we'll grab that first.\n                     */\n                    const Res = (0, env_js_1.getResponse)();\n                    return new Res(body, { status, headers });\n                },\n                transformStreamingResponse: ({ body, headers, status }) => {\n                    return new Response(body, { status, headers });\n                },\n            };\n        } }));\n    /**\n     * Next.js 13 uses\n     * {@link https://beta.nextjs.org/docs/routing/route-handlers Route Handlers}\n     * to declare API routes instead of a generic catch-all method that was\n     * available using the `pages/api` directory.\n     *\n     * This means that users must now export a function for each method supported\n     * by the endpoint. For us, this means requiring a user explicitly exports\n     * `GET`, `POST`, and `PUT` functions.\n     *\n     * Because of this, we'll add circular references to those property names of\n     * the returned handler, meaning we can write some succinct code to export\n     * them. Thanks, @goodoldneon.\n     *\n     * @example\n     * ```ts\n     * export const { GET, POST, PUT } = serve(...);\n     * ```\n     *\n     * See {@link https://beta.nextjs.org/docs/routing/route-handlers}\n     */\n    const baseFn = handler.createHandler();\n    const fn = baseFn.bind(null, undefined);\n    /**\n     * Ensure we have a non-variadic length to avoid issues with forced type\n     * checking.\n     */\n    Object.defineProperty(fn, \"length\", { value: 1 });\n    const handlerFn = Object.defineProperties(fn, {\n        GET: { value: baseFn.bind(null, \"GET\") },\n        POST: { value: baseFn.bind(null, \"POST\") },\n        PUT: { value: baseFn.bind(null, \"PUT\") },\n    });\n    return handlerFn;\n};\nexports.serve = serve;\n//# sourceMappingURL=next.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/next.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/node_modules/ansi-regex/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/inngest/node_modules/ansi-regex/index.js ***!
  \***************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = (options)=>{\n    options = Object.assign({\n        onlyFirst: false\n    }, options);\n    const pattern = [\n        '[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]+)*|[a-zA-Z\\\\d]+(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)',\n        '(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TZcf-ntqry=><~]))'\n    ].join('|');\n    return new RegExp(pattern, options.onlyFirst ? undefined : 'g');\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9ub2RlX21vZHVsZXMvYW5zaS1yZWdleC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSxPQUFPQyxPQUFPLEdBQUdDLENBQUFBO0lBQ2hCQSxVQUFVQyxPQUFPQyxNQUFNLENBQUM7UUFDdkJDLFdBQVc7SUFDWixHQUFHSDtJQUVILE1BQU1JLFVBQVU7UUFDZjtRQUNBO0tBQ0EsQ0FBQ0MsSUFBSSxDQUFDO0lBRVAsT0FBTyxJQUFJQyxPQUFPRixTQUFTSixRQUFRRyxTQUFTLEdBQUdJLFlBQVk7QUFDNUQiLCJzb3VyY2VzIjpbIi9Vc2Vycy9oYXJzaHNocml2YXN0YXYvRGVza3RvcC9Db2RpbmcgUHJvamVjdHMvSm9iLUFzc2lzdGFudC1BZ2VudC9ub2RlX21vZHVsZXMvaW5uZ2VzdC9ub2RlX21vZHVsZXMvYW5zaS1yZWdleC9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gb3B0aW9ucyA9PiB7XG5cdG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHtcblx0XHRvbmx5Rmlyc3Q6IGZhbHNlXG5cdH0sIG9wdGlvbnMpO1xuXG5cdGNvbnN0IHBhdHRlcm4gPSBbXG5cdFx0J1tcXFxcdTAwMUJcXFxcdTAwOUJdW1tcXFxcXSgpIzs/XSooPzooPzooPzooPzo7Wy1hLXpBLVpcXFxcZFxcXFwvIyYuOj0/JUB+X10rKSp8W2EtekEtWlxcXFxkXSsoPzo7Wy1hLXpBLVpcXFxcZFxcXFwvIyYuOj0/JUB+X10qKSopP1xcXFx1MDAwNyknLFxuXHRcdCcoPzooPzpcXFxcZHsxLDR9KD86O1xcXFxkezAsNH0pKik/W1xcXFxkQS1QUi1UWmNmLW50cXJ5PT48fl0pKSdcblx0XS5qb2luKCd8Jyk7XG5cblx0cmV0dXJuIG5ldyBSZWdFeHAocGF0dGVybiwgb3B0aW9ucy5vbmx5Rmlyc3QgPyB1bmRlZmluZWQgOiAnZycpO1xufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwib3B0aW9ucyIsIk9iamVjdCIsImFzc2lnbiIsIm9ubHlGaXJzdCIsInBhdHRlcm4iLCJqb2luIiwiUmVnRXhwIiwidW5kZWZpbmVkIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/node_modules/ansi-regex/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/node_modules/strip-ansi/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/inngest/node_modules/strip-ansi/index.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst ansiRegex = __webpack_require__(/*! ansi-regex */ \"(rsc)/./node_modules/inngest/node_modules/ansi-regex/index.js\");\nconst stripAnsi = (string)=>typeof string === 'string' ? string.replace(ansiRegex(), '') : string;\nmodule.exports = stripAnsi;\nmodule.exports[\"default\"] = stripAnsi;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9ub2RlX21vZHVsZXMvc3RyaXAtYW5zaS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLE1BQU1BLFlBQVlDLG1CQUFPQSxDQUFDLGlGQUFZO0FBRXRDLE1BQU1DLFlBQVlDLENBQUFBLFNBQVUsT0FBT0EsV0FBVyxXQUFXQSxPQUFPQyxPQUFPLENBQUNKLGFBQWEsTUFBTUc7QUFFM0ZFLE9BQU9DLE9BQU8sR0FBR0o7QUFDakJHLHlCQUFzQixHQUFHSCIsInNvdXJjZXMiOlsiL1VzZXJzL2hhcnNoc2hyaXZhc3Rhdi9EZXNrdG9wL0NvZGluZyBQcm9qZWN0cy9Kb2ItQXNzaXN0YW50LUFnZW50L25vZGVfbW9kdWxlcy9pbm5nZXN0L25vZGVfbW9kdWxlcy9zdHJpcC1hbnNpL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IGFuc2lSZWdleCA9IHJlcXVpcmUoJ2Fuc2ktcmVnZXgnKTtcblxuY29uc3Qgc3RyaXBBbnNpID0gc3RyaW5nID0+IHR5cGVvZiBzdHJpbmcgPT09ICdzdHJpbmcnID8gc3RyaW5nLnJlcGxhY2UoYW5zaVJlZ2V4KCksICcnKSA6IHN0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBzdHJpcEFuc2k7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gc3RyaXBBbnNpO1xuIl0sIm5hbWVzIjpbImFuc2lSZWdleCIsInJlcXVpcmUiLCJzdHJpcEFuc2kiLCJzdHJpbmciLCJyZXBsYWNlIiwibW9kdWxlIiwiZXhwb3J0cyIsImRlZmF1bHQiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/node_modules/strip-ansi/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/types.js":
/*!***************************************!*\
  !*** ./node_modules/inngest/types.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Internal types and schemas used throughout the Inngest SDK.\n *\n * Note that types intended to be imported and utilized in userland code will be\n * exported from the main entrypoint of the SDK, `inngest`; importing types\n * directly from this file may result in breaking changes in non-major bumps as\n * only those exported from `inngest` are considered stable.\n *\n * @module\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.inBandSyncRequestBodySchema = exports.err = exports.ok = exports.functionConfigSchema = exports.logLevels = exports.sendEventResponseSchema = exports.incomingOpSchema = exports.StepOpCode = exports.jsonErrorSchema = void 0;\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nconst baseJsonErrorSchema = zod_1.z.object({\n    name: zod_1.z.string().trim().optional(),\n    error: zod_1.z.string().trim().optional(),\n    message: zod_1.z.string().trim().optional(),\n    stack: zod_1.z.string().trim().optional(),\n});\nconst maybeJsonErrorSchema = zod_1.z.lazy(() => zod_1.z.object({\n    name: zod_1.z.string().trim(),\n    message: zod_1.z.string().trim(),\n    stack: zod_1.z.string().trim().optional(),\n    cause: zod_1.z.union([maybeJsonErrorSchema, zod_1.z.unknown()]).optional(),\n}));\nexports.jsonErrorSchema = baseJsonErrorSchema\n    .extend({\n    cause: zod_1.z.union([maybeJsonErrorSchema, zod_1.z.unknown()]).optional(),\n})\n    .passthrough()\n    .catch({})\n    .transform((val) => {\n    return Object.assign(Object.assign({}, val), { name: val.name || \"Error\", message: val.message || val.error || \"Unknown error\", stack: val.stack });\n});\n/**\n * Unique codes for the different types of operation that can be sent to Inngest\n * from SDK step functions.\n */\nvar StepOpCode;\n(function (StepOpCode) {\n    StepOpCode[\"WaitForSignal\"] = \"WaitForSignal\";\n    StepOpCode[\"WaitForEvent\"] = \"WaitForEvent\";\n    /**\n     * Legacy equivalent to `\"StepRun\"`. Has mixed data wrapping (e.g. `data` or\n     * `data.data` depending on SDK version), so this is phased out in favour of\n     * `\"StepRun\"`, which never wraps.\n     *\n     * Note that it is still used for v0 executions for backwards compatibility.\n     *\n     * @deprecated Only used for v0 executions; use `\"StepRun\"` instead.\n     */\n    StepOpCode[\"Step\"] = \"Step\";\n    StepOpCode[\"StepRun\"] = \"StepRun\";\n    StepOpCode[\"StepError\"] = \"StepError\";\n    StepOpCode[\"StepPlanned\"] = \"StepPlanned\";\n    StepOpCode[\"Sleep\"] = \"Sleep\";\n    /**\n     * Used to signify that the executor has requested that a step run, but we\n     * could not find that step.\n     *\n     * This is likely indicative that a step was renamed or removed from the\n     * function.\n     */\n    StepOpCode[\"StepNotFound\"] = \"StepNotFound\";\n    StepOpCode[\"InvokeFunction\"] = \"InvokeFunction\";\n    StepOpCode[\"AiGateway\"] = \"AIGateway\";\n    StepOpCode[\"Gateway\"] = \"Gateway\";\n})(StepOpCode || (exports.StepOpCode = StepOpCode = {}));\nexports.incomingOpSchema = zod_1.z.object({\n    id: zod_1.z.string().min(1),\n    data: zod_1.z.any().optional(),\n    error: zod_1.z.any().optional(),\n    input: zod_1.z.any().optional(),\n});\nexports.sendEventResponseSchema = zod_1.z.object({\n    /**\n     * Event IDs\n     */\n    ids: zod_1.z.array(zod_1.z.string()).default([]),\n    /**\n     * HTTP Status Code. Will be undefined if no request was sent.\n     */\n    status: zod_1.z.number().default(0),\n    /**\n     * Error message. Will be undefined if no error occurred.\n     */\n    error: zod_1.z.string().optional(),\n});\n/**\n * A set of log levels that can be used to control the amount of logging output\n * from various parts of the Inngest library.\n *\n * @public\n */\nexports.logLevels = [\n    \"fatal\",\n    \"error\",\n    \"warn\",\n    \"info\",\n    \"debug\",\n    \"silent\",\n];\n/**\n * This schema is used internally to share the shape of a concurrency option\n * when validating config. We cannot add comments to Zod fields, so we just use\n * an extra type check to ensure it matches our exported expectations.\n */\nconst concurrencyOptionSchema = zod_1.z.strictObject({\n    limit: zod_1.z.number(),\n    key: zod_1.z.string().optional(),\n    scope: zod_1.z.enum([\"fn\", \"env\", \"account\"]).optional(),\n});\nconst _checkConcurrencySchemaAligns = true;\n/**\n * The schema used to represent an individual function being synced with\n * Inngest.\n *\n * Note that this should only be used to validate the shape of a config object\n * and not used for feature compatibility, such as feature X being exclusive\n * with feature Y; these should be handled on the Inngest side.\n */\nexports.functionConfigSchema = zod_1.z.strictObject({\n    name: zod_1.z.string().optional(),\n    id: zod_1.z.string(),\n    triggers: zod_1.z.array(zod_1.z.union([\n        zod_1.z.strictObject({\n            event: zod_1.z.string(),\n            expression: zod_1.z.string().optional(),\n        }),\n        zod_1.z.strictObject({\n            cron: zod_1.z.string(),\n        }),\n    ])),\n    steps: zod_1.z.record(zod_1.z.strictObject({\n        id: zod_1.z.string(),\n        name: zod_1.z.string(),\n        runtime: zod_1.z.strictObject({\n            type: zod_1.z.union([zod_1.z.literal(\"http\"), zod_1.z.literal(\"ws\")]),\n            url: zod_1.z.string(),\n        }),\n        retries: zod_1.z\n            .strictObject({\n            attempts: zod_1.z.number().optional(),\n        })\n            .optional(),\n    })),\n    idempotency: zod_1.z.string().optional(),\n    batchEvents: zod_1.z\n        .strictObject({\n        maxSize: zod_1.z.number(),\n        timeout: zod_1.z.string(),\n        key: zod_1.z.string().optional(),\n    })\n        .optional(),\n    rateLimit: zod_1.z\n        .strictObject({\n        key: zod_1.z.string().optional(),\n        limit: zod_1.z.number(),\n        period: zod_1.z.string().transform((x) => x),\n    })\n        .optional(),\n    throttle: zod_1.z\n        .strictObject({\n        key: zod_1.z.string().optional(),\n        limit: zod_1.z.number(),\n        period: zod_1.z.string().transform((x) => x),\n        burst: zod_1.z.number().optional(),\n    })\n        .optional(),\n    singleton: zod_1.z\n        .strictObject({\n        key: zod_1.z.string().optional(),\n        mode: zod_1.z.enum([\"skip\", \"cancel\"]),\n    })\n        .optional(),\n    cancel: zod_1.z\n        .array(zod_1.z.strictObject({\n        event: zod_1.z.string(),\n        if: zod_1.z.string().optional(),\n        timeout: zod_1.z.string().optional(),\n    }))\n        .optional(),\n    debounce: zod_1.z\n        .strictObject({\n        key: zod_1.z.string().optional(),\n        period: zod_1.z.string().transform((x) => x),\n        timeout: zod_1.z\n            .string()\n            .transform((x) => x)\n            .optional(),\n    })\n        .optional(),\n    timeouts: zod_1.z\n        .strictObject({\n        start: zod_1.z\n            .string()\n            .transform((x) => x)\n            .optional(),\n        finish: zod_1.z\n            .string()\n            .transform((x) => x)\n            .optional(),\n    })\n        .optional(),\n    priority: zod_1.z\n        .strictObject({\n        run: zod_1.z.string().optional(),\n    })\n        .optional(),\n    concurrency: zod_1.z\n        .union([\n        zod_1.z.number(),\n        concurrencyOptionSchema.transform((x) => x),\n        zod_1.z\n            .array(concurrencyOptionSchema.transform((x) => x))\n            .min(1)\n            .max(2),\n    ])\n        .optional(),\n});\nconst ok = (data) => {\n    return { ok: true, value: data };\n};\nexports.ok = ok;\nconst err = (error) => {\n    return { ok: false, error };\n};\nexports.err = err;\nexports.inBandSyncRequestBodySchema = zod_1.z.strictObject({\n    url: zod_1.z.string(),\n});\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/version.js":
/*!*****************************************!*\
  !*** ./node_modules/inngest/version.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.version = void 0;\n// Generated by genversion.\nexports.version = \"3.40.1\";\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC92ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGVBQWU7QUFDZjtBQUNBLGVBQWU7QUFDZiIsInNvdXJjZXMiOlsiL1VzZXJzL2hhcnNoc2hyaXZhc3Rhdi9EZXNrdG9wL0NvZGluZyBQcm9qZWN0cy9Kb2ItQXNzaXN0YW50LUFnZW50L25vZGVfbW9kdWxlcy9pbm5nZXN0L3ZlcnNpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnZlcnNpb24gPSB2b2lkIDA7XG4vLyBHZW5lcmF0ZWQgYnkgZ2VudmVyc2lvbi5cbmV4cG9ydHMudmVyc2lvbiA9IFwiMy40MC4xXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD12ZXJzaW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/version.js\n");

/***/ })

};
;